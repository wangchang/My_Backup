<?php
require("../../inc/header.php");

/*
		SoftName : EmpireBak Version 2010
		Author   : wm_chief
		Copyright: Powered by www.phome.net
*/

DoSetDbChar('utf8');
E_D("replace into `wp_posts` values('279','1','2013-04-01 14:01:05','2013-04-01 06:01:05','<p>上一节中梳理了Python Paste中Deploy机制的概念，这一节就做一点小小的实践。首先，我们举一个使用了Deploy的例子，这个就是OpenStack的Quantum组件的WSGI部分。我们先来看关于WSGI部分的配置文件，以ini后缀，那么就是api-paste.ini文件，决定了API的处理流程。我加入了适当的注释。</p>\n\n<!--more-->\n\n<h2>1 OpenStack Quantum配置文件api-paste.ini</h2>\n\n<pre><code>[composite:quantum]\nuse = egg:Paste#urlmap\n/: quantumversions\n/v2.0: quantumapi_v2_0\n#使用composite分解机制，composite使用了usrlmap，xxxxx/xxx的API交给quantumversions处理。xxxx/v2.0/xxxx的API交给quantumapi_v2_0处理。\n\n[composite:quantumapi_v2_0]\nuse = call:quantum.auth:pipeline_factory\nnoauth = extensions quantumapiapp_v2_0\nkeystone = authtoken keystonecontext extensions quantumapiapp_v2_0\n#quantumapi_v2_0依然是一个分解组件，使用了quantum.auth模块下的pipeline_factory，对于这个factory，传递了两个参数，一个是noauth,一个是keystone。\n\n[filter:keystonecontext]\npaste.filter_factory = quantum.auth:QuantumKeystoneContext.factory\n#对于keystonecontext，实际上是一个过滤器，使用了quantum.auth模块下的类的QuantumKeystoneContext的factory函数\n\n[filter:authtoken]\npaste.filter_factory = keystone.middleware.auth_token:filter_factory\nauth_host = 127.0.0.1\nauth_port = 35357\nauth_protocol = http\nadmin_tenant_name = %SERVICE_TENANT_NAME%\nadmin_user = %SERVICE_USER%\nadmin_password = %SERVICE_PASSWORD%\n#定义了另外一个filter\n\n[filter:extensions]\npaste.filter_factory = quantum.extensions.extensions:plugin_aware_extension_middleware_factory\n#定义了另外一个filter,这个filter是为了支持扩展quantum api的\n\n[app:quantumversions]\npaste.app_factory = quantum.api.versions:Versions.factory\n#核心的app部分，使用工厂函数，将app指向python代码。app_factory表明这个函数接收一系列参数，[DEFAULET]以及[app:]下面的，本部分本section没有参数，并返回一个函数对象。\n\n[app:quantumapiapp_v2_0]\npaste.app_factory = quantum.api.v2.router:APIRouter.factory\n#同上\n</code></pre>\n\n<p>我们来总结一下，整个Quantum处理api的流程如下,其中，强调的部分为函数代码，其他为配置文件中的section部分。</p>\n\n<p>对于路径为<code>/</code>类的API&#45;--|-quantumversions处理&#45;--|-调用<code>quantum.api.versions:Version</code>类的<code>factory函数</code>处理。</p>\n\n<p>对于路径为<code>/2.0</code>类的API&#45;--|-quantumapi&#95;v2&#95;0处理&#45;--|-调用<code>quantum.auth</code>中的<code>pipeline_factory</code>处理,同时传递了两个参数noauth和keystone,类型为字典。</p>\n\n<p>这个pipeline_factory中会读取另外一个变量CONF.auth（来自另外一个配置文件，不考虑），选择采用的认证方式，然后选择noauth或者keystone，并读取参数的值.</p>\n\n<p>那么，就有两种情况：</p>\n\n<p>noauth: 应用将会先经过extensions这个filter处理&#45;--|-调用了<code>quantum.extensions.extensions:plugin_aware_extension_middleware_factory</code>，用来处理扩展api请求，这是第一次包装&#45;--|-quantumapiapp&#95;v2&#95;0，这才是实际的WSGI应用，调用了<code>quantum.api.v2.router:APIRouter.factory</code>，并处理返回结果。</p>\n\n<p>keystone：和上面类似，不同的是多了几个filter,authtoken keystonecontext extensions quantumapiapp&#95;v2&#95;0,并且在每个filter中可能还会有参数传递给这个fliter。</p>\n\n<p>总的来说，通过pipeline装载多个filter,将最基本的app--APIRouter，层层包装，使其变为一个具有处理认证，扩展API等的应用（逻辑上看），filter的好处就是可以自定义，比如可以不要认证功能，这比写一个囊括全部功能的应用明显要好的多。</p>\n\n<h2>2 代码实践</h2>\n\n<h3>2.1 配置文件</h3>\n\n<pre><code>[DEFAULT]\ncompany = UESTC\nschool = Commuication and Information\n\n[composite:common]\nuse = egg:Paste#urlmap\n/:showversion\n/detail:showdetail\n\n[pipeline:showdetail]\npipeline = filter1 filter2 showstudetail\n\n[filter:filter1]\n#filter1 deal with auth,read args below\npaste.filter_factory = python_paste:AuthFilter.factory\nuser = admin\npasswd = admin\n\n[filter:filter2]\n#filter2 deal with time,read args below\npaste.filter_factory = python_paste:LogFilter.factory\n#all value is string\ndate = 20121120\n\n[app:showstudetail]\nname = wangchang\nage = 23\npaste.app_factory = python_paste:ShowStuDetail.factory\n\n[app:showversion]\nversion = 1.0.0\n</code></pre>\n\n<p>从配置文件可以看出，这个程序会有如下操作：</p>\n\n<ul>\n<li>对于http://localhost/的访问，会调用showversion这个应用，应用读取ini文件中的version值并返回。__注意，在ini中的所有值都是字符串。</li>\n<li>对于http://localhost/detail的访问，会先经过filter1以及filter2，这两个filter分别处理认证和LOG信息，他们会读取ini配置中的用户信息以及时间。最后才是交给showstudetail处理，showstudetail会读取ini中的用户信息并返回。__注意，使用多个filter的时候需要使用pipeline方式。</li>\n</ul>\n\n<h3>2.2 代码</h3>\n\n<pre><code>import sys\nimport os\nimport webob\nfrom webob import Request\nfrom webob import Response\n#from webob import environ\nfrom paste.deploy import loadapp\nfrom wsgiref.simple_server import make_server\nfrom pprint import pprint\n\nclass AuthFilter(object):\n      ''''''filter1,auth\n         1.factory read args and print,return self instance\n         2.call method return app\n         3.AuthFilter(app)\n      ''''''\n      def __init__(self,app):\n          self.app = app\n\n      def __call__(self,environ,start_response):\n          print ''this is Auth call filter1''\n          #pass environ and start_response to app\n          return self.app(environ,start_response)\n      @classmethod\n      def factory(cls,global_conf,**kwargs):\n          ''''''global_conf and kwargs are dict''''''\n          print ''######filter1##########''\n          print ''global_conf type:'',type(global_conf)\n          print ''[DEFAULT]'',global_conf\n          print ''kwargs type:'',type(kwargs)\n          print ''Auth Info'',kwargs\n          return AuthFilter\n\nclass LogFilter(object):\n      ''''''\n      filter2,Log\n      ''''''\n      def __init__(self,app):\n          self.app = app\n      def __call__(self,environ,start_response):\n          print ''This is call LogFilter filter2''\n          return self.app(environ,start_response)\n      @classmethod\n      def factory(cls,global_conf,**kwargs):\n          #print type(global_conf)\n          #print type(kwargs)\n          print ''######filter2###########''\n          print ''[DEFAULT]'',global_conf\n          print ''Log Info'',kwargs\n          return LogFilter\n\nclass ShowStuDetail(object):\n      ''''''\n      app\n      ''''''\n      def __init__(self,name,age):\n          self.name = name\n          self.age = age\n      def __call__(self,environ,start_response):\n          print ''this is call ShowStuDetail''\n          #pprint(environ)\n          #pprint environ\n          start_response(\"200 OK\",[(\"Content-type\",\"text/plain\")])\n          content = []\n          content.append(\"name: %s age:%s\\\\n\" % (self.name,self.age))\n          content.append(\"**********WSGI INFO***********\\\\n\")\n          for k,v in environ.iteritems():\n              content.append(''%s:%s \\\\n'' % (k,v))\n          return [''\\\\n''.join(content)] #return a list\n\n      @classmethod\n      def factory(cls,global_conf,**kwargs):\n          #self.name = kwargs[''name'']\n          #self.age = kwargs[''age'']\n          return ShowStuDetail(kwargs[''name''],kwargs[''age''])\n\nclass ShowVersion(object):\n      ''''''\n      app\n      ''''''\n      def __init__(self,version):\n          self.version = version\n      def __call__(self,environ,start_response):\n          print ''this is call ShowVersion''\n          req = Request(environ)\n          res = Response()\n          res.status = ''200 OK''\n          res.content_type = \"text/plain\"\n          content = []\n          #pprint(req.environ)\n          content.append(\"%s\\\\n\" % self.version)\n          content.append(\"*********WSGI INFO*********\")\n          for k,v in environ.iteritems():\n              content.append(''%s:%s\\\\n'' % (k,v))\n          res.body = ''\\\\n''.join(content)\n          return res(environ,start_response)\n      @classmethod\n      def factory(cls,global_conf,**kwargs):\n          #self.version = kwargs[''version'']\n          return ShowVersion(kwargs[''version''])\n\nif __name__ == ''__main__'':\n     config = \"python_paste.ini\"\n     appname = \"common\"\n     wsgi_app = loadapp(\"config:%s\" % os.path.abspath(config), appname)\n     server = make_server(''localhost'',7070,wsgi_app)\n     server.serve_forever()\n     pass\n</code></pre>\n\n<p>在程序中，对于web请求的处理，我分别采用了webob和普通WSGI定义的方式，后续我会补上webob的使用。</p>\n\n<h3>2.3 结果</h3>\n\n<p>先从服务端结果分析一下调用流程：</p>\n\n<pre><code>Ubuntu:~/python\$ python python_paste.py\n######filter1##########\nglobal_conf type: \n[DEFAULT] {''school'': ''Commuication and Information'', ''company'': ''UESTC'', ''here'':         ''/home/wachang/python'', ''__file__'': ''/home/wachang/python/python_paste.ini''}\nkwargs type: \nAuth Info {''passwd'': ''admin'', ''user'': ''admin''}\n######filter2###########\n[DEFAULT] {''school'': ''Commuication and Information'', ''company'': ''UESTC'', ''here'':     ''/home/wachang/python'', ''__file__'': ''/home/wachang/python/python_paste.ini''}\nLog Info {''date'': ''20121120''}\n以上是PD载入应用时，调用filter的factory方法输出的结果，可以看到，此读出了相关的变量信息。\n\n\nthis is call ShowVersion\nlocalhost - - [21/Nov/2012 13:23:40] \"GET / HTTP/1.1\" 200 2938\nthis is call ShowVersion\nlocalhost - - [21/Nov/2012 13:23:40] \"GET /favicon.ico HTTP/1.1\" 200 2889\n以上是接收/请求，因为没有使用filter，直接交予showversion应用处理，并返回。\n\nthis is Auth call filter1\nThis is call LogFilter filter2\nthis is call ShowStuDetail\nlocalhost - - [21/Nov/2012 13:24:23] \"GET /detail HTTP/1.1\" 200 3016\nthis is call ShowVersion\nlocalhost - - [21/Nov/2012 13:24:24] \"GET /favicon.ico HTTP/1.1\" 200 2889\nfilter的调用时重点啊，可以看到，调用的顺序和pipeline中一样。最后才调用应用。\n</code></pre>\n\n<p>需要继续折腾的话，就看看<a href=\"http://docs.webob.org/en/latest/do-it-yourself.html\">webob:do-it-yourselfrself</a></p>\n','Python.Paste指南之Deploy(2)-实践','','inherit','open','open','','275-revision-3','','','2013-04-01 14:01:05','2013-04-01 06:01:05','','275','http://blog.wachang.net/2013/04/275-revision-3/','0','revision','','0');");
E_D("replace into `wp_posts` values('280','1','2013-04-01 14:02:25','2013-04-01 06:02:25','<p>上一节中梳理了Python Paste中Deploy机制的概念，这一节就做一点小小的实践。首先，我们举一个使用了Deploy的例子，这个就是OpenStack的Quantum组件的WSGI部分。我们先来看关于WSGI部分的配置文件，以ini后缀，那么就是api-paste.ini文件，决定了API的处理流程。我加入了适当的注释。</p>\n\n<!--more-->\n\n<h2>1 OpenStack Quantum配置文件api-paste.ini</h2>\n\n<pre><code>[composite:quantum]\nuse = egg:Paste#urlmap\n/: quantumversions\n/v2.0: quantumapi_v2_0\n#使用composite分解机制，composite使用了usrlmap，xxxxx/xxx的API交给quantumversions处理。xxxx/v2.0/xxxx的API交给quantumapi_v2_0处理。\n\n[composite:quantumapi_v2_0]\nuse = call:quantum.auth:pipeline_factory\nnoauth = extensions quantumapiapp_v2_0\nkeystone = authtoken keystonecontext extensions quantumapiapp_v2_0\n#quantumapi_v2_0依然是一个分解组件，使用了quantum.auth模块下的pipeline_factory，对于这个factory，传递了两个参数，一个是noauth,一个是keystone。\n\n[filter:keystonecontext]\npaste.filter_factory = quantum.auth:QuantumKeystoneContext.factory\n#对于keystonecontext，实际上是一个过滤器，使用了quantum.auth模块下的类的QuantumKeystoneContext的factory函数\n\n[filter:authtoken]\npaste.filter_factory = keystone.middleware.auth_token:filter_factory\nauth_host = 127.0.0.1\nauth_port = 35357\nauth_protocol = http\nadmin_tenant_name = %SERVICE_TENANT_NAME%\nadmin_user = %SERVICE_USER%\nadmin_password = %SERVICE_PASSWORD%\n#定义了另外一个filter\n\n[filter:extensions]\npaste.filter_factory = quantum.extensions.extensions:plugin_aware_extension_middleware_factory\n#定义了另外一个filter,这个filter是为了支持扩展quantum api的\n\n[app:quantumversions]\npaste.app_factory = quantum.api.versions:Versions.factory\n#核心的app部分，使用工厂函数，将app指向python代码。app_factory表明这个函数接收一系列参数，[DEFAULET]以及[app:]下面的，本部分本section没有参数，并返回一个函数对象。\n\n[app:quantumapiapp_v2_0]\npaste.app_factory = quantum.api.v2.router:APIRouter.factory\n#同上\n</code></pre>\n\n<p>我们来总结一下，整个Quantum处理api的流程如下,其中，强调的部分为函数代码，其他为配置文件中的section部分。</p>\n\n<p>对于路径为<code>/</code>类的API-->quantumversions处理-->调用<code>quantum.api.versions:Version</code>类的<code>factory函数</code>处理。</p>\n\n<p>对于路径为<code>/2.0</code>类的API-->quantumapi&#95;v2&#95;0处理-->调用<code>quantum.auth</code>中的<code>pipeline_factory</code>处理,同时传递了两个参数noauth和keystone,类型为字典。</p>\n\n<p>这个pipeline_factory中会读取另外一个变量CONF.auth（来自另外一个配置文件，不考虑），选择采用的认证方式，然后选择noauth或者keystone，并读取参数的值.</p>\n\n<p>那么，就有两种情况：</p>\n\n<p>noauth: 应用将会先经过extensions这个filter处理&#45;--||-调用了<code>quantum.extensions.extensions:plugin_aware_extension_middleware_factory</code>，用来处理扩展api请求，这是第一次包装&#45;--||-quantumapiapp&#95;v2&#95;0，这才是实际的WSGI应用，调用了<code>quantum.api.v2.router:APIRouter.factory</code>，并处理返回结果。</p>\n\n<p>keystone：和上面类似，不同的是多了几个filter,authtoken keystonecontext extensions quantumapiapp&#95;v2&#95;0,并且在每个filter中可能还会有参数传递给这个fliter。</p>\n\n<p>总的来说，通过pipeline装载多个filter,将最基本的app--APIRouter，层层包装，使其变为一个具有处理认证，扩展API等的应用（逻辑上看），filter的好处就是可以自定义，比如可以不要认证功能，这比写一个囊括全部功能的应用明显要好的多。</p>\n\n<h2>2 代码实践</h2>\n\n<h3>2.1 配置文件</h3>\n\n<pre><code>[DEFAULT]\ncompany = UESTC\nschool = Commuication and Information\n\n[composite:common]\nuse = egg:Paste#urlmap\n/:showversion\n/detail:showdetail\n\n[pipeline:showdetail]\npipeline = filter1 filter2 showstudetail\n\n[filter:filter1]\n#filter1 deal with auth,read args below\npaste.filter_factory = python_paste:AuthFilter.factory\nuser = admin\npasswd = admin\n\n[filter:filter2]\n#filter2 deal with time,read args below\npaste.filter_factory = python_paste:LogFilter.factory\n#all value is string\ndate = 20121120\n\n[app:showstudetail]\nname = wangchang\nage = 23\npaste.app_factory = python_paste:ShowStuDetail.factory\n\n[app:showversion]\nversion = 1.0.0\n</code></pre>\n\n<p>从配置文件可以看出，这个程序会有如下操作：</p>\n\n<ul>\n<li>对于http://localhost/的访问，会调用showversion这个应用，应用读取ini文件中的version值并返回。__注意，在ini中的所有值都是字符串。</li>\n<li>对于http://localhost/detail的访问，会先经过filter1以及filter2，这两个filter分别处理认证和LOG信息，他们会读取ini配置中的用户信息以及时间。最后才是交给showstudetail处理，showstudetail会读取ini中的用户信息并返回。__注意，使用多个filter的时候需要使用pipeline方式。</li>\n</ul>\n\n<h3>2.2 代码</h3>\n\n<pre><code>import sys\nimport os\nimport webob\nfrom webob import Request\nfrom webob import Response\n#from webob import environ\nfrom paste.deploy import loadapp\nfrom wsgiref.simple_server import make_server\nfrom pprint import pprint\n\nclass AuthFilter(object):\n      ''''''filter1,auth\n         1.factory read args and print,return self instance\n         2.call method return app\n         3.AuthFilter(app)\n      ''''''\n      def __init__(self,app):\n          self.app = app\n\n      def __call__(self,environ,start_response):\n          print ''this is Auth call filter1''\n          #pass environ and start_response to app\n          return self.app(environ,start_response)\n      @classmethod\n      def factory(cls,global_conf,**kwargs):\n          ''''''global_conf and kwargs are dict''''''\n          print ''######filter1##########''\n          print ''global_conf type:'',type(global_conf)\n          print ''[DEFAULT]'',global_conf\n          print ''kwargs type:'',type(kwargs)\n          print ''Auth Info'',kwargs\n          return AuthFilter\n\nclass LogFilter(object):\n      ''''''\n      filter2,Log\n      ''''''\n      def __init__(self,app):\n          self.app = app\n      def __call__(self,environ,start_response):\n          print ''This is call LogFilter filter2''\n          return self.app(environ,start_response)\n      @classmethod\n      def factory(cls,global_conf,**kwargs):\n          #print type(global_conf)\n          #print type(kwargs)\n          print ''######filter2###########''\n          print ''[DEFAULT]'',global_conf\n          print ''Log Info'',kwargs\n          return LogFilter\n\nclass ShowStuDetail(object):\n      ''''''\n      app\n      ''''''\n      def __init__(self,name,age):\n          self.name = name\n          self.age = age\n      def __call__(self,environ,start_response):\n          print ''this is call ShowStuDetail''\n          #pprint(environ)\n          #pprint environ\n          start_response(\"200 OK\",[(\"Content-type\",\"text/plain\")])\n          content = []\n          content.append(\"name: %s age:%s\\\\n\" % (self.name,self.age))\n          content.append(\"**********WSGI INFO***********\\\\n\")\n          for k,v in environ.iteritems():\n              content.append(''%s:%s \\\\n'' % (k,v))\n          return [''\\\\n''.join(content)] #return a list\n\n      @classmethod\n      def factory(cls,global_conf,**kwargs):\n          #self.name = kwargs[''name'']\n          #self.age = kwargs[''age'']\n          return ShowStuDetail(kwargs[''name''],kwargs[''age''])\n\nclass ShowVersion(object):\n      ''''''\n      app\n      ''''''\n      def __init__(self,version):\n          self.version = version\n      def __call__(self,environ,start_response):\n          print ''this is call ShowVersion''\n          req = Request(environ)\n          res = Response()\n          res.status = ''200 OK''\n          res.content_type = \"text/plain\"\n          content = []\n          #pprint(req.environ)\n          content.append(\"%s\\\\n\" % self.version)\n          content.append(\"*********WSGI INFO*********\")\n          for k,v in environ.iteritems():\n              content.append(''%s:%s\\\\n'' % (k,v))\n          res.body = ''\\\\n''.join(content)\n          return res(environ,start_response)\n      @classmethod\n      def factory(cls,global_conf,**kwargs):\n          #self.version = kwargs[''version'']\n          return ShowVersion(kwargs[''version''])\n\nif __name__ == ''__main__'':\n     config = \"python_paste.ini\"\n     appname = \"common\"\n     wsgi_app = loadapp(\"config:%s\" % os.path.abspath(config), appname)\n     server = make_server(''localhost'',7070,wsgi_app)\n     server.serve_forever()\n     pass\n</code></pre>\n\n<p>在程序中，对于web请求的处理，我分别采用了webob和普通WSGI定义的方式，后续我会补上webob的使用。</p>\n\n<h3>2.3 结果</h3>\n\n<p>先从服务端结果分析一下调用流程：</p>\n\n<pre><code>Ubuntu:~/python\$ python python_paste.py\n######filter1##########\nglobal_conf type: \n[DEFAULT] {''school'': ''Commuication and Information'', ''company'': ''UESTC'', ''here'':         ''/home/wachang/python'', ''__file__'': ''/home/wachang/python/python_paste.ini''}\nkwargs type: \nAuth Info {''passwd'': ''admin'', ''user'': ''admin''}\n######filter2###########\n[DEFAULT] {''school'': ''Commuication and Information'', ''company'': ''UESTC'', ''here'':     ''/home/wachang/python'', ''__file__'': ''/home/wachang/python/python_paste.ini''}\nLog Info {''date'': ''20121120''}\n以上是PD载入应用时，调用filter的factory方法输出的结果，可以看到，此读出了相关的变量信息。\n\n\nthis is call ShowVersion\nlocalhost - - [21/Nov/2012 13:23:40] \"GET / HTTP/1.1\" 200 2938\nthis is call ShowVersion\nlocalhost - - [21/Nov/2012 13:23:40] \"GET /favicon.ico HTTP/1.1\" 200 2889\n以上是接收/请求，因为没有使用filter，直接交予showversion应用处理，并返回。\n\nthis is Auth call filter1\nThis is call LogFilter filter2\nthis is call ShowStuDetail\nlocalhost - - [21/Nov/2012 13:24:23] \"GET /detail HTTP/1.1\" 200 3016\nthis is call ShowVersion\nlocalhost - - [21/Nov/2012 13:24:24] \"GET /favicon.ico HTTP/1.1\" 200 2889\nfilter的调用时重点啊，可以看到，调用的顺序和pipeline中一样。最后才调用应用。\n</code></pre>\n\n<p>需要继续折腾的话，就看看<a href=\"http://docs.webob.org/en/latest/do-it-yourself.html\">webob:do-it-yourselfrself</a></p>\n','Python.Paste指南之Deploy(2)-实践','','inherit','open','open','','275-revision-4','','','2013-04-01 14:02:25','2013-04-01 06:02:25','','275','http://blog.wachang.net/2013/04/275-revision-4/','0','revision','','0');");
E_D("replace into `wp_posts` values('281','1','2013-04-01 16:42:48','2013-04-01 08:42:48','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum 基础知识及服务启动</p>\n</blockquote>\n\n<p>我认为Quantum在代码上可以分为三个部分：</p>\n\n<ul>\n<li>Quantum Server：启动进程，处理REST API</li>\n<li>Quantum Plugin：对于一个API请求，如何将此API内容递交给Plugin处理。</li>\n<li>Plugin与Agent：两者之间是如何交互的，RPC相关的实现。</li>\n</ul>\n\n<!--more-->\n\n<h2>1 关于配置文件</h2>\n\n<p>Quantum有四类配置文件：</p>\n\n<ul>\n<li>api-paste.ini:这是用来配置Quantum WSGI服务的，主要就是如何处理一个REST API请求。此文件的解析是通过Paste.Deploy库来完成的。</li>\n<li>quantum.conf:主要是配置Quantum选用的plugin,以及和数据库交互，以及与其他组件的交互，此文件解析是通过OpenStack自己基于库ConfigParser开发的oslo库完成的。</li>\n<li>插件配置文件，比如：ovs&#95;quantum&#95;plugin.ini，这个配置文件，Plugin和Agent都会用到，此文件解析是通过OpenStack自己基于库ConfigParser开发的oslo库完成的。</li>\n<li>rootwrap.conf：貌似是具体执行一些linux命令时候的包装。</li>\n</ul>\n\n<p>关于配置文件如何解析，很重要，我在基础篇中已经有详细的介绍，可以先看看～</p>\n\n<h2>2 服务启动目录</h2>\n\n<p>在quantum/bin下有下图的一些文件：</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png\" alt=\"quantum-bin\" width=\"289\" height=\"458\" class=\"aligncenter size-full wp-image-282\" /></a></p>\n\n<p>这里面的每一个文件在安装quantum之后都是放在/usr/bin下面的，也就是作为服务启动的脚本，那么我们打开quantum-server这个，作为quantum启动的脚本，里面内容很简单：</p>\n\n<pre><code>mport eventlet\neventlet.monkey_patch()\n\nimport os\nimport sys\nsys.path.insert(0, os.getcwd())\nfrom quantum.server import main as server\n\nserver()\n</code></pre>\n\n<p>说白了，其实这个目录的东西可以看成是一个\"引入\"，关键还是得看import的部分，才是真正的执行代码。</p>\n\n<h2>3 Quantum服务启动</h2>\n\n<p>quantum服务的启动主要是quantum/server/<strong>init</strong>.py文件：</p>\n\n<pre><code>import sys\nfrom oslo.config import cfg #创建一个配置管理器cfg.CONF\nfrom quantum.common import config #向cfg.CONF注册核心选项core_opts,指明需要读取哪些选项或者哪些CLI参数\nfrom quantum import service\n\ndef main():\n    # the configuration will be read into the cfg.CONF global data structure\n    config.parse(sys.argv[1:]) #解析配置文件，即是quantum.conf,把相应的配置信息写入到cfg.CONF中。\n\n    try:\n        quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务\n        quantum_service.wait()#启动WSGI服务\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n\n<p>主要讲两个部分，第一是配置读取，<code>from oslo.config import cfg</code>创建了一个cfg.CONF配置管理器，<code>from quantum.common import config</code>而quantum common则会想配置管理器注册核心选项core&#95;opts信息，主要是读取quantum.conf文件使用，以及cli&#95;opts，提供CLI操作支持，同时会定义两个比较重要的函数：</p>\n\n<pre><code>def parse(args):#解析配置文件的，实际上是调用cdg.CONF()的call方法\ndef setup_logging(conf):#设置LOG信息用\ndef load_paste_app(app_name):#载入WSGI应用的，涉及API处理部分\n</code></pre>\n\n<p>关于这一部分，如果不是很懂的话，请先阅读本系列文章基础部分，关于配置文件cfg的部分，请阅读<a href=\"http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-config-file/\">Quantum OpenvSwitch Plugin&amp;Agent读取配置文件</a>,原理都是一样的。</p>\n\n<p>第二部分，就是启动相应的WSGI服务器，我们主要看</p>\n\n<pre><code>quantum_service = service.serve_wsgi(service.QuantumApiService)\nquantum_service.wait()\n</code></pre>\n\n<p>主要就是这两句，这一部分的细节会在随后中讲，这里的核心就是使用paste.deploy加载一个app，并作为处理API请求的应用，然后启动相应的服务器。</p>\n','Quantum 基础知识及服务启动','','publish','open','open','','quantum-code-base','','\nhttp://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-config-file/','2013-04-02 15:40:16','2013-04-02 07:40:16','','0','http://blog.wachang.net/?p=281','0','post','','0');");
E_D("replace into `wp_posts` values('282','1','2013-04-01 16:01:54','2013-04-01 08:01:54','','quantum-bin','','inherit','open','open','','quantum-bin','','','2013-04-01 16:01:54','2013-04-01 08:01:54','','281','http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png','0','attachment','image/png','0');");
E_D("replace into `wp_posts` values('284','1','2013-04-01 16:16:03','2013-04-01 08:16:03','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum 基础知识及服务启动</p>\n</blockquote>\n\n<p>我认为Quantum在代码上可以分为三个部分：</p>\n\n<ul>\n<li>Quantum Server：启动进程，处理REST API</li>\n<li>Quantum Plugin：对于一个API请求，如何将此API内容递交给Plugin处理。</li>\n<li>Plugin与Agent：两者之间是如何交互的，RPC相关的实现。</li>\n</ul>\n\n<h2>1 关于配置文件</h2>\n\n<p>Quantum有四类配置文件：</p>\n\n<ul>\n<li>api-paste.ini:这是用来配置Quantum WSGI服务的，主要就是如何处理一个REST API请求。此文件的解析是通过Paste.Deploy库来完成的。</li>\n<li>quantum.conf:主要是配置Quantum选用的plugin,以及和数据库交互，以及与其他组件的交互，此文件解析是通过OpenStack自己基于库ConfigParser开发的oslo库完成的。</li>\n<li>插件配置文件，比如：ovs_quantum_plugin.ini，这个配置文件，Plugin和Agent都会用到，此文件解析是通过OpenStack自己基于库ConfigParser开发的oslo库完成的。</li>\n<li>rootwrap.conf：貌似是具体执行一些linux命令时候的包装。</li>\n</ul>\n\n<p>关于配置文件如何解析，很重要，我在基础篇中已经有详细的介绍，可以先看看～</p>\n\n<h2>2 服务启动目录</h2>\n\n<p>在quantum/bin下有下图的一些文件：</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png\" alt=\"quantum-bin\" width=\"289\" height=\"458\" class=\"aligncenter size-full wp-image-282\" /></a></p>\n\n<p>这里面的每一个文件在安装quantum之后都是放在/usr/bin下面的，也就是作为服务启动的脚本，那么我们打开quantum-server这个，作为quantum启动的脚本，里面内容很简单：</p>\n\n<pre><code>mport eventlet\neventlet.monkey_patch()\n\nimport os\nimport sys\nsys.path.insert(0, os.getcwd())\nfrom quantum.server import main as server\n\nserver()\n</code></pre>\n\n<p>说白了，其实这个目录的东西可以看成是一个\"引入\"，关键还是得看import的部分，才是真正的执行代码。</p>\n\n<h2>3 Quantum服务启动</h2>\n\n<p>quantum服务的启动主要是quantum/server/<strong>init</strong>.py文件：</p>\n\n<pre><code>import sys\nfrom oslo.config import cfg #创建一个配置管理器cfg.CONF\nfrom quantum.common import config\nfrom quantum import service\n\ndef main():\n    # the configuration will be read into the cfg.CONF global data structure\n    config.parse(sys.argv[1:])\n\n    try:\n        quantum_service = service.serve_wsgi(service.QuantumApiService)\n        quantum_service.wait()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n\n<p>主要讲两个部分，第一是配置读取，<code>from oslo.config import cfg</code>创建了一个cfg.CONF配置管理器，<code>from quantum.common import config</code>而quantum common则会想配置管理器注册核心选项core_opts信息，主要是读取quantum.conf文件使用，以及cli_opts，提供CLI操作支持，同时会定义两个比较重要的函数：</p>\n\n<pre><code>def parse(args):#解析配置文件的，实际上是调用cdg.CONF()的call方法\ndef setup_logging(conf):#设置LOG信息用\ndef load_paste_app(app_name):#载入WSGI应用的，涉及API处理部分\n</code></pre>\n\n<p>关于这一部分，如果不是很懂的话，请先阅读本系列文章基础部分，关于配置文件cfg的部分，请阅读<a href=\"http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-config-file/\">Quantum OpenvSwitch Plugin&amp;Agent读取配置文件</a>,原理都是一样的。</p>\n','Quantum 基础知识及服务启动','','inherit','open','open','','281-revision','','','2013-04-01 16:16:03','2013-04-01 08:16:03','','281','http://blog.wachang.net/2013/04/281-revision/','0','revision','','0');");
E_D("replace into `wp_posts` values('285','1','2013-04-01 16:41:51','2013-04-01 08:41:51','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum 基础知识及服务启动</p>\n</blockquote>\n\n<p>我认为Quantum在代码上可以分为三个部分：</p>\n\n<ul>\n<li>Quantum Server：启动进程，处理REST API</li>\n<li>Quantum Plugin：对于一个API请求，如何将此API内容递交给Plugin处理。</li>\n<li>Plugin与Agent：两者之间是如何交互的，RPC相关的实现。</li>\n</ul>\n\n<h2>1 关于配置文件</h2>\n\n<p>Quantum有四类配置文件：</p>\n\n<ul>\n<li>api-paste.ini:这是用来配置Quantum WSGI服务的，主要就是如何处理一个REST API请求。此文件的解析是通过Paste.Deploy库来完成的。</li>\n<li>quantum.conf:主要是配置Quantum选用的plugin,以及和数据库交互，以及与其他组件的交互，此文件解析是通过OpenStack自己基于库ConfigParser开发的oslo库完成的。</li>\n<li>插件配置文件，比如：ovs&#95;quantum&#95;plugin.ini，这个配置文件，Plugin和Agent都会用到，此文件解析是通过OpenStack自己基于库ConfigParser开发的oslo库完成的。</li>\n<li>rootwrap.conf：貌似是具体执行一些linux命令时候的包装。</li>\n</ul>\n\n<p>关于配置文件如何解析，很重要，我在基础篇中已经有详细的介绍，可以先看看～</p>\n\n<h2>2 服务启动目录</h2>\n\n<p>在quantum/bin下有下图的一些文件：</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png\" alt=\"quantum-bin\" width=\"289\" height=\"458\" class=\"aligncenter size-full wp-image-282\" /></a></p>\n\n<p>这里面的每一个文件在安装quantum之后都是放在/usr/bin下面的，也就是作为服务启动的脚本，那么我们打开quantum-server这个，作为quantum启动的脚本，里面内容很简单：</p>\n\n<pre><code>mport eventlet\neventlet.monkey_patch()\n\nimport os\nimport sys\nsys.path.insert(0, os.getcwd())\nfrom quantum.server import main as server\n\nserver()\n</code></pre>\n\n<p>说白了，其实这个目录的东西可以看成是一个\"引入\"，关键还是得看import的部分，才是真正的执行代码。</p>\n\n<h2>3 Quantum服务启动</h2>\n\n<p>quantum服务的启动主要是quantum/server/<strong>init</strong>.py文件：</p>\n\n<pre><code>import sys\nfrom oslo.config import cfg #创建一个配置管理器cfg.CONF\nfrom quantum.common import config #注册核心选项core_opts\nfrom quantum import service\n\ndef main():\n    # the configuration will be read into the cfg.CONF global data structure\n    config.parse(sys.argv[1:]) #解析配置文件，即是quantum.conf,把相应的配置信息写入到cfg.CONF中。\n\n    try:\n        quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务\n        quantum_service.wait()#启动WSGI服务\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n\n<p>主要讲两个部分，第一是配置读取，<code>from oslo.config import cfg</code>创建了一个cfg.CONF配置管理器，<code>from quantum.common import config</code>而quantum common则会想配置管理器注册核心选项core&#95;opts信息，主要是读取quantum.conf文件使用，以及cli&#95;opts，提供CLI操作支持，同时会定义两个比较重要的函数：</p>\n\n<pre><code>def parse(args):#解析配置文件的，实际上是调用cdg.CONF()的call方法\ndef setup_logging(conf):#设置LOG信息用\ndef load_paste_app(app_name):#载入WSGI应用的，涉及API处理部分\n</code></pre>\n\n<p>关于这一部分，如果不是很懂的话，请先阅读本系列文章基础部分，关于配置文件cfg的部分，请阅读<a href=\"http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-config-file/\">Quantum OpenvSwitch Plugin&amp;Agent读取配置文件</a>,原理都是一样的。</p>\n\n<p>第二部分，就是启动相应的WSGI服务器，我们主要看</p>\n\n<pre><code>quantum_service = service.serve_wsgi(service.QuantumApiService)\nquantum_service.wait()\n</code></pre>\n\n<p>主要就是这两句，这一部分的细节会在随后中讲，这里的核心就是使用paste.deploy加载一个app，并作为处理API请求的应用，然后启动相应的服务器。</p>\n','Quantum 基础知识及服务启动','','inherit','open','open','','281-revision-2','','','2013-04-01 16:41:51','2013-04-01 08:41:51','','281','http://blog.wachang.net/2013/04/281-revision-2/','0','revision','','0');");
E_D("replace into `wp_posts` values('286','1','2013-04-01 13:49:10','2013-04-01 05:49:10','<h1>浅出OpenStack源码系列</h1>\n\n<h2>1.Python基础模块篇</h2>\n\n<p>OpenStack中使用了许多python模块，这一章就先介绍一下主要模块的最用，同时也是后续文章中的一些参考。</p>\n\n<p><a href=\"http://webpython.codepoint.net/wsgi_tutorial\">Python:WSGI介绍</a></p>\n\n<p><a href=\"http://blog.wachang.net/2013/04/python-paste-deploy-1/\">Python.Paste指南之Deploy(1)-概念</a></p>\n\n<p><a href=\"http://blog.wachang.net/2013/04/python-paste-deploy-2/\">Python.Paste指南之Deploy(2)-实践</a></p>\n\n<h2>2.Quantum篇</h2>\n\n<h3>2.3 OpenvSwitch Plugin</h3>\n\n<p><a href=\"http://blog.wachang.net/2013/03/quantum-ovs-plugin-code-structure/\">Quantum OpenvSwitch Plugin代码架构</a></p>\n\n<p><a href=\"http://blog.wachang.net/2013/03/quantum-ovs-agent-config-file/\">Quantum OpenvSwitch Plugin&amp;Agent读取配置文件</a></p>\n\n<p><a href=\"http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-rpc-1/\">Quantum OpenvSwitch Plugin和Agent的RPC机制（一）</a></p>\n','浅出OpenStack源码','','inherit','open','open','','209-revision-6','','','2013-04-01 13:49:10','2013-04-01 05:49:10','','209','http://blog.wachang.net/2013/04/209-revision-6/','0','revision','','0');");
E_D("replace into `wp_posts` values('287','1','2013-04-28 15:37:39','0000-00-00 00:00:00','<p>以下是我git clone的Quantum的源代码，我简单做一下注释。</p>\n\n<pre><code>root@Compute2:~/quantum# tree\n.\n├── bin #各个组件的启动脚本\n│   ├── quantum-check-nvp-config\n│   ├── quantum-db-manage\n│   ├── quantum-debug\n│   ├── quantum-dhcp-agent\n│   ├── quantum-dhcp-agent-dnsmasq-lease-update\n│   ├── quantum-hyperv-agent\n│   ├── quantum-l3-agent\n│   ├── quantum-lbaas-agent\n│   ├── quantum-linuxbridge-agent\n│   ├── quantum-metadata-agent\n│   ├── quantum-nec-agent\n│   ├── quantum-netns-cleanup\n│   ├── quantum-ns-metadata-proxy\n│   ├── quantum-openvswitch-agent\n│   ├── quantum-ovs-cleanup\n│   ├── quantum-rootwrap\n│   ├── quantum-rpc-zmq-receiver\n│   ├── quantum-ryu-agent\n│   ├── quantum-server\n│   └── quantum-usage-audit\n├── contrib\n│   └── redhat-eventlet.patch\n├── doc#文档目录，已删除，可以用sphix编译\n├── etc#这是Quantum中所有的配置文件例子\n│   ├── api-paste.ini #配置WSGI应用，用于REST API处理\n│   ├── dhcp_agent.ini\n│   ├── init.d\n│   │   └── quantum-server #配置服务脚本，service quantum xxx\n│   ├── l3_agent.ini\n│   ├── lbaas_agent.ini\n│   ├── metadata_agent.ini\n│   ├── policy.json\n│   ├── quantum\n│   │   ├── plugins #都是插件的配置\n│   │   │   ├── bigswitch\n│   │   │   │   └── restproxy.ini\n│   │   │   ├── brocade\n│   │   │   │   └── brocade.ini\n│   │   │   ├── cisco\n│   │   │   │   ├── cisco_plugins.ini\n│   │   │   │   ├── credentials.ini\n│   │   │   │   ├── db_conn.ini\n│   │   │   │   ├── l2network_plugin.ini\n│   │   │   │   └── nexus.ini\n│   │   │   ├── hyperv\n│   │   │   │   └── hyperv_quantum_plugin.ini\n│   │   │   ├── linuxbridge\n│   │   │   │   └── linuxbridge_conf.ini\n│   │   │   ├── metaplugin\n│   │   │   │   └── metaplugin.ini\n│   │   │   ├── midonet\n│   │   │   │   └── midonet.ini\n│   │   │   ├── nec\n│   │   │   │   └── nec.ini\n│   │   │   ├── nicira\n│   │   │   │   └── nvp.ini\n│   │   │   ├── openvswitch\n│   │   │   │   └── ovs_quantum_plugin.ini\n│   │   │   ├── plumgrid\n│   │   │   │   └── plumgrid.ini\n│   │   │   └── ryu\n│   │   │       └── ryu.ini\n│   │   └── rootwrap.d\n│   │       ├── debug.filters\n│   │       ├── dhcp.filters\n│   │       ├── iptables-firewall.filters\n│   │       ├── l3.filters\n│   │       ├── lbaas-haproxy.filters\n│   │       ├── linuxbridge-plugin.filters\n│   │       ├── nec-plugin.filters\n│   │       ├── openvswitch-plugin.filters\n│   │       └── ryu-plugin.filters\n│   ├── quantum.conf #quantum配置文件\n│   └── rootwrap.conf\n├── HACKING.rst\n├── LICENSE\n├── MANIFEST.in\n├── openstack-common.conf\n├── quantum\n│   ├── agent\n│   │   ├── common\n│   │   │   ├── config.py#注册agent通用的选项，主要是agent_state的选项\n│   │   │   └── __init__.py\n│   │   ├── dhcp_agent.py\n│   │   ├── firewall.py\n│   │   ├── __init__.py\n│   │   ├── l3_agent.py\n│   │   ├── linux#涉及linux操作的库，比如设置iptables，获得MAC地址等\n│   │   │   ├── daemon.py\n│   │   │   ├── dhcp.py\n│   │   │   ├── external_process.py\n│   │   │   ├── __init__.py\n│   │   │   ├── interface.py\n│   │   │   ├── ip_lib.py\n│   │   │   ├── iptables_firewall.py\n│   │   │   ├── iptables_manager.py\n│   │   │   ├── ovs_lib.py\n│   │   │   └── utils.py\n│   │   ├── metadata\n│   │   │   ├── agent.py\n│   │   │   ├── __init__.py\n│   │   │   └── namespace_proxy.py\n│   │   ├── netns_cleanup_util.py\n│   │   ├── ovs_cleanup_util.py\n│   │   ├── rpc.py#Agent端通过RPC向Plugin通信的实现\n│   │   └── securitygroups_rpc.py\n│   ├── api\n│   │   ├── api_common.py\n│   │   ├── extensions.py\n│   │   ├── __init__.py\n│   │   ├── rpc\n│   │   │   ├── agentnotifiers\n│   │   │   │   ├── dhcp_rpc_agent_api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── l3_rpc_agent_api.py\n│   │   │   └── __init__.py\n│   │   ├── v2\n│   │   │   ├── attributes.py\n│   │   │   ├── base.py\n│   │   │   ├── __init__.py\n│   │   │   ├── resource.py\n│   │   │   └── router.py\n│   │   ├── versions.py\n│   │   └── views\n│   │       ├── __init__.py\n│   │       └── versions.py\n│   ├── auth.py\n│   ├── common\n│   │   ├── config.py\n│   │   ├── constants.py\n│   │   ├── exceptions.py\n│   │   ├── __init__.py\n│   │   ├── rpc.py\n│   │   ├── test_lib.py\n│   │   ├── topics.py\n│   │   └── utils.py\n│   ├── context.py\n│   ├── db\n│   │   ├── agentschedulers_db.py\n│   │   ├── agents_db.py\n│   │   ├── api.py\n│   │   ├── db_base_plugin_v2.py\n│   │   ├── dhcp_rpc_base.py\n│   │   ├── extraroute_db.py\n│   │   ├── __init__.py\n│   │   ├── l3_db.py\n│   │   ├── l3_rpc_base.py\n│   │   ├── loadbalancer\n│   │   │   ├── __init__.py\n│   │   │   └── loadbalancer_db.py\n│   │   ├── migration\n│   │   │   ├── alembic.ini\n│   │   │   ├── alembic_migrations\n│   │   │   │   ├── common_ext_ops.py\n│   │   │   │   ├── env.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── script.py.mako\n│   │   │   │   └── versions\n│   │   │   │       ├── 1149d7de0cfa_port_security.py\n│   │   │   │       ├── 1341ed32cc1e_nvp_netbinding_update.py\n│   │   │   │       ├── 1b693c095aa3_quota_ext_db_grizzly.py\n│   │   │   │       ├── 1c33fa3cd1a1_extra_route_config.py\n│   │   │   │       ├── 1d76643bcec4_nvp_netbinding.py\n│   │   │   │       ├── 2a6d0b51f4bb_cisco_plugin_cleanup.py\n│   │   │   │       ├── 2c4af419145b_l3_support.py\n│   │   │   │       ├── 363468ac592c_nvp_network_gw.py\n│   │   │   │       ├── 38335592a0dc_nvp_portmap.py\n│   │   │   │       ├── 3b54bf9e29f7_nec_plugin_sharednet.py\n│   │   │   │       ├── 3cb5d900c5de_security_groups.py\n│   │   │   │       ├── 45680af419f9_nvp_qos.py\n│   │   │   │       ├── 4692d074d587_agent_scheduler.py\n│   │   │   │       ├── 48b6f43f7471_service_type.py\n│   │   │   │       ├── 49332180ca96_ryu_plugin_update.py\n│   │   │   │       ├── 511471cc46b_agent_ext_model_supp.py\n│   │   │   │       ├── 54c2c487e913_lbaas.py\n│   │   │   │       ├── 5a875d0e5c_ryu.py\n│   │   │   │       ├── folsom_initial.py\n│   │   │   │       ├── grizzly_release.py\n│   │   │   │       └── README\n│   │   │   ├── cli.py\n│   │   │   ├── __init__.py\n│   │   │   └── README\n│   │   ├── model_base.py\n│   │   ├── models_v2.py\n│   │   ├── portsecurity_db.py\n│   │   ├── quota_db.py\n│   │   ├── routedserviceinsertion_db.py\n│   │   ├── routerservicetype_db.py\n│   │   ├── securitygroups_db.py\n│   │   ├── securitygroups_rpc_base.py\n│   │   ├── servicetype_db.py\n│   │   └── sqlalchemyutils.py\n│   ├── debug\n│   │   ├── commands.py\n│   │   ├── debug_agent.py\n│   │   ├── __init__.py\n│   │   ├── README\n│   │   └── shell.py\n│   ├── extensions\n│   │   ├── agent.py\n│   │   ├── agentscheduler.py\n│   │   ├── extraroute.py\n│   │   ├── flavor.py\n│   │   ├── __init__.py\n│   │   ├── l3.py\n│   │   ├── loadbalancer.py\n│   │   ├── portbindings.py\n│   │   ├── portsecurity.py\n│   │   ├── providernet.py\n│   │   ├── quotasv2.py\n│   │   ├── routedserviceinsertion.py\n│   │   ├── routerservicetype.py\n│   │   ├── securitygroup.py\n│   │   └── servicetype.py\n│   ├── __init__.py\n│   ├── locale\n│   │   ├── ja\n│   │   │   └── LC_MESSAGES\n│   │   │       └── quantum.po\n│   │   └── quantum.pot\n│   ├── manager.py\n│   ├── openstack\n│   │   ├── common\n│   │   │   ├── context.py\n│   │   │   ├── eventlet_backdoor.py\n│   │   │   ├── exception.py\n│   │   │   ├── excutils.py\n│   │   │   ├── fileutils.py\n│   │   │   ├── gettextutils.py\n│   │   │   ├── importutils.py\n│   │   │   ├── __init__.py\n│   │   │   ├── jsonutils.py\n│   │   │   ├── local.py\n│   │   │   ├── lockutils.py\n│   │   │   ├── log.py\n│   │   │   ├── loopingcall.py\n│   │   │   ├── network_utils.py\n│   │   │   ├── notifier\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── log_notifier.py\n│   │   │   │   ├── no_op_notifier.py\n│   │   │   │   ├── rabbit_notifier.py\n│   │   │   │   ├── rpc_notifier2.py\n│   │   │   │   ├── rpc_notifier.py\n│   │   │   │   └── test_notifier.py\n│   │   │   ├── periodic_task.py\n│   │   │   ├── policy.py\n│   │   │   ├── processutils.py\n│   │   │   ├── rpc\n│   │   │   │   ├── amqp.py\n│   │   │   │   ├── common.py\n│   │   │   │   ├── dispatcher.py\n│   │   │   │   ├── impl_fake.py\n│   │   │   │   ├── impl_kombu.py\n│   │   │   │   ├── impl_qpid.py\n│   │   │   │   ├── impl_zmq.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── matchmaker.py\n│   │   │   │   ├── matchmaker_redis.py\n│   │   │   │   ├── proxy.py\n│   │   │   │   └── service.py\n│   │   │   ├── service.py\n│   │   │   ├── setup.py\n│   │   │   ├── threadgroup.py\n│   │   │   ├── timeutils.py\n│   │   │   ├── uuidutils.py\n│   │   │   └── version.py\n│   │   └── __init__.py\n│   ├── plugins\n│   │   ├── bigswitch\n│   │   │   ├── __init__.py\n│   │   │   ├── plugin.py\n│   │   │   ├── README\n│   │   │   ├── tests\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_server.py\n│   │   │   ├── vcsversion.py\n│   │   │   └── version.py\n│   │   ├── brocade\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nos\n│   │   │   │   ├── fake_nosdriver.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── nctemplates.py\n│   │   │   │   └── nosdriver.py\n│   │   │   ├── QuantumPlugin.py\n│   │   │   ├── README.md\n│   │   │   ├── tests\n│   │   │   │   ├── noscli.py\n│   │   │   │   ├── nostest.py\n│   │   │   │   └── README\n│   │   │   └── vlanbm.py\n│   │   ├── cisco\n│   │   │   ├── common\n│   │   │   │   ├── cisco_configparser.py\n│   │   │   │   ├── cisco_constants.py\n│   │   │   │   ├── cisco_credentials_v2.py\n│   │   │   │   ├── cisco_exceptions.py\n│   │   │   │   ├── cisco_faults.py\n│   │   │   │   ├── cisco_utils.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db.py\n│   │   │   │   ├── l2network_models.py\n│   │   │   │   ├── models.py\n│   │   │   │   ├── network_db_v2.py\n│   │   │   │   ├── network_models_v2.py\n│   │   │   │   ├── nexus_db_v2.py\n│   │   │   │   └── nexus_models_v2.py\n│   │   │   ├── extensions\n│   │   │   │   ├── credential.py\n│   │   │   │   ├── _credential_view.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── qos.py\n│   │   │   │   └── _qos_view.py\n│   │   │   ├── __init__.py\n│   │   │   ├── l2device_plugin_base.py\n│   │   │   ├── l2network_plugin_configuration.py\n│   │   │   ├── models\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── virt_phy_sw_v2.py\n│   │   │   ├── network_plugin.py\n│   │   │   ├── nexus\n│   │   │   │   ├── cisco_nexus_configuration.py\n│   │   │   │   ├── cisco_nexus_network_driver_v2.py\n│   │   │   │   ├── cisco_nexus_plugin_v2.py\n│   │   │   │   ├── cisco_nexus_snippets.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── README\n│   │   │   ├── run_tests.py\n│   │   │   └── tests\n│   │   │       ├── __init__.py\n│   │   │       └── unit\n│   │   │           ├── api-paste.ini.cisco.test\n│   │   │           ├── __init__.py\n│   │   │           ├── quantum.conf.cisco.test\n│   │   │           ├── test_cisco_extension.py\n│   │   │           ├── test_database.py\n│   │   │           └── v2\n│   │   │               ├── api-paste.ini.cisco.test\n│   │   │               ├── __init__.py\n│   │   │               ├── nexus\n│   │   │               │   ├── fake_nexus_driver.py\n│   │   │               │   └── __init__.py\n│   │   │               ├── quantumv2.conf.cisco.test\n│   │   │               └── test_api_v2.py\n│   │   ├── common\n│   │   │   ├── constants.py\n│   │   │   └── __init__.py\n│   │   ├── hyperv\n│   │   │   ├── agent\n│   │   │   │   ├── hyperv_quantum_agent.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── utils.py\n│   │   │   ├── agent_notifier_api.py\n│   │   │   ├── common\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db.py\n│   │   │   ├── hyperv_quantum_plugin.py\n│   │   │   ├── __init__.py\n│   │   │   ├── model.py\n│   │   │   └── rpc_callbacks.py\n│   │   ├── __init__.py\n│   │   ├── linuxbridge\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── linuxbridge_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db_v2.py\n│   │   │   │   └── l2network_models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── lb_quantum_plugin.py\n│   │   │   └── README\n│   │   ├── metaplugin\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── meta_db_v2.py\n│   │   │   ├── meta_models_v2.py\n│   │   │   ├── meta_quantum_plugin.py\n│   │   │   ├── proxy_quantum_plugin.py\n│   │   │   ├── README\n│   │   │   └── run_tests.py\n│   │   ├── midonet\n│   │   │   ├── config.py\n│   │   │   ├── __init__.py\n│   │   │   ├── midonet_lib.py\n│   │   │   └── plugin.py\n│   │   ├── nec\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── nec_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── exceptions.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ofc_client.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── models.py\n│   │   │   │   └── nec_plugin_base.py\n│   │   │   ├── drivers\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── pfc.py\n│   │   │   │   └── trema.py\n│   │   │   ├── extensions\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── packetfilter.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nec_plugin.py\n│   │   │   ├── ofc_driver_base.py\n│   │   │   ├── ofc_manager.py\n│   │   │   └── README\n│   │   ├── nicira\n│   │   │   ├── __init__.py\n│   │   │   └── nicira_nvp_plugin\n│   │   │       ├── api_client\n│   │   │       │   ├── client_eventlet.py\n│   │   │       │   ├── client.py\n│   │   │       │   ├── common.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── request_eventlet.py\n│   │   │       │   └── request.py\n│   │   │       ├── check_nvp_config.py\n│   │   │       ├── common\n│   │   │       │   ├── config.py\n│   │   │       │   ├── exceptions.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── metadata_access.py\n│   │   │       │   └── securitygroups.py\n│   │   │       ├── extensions\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── nvp_networkgw.py\n│   │   │       │   └── nvp_qos.py\n│   │   │       ├── __init__.py\n│   │   │       ├── nicira_db.py\n│   │   │       ├── nicira_models.py\n│   │   │       ├── nicira_networkgw_db.py\n│   │   │       ├── nicira_qos_db.py\n│   │   │       ├── NvpApiClient.py\n│   │   │       ├── nvp_cluster.py\n│   │   │       ├── nvplib.py\n│   │   │       ├── nvp_plugin_version.py\n│   │   │       ├── QuantumPlugin.py\n│   │   │       └── README\n│   │   ├── openvswitch\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── ovs_quantum_agent.py#agent主文件\n│   │   │   │   ├── ovs-quantum-agent-xs_xcp.spec\n│   │   │   │   └── xenserver_install.sh\n│   │   │   ├── common\n│   │   │   │   ├── config.py#ovs插件注册选项，用于读取配置文件\n│   │   │   │   ├── constants.py#一些常量\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── Makefile\n│   │   │   ├── ovs_db_v2.py\n│   │   │   ├── ovs_models_v2.py#数据库表定义与sqlalchemy的类的映射\n│   │   │   ├── ovs_quantum_plugin.py#插件部分主程序\n│   │   │   └── README\n│   │   ├── plumgrid\n│   │   │   ├── common\n│   │   │   │   ├── exceptions.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── plumgrid_nos_plugin\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── plugin_ver.py\n│   │   │   │   ├── plumgrid_nos_snippets.py\n│   │   │   │   ├── plumgrid_plugin.py\n│   │   │   │   └── rest_connection.py\n│   │   │   └── README\n│   │   ├── ryu\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ryu_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api_v2.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── README\n│   │   │   └── ryu_quantum_plugin.py\n│   │   └── services\n│   │       ├── agent_loadbalancer\n│   │       │   ├── agent\n│   │       │   │   ├── api.py\n│   │       │   │   ├── __init__.py\n│   │       │   │   └── manager.py\n│   │       │   ├── constants.py\n│   │       │   ├── drivers\n│   │       │   │   ├── haproxy\n│   │       │   │   │   ├── cfg.py\n│   │       │   │   │   ├── __init__.py\n│   │       │   │   │   └── namespace_driver.py\n│   │       │   │   └── __init__.py\n│   │       │   ├── __init__.py\n│   │       │   └── plugin.py\n│   │       ├── __init__.py\n│   │       └── service_base.py\n│   ├── policy.py\n│   ├── quantum_plugin_base_v2.py\n│   ├── quota.py\n│   ├── rootwrap\n│   │   ├── filters.py\n│   │   ├── __init__.py\n│   │   └── wrapper.py\n│   ├── scheduler\n│   │   ├── dhcp_agent_scheduler.py\n│   │   ├── __init__.py\n│   │   └── l3_agent_scheduler.py\n│   ├── server\n│   │   └── __init__.py\n│   ├── service.py\n│   ├── tests\n│   │   ├── base.py\n│   │   ├── etc\n│   │   │   ├── api-paste.ini.test\n│   │   │   ├── quantum.conf.test\n│   │   │   └── rootwrap.d\n│   │   │       └── quantum.test.filters\n│   │   ├── __init__.py\n│   │   ├── unit\n│   │   │   ├── bigswitch\n│   │   │   │   ├── etc\n│   │   │   │   │   └── restproxy.ini.test\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_restproxy_plugin.py\n│   │   │   │   └── test_router_db.py\n│   │   │   ├── brocade\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_brocade_db.py\n│   │   │   │   ├── test_brocade_plugin.py\n│   │   │   │   └── test_brocade_vlan.py\n│   │   │   ├── cisco\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_network_plugin.py\n│   │   │   │   └── test_nexus_plugin.py\n│   │   │   ├── database_stubs.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── loadbalancer\n│   │   │   │       ├── __init__.py\n│   │   │   │       └── test_db_loadbalancer.py\n│   │   │   ├── dummy_plugin.py\n│   │   │   ├── extensions\n│   │   │   │   ├── extendedattribute.py\n│   │   │   │   ├── extensionattribute.py\n│   │   │   │   ├── foxinsocks.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── v2attributes.py\n│   │   │   ├── extension_stubs.py\n│   │   │   ├── hyperv\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_hyperv_quantum_agent.py\n│   │   │   │   ├── test_hyperv_quantum_plugin.py\n│   │   │   │   └── test_hyperv_rpcapi.py\n│   │   │   ├── __init__.py\n│   │   │   ├── linuxbridge\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_lb_db.py\n│   │   │   │   ├── test_lb_quantum_agent.py\n│   │   │   │   ├── test_lb_security_group.py\n│   │   │   │   ├── test_linuxbridge_plugin.py\n│   │   │   │   └── test_rpcapi.py\n│   │   │   ├── metaplugin\n│   │   │   │   ├── fake_plugin.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_basic.py\n│   │   │   │   └── test_metaplugin.py\n│   │   │   ├── midonet\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_midonet_lib.py\n│   │   │   │   └── test_midonet_plugin.py\n│   │   │   ├── nec\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── stub_ofc_driver.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_config.py\n│   │   │   │   ├── test_db.py\n│   │   │   │   ├── test_nec_plugin.py\n│   │   │   │   ├── test_ofc_manager.py\n│   │   │   │   ├── test_pfc_driver.py\n│   │   │   │   ├── test_security_group.py\n│   │   │   │   └── test_trema_driver.py\n│   │   │   ├── nicira\n│   │   │   │   ├── etc\n│   │   │   │   │   ├── fake_get_gwservice.json\n│   │   │   │   │   ├── fake_get_lrouter.json\n│   │   │   │   │   ├── fake_get_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_get_lrouter_lport.json\n│   │   │   │   │   ├── fake_get_lrouter_nat.json\n│   │   │   │   │   ├── fake_get_lswitch.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_att.json\n│   │   │   │   │   ├── fake_get_lswitch_lport.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_status.json\n│   │   │   │   │   ├── fake_post_gwservice.json\n│   │   │   │   │   ├── fake_post_lqueue.json\n│   │   │   │   │   ├── fake_post_lrouter.json\n│   │   │   │   │   ├── fake_post_lrouter_lport.json\n│   │   │   │   │   ├── fake_post_lrouter_nat.json\n│   │   │   │   │   ├── fake_post_lswitch.json\n│   │   │   │   │   ├── fake_post_lswitch_lport.json\n│   │   │   │   │   ├── fake_post_security_profile.json\n│   │   │   │   │   ├── fake_put_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_put_lswitch_lport_att.json\n│   │   │   │   │   └── nvp.ini.test\n│   │   │   │   ├── fake_nvpapiclient.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_networkgw.py\n│   │   │   │   ├── test_nicira_plugin.py\n│   │   │   │   ├── test_nvp_api_common.py\n│   │   │   │   ├── test_nvp_api_request_eventlet.py\n│   │   │   │   ├── test_nvp_api_request.py\n│   │   │   │   └── test_nvplib.py\n│   │   │   ├── openvswitch\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_openvswitch_plugin.py\n│   │   │   │   ├── test_ovs_db.py\n│   │   │   │   ├── test_ovs_defaults.py\n│   │   │   │   ├── test_ovs_lib.py\n│   │   │   │   ├── test_ovs_quantum_agent.py\n│   │   │   │   ├── test_ovs_rpcapi.py\n│   │   │   │   ├── test_ovs_security_group.py\n│   │   │   │   └── test_ovs_tunnel.py\n│   │   │   ├── plumgrid\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_plumgrid_plugin.py\n│   │   │   ├── ryu\n│   │   │   │   ├── fake_ryu.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_ryu_agent.py\n│   │   │   │   ├── test_ryu_db.py\n│   │   │   │   ├── test_ryu_plugin.py\n│   │   │   │   └── test_ryu_security_group.py\n│   │   │   ├── services\n│   │   │   │   ├── agent_loadbalancer\n│   │   │   │   │   ├── agent\n│   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   ├── test_api.py\n│   │   │   │   │   │   ├── test_init.py\n│   │   │   │   │   │   └── test_manager.py\n│   │   │   │   │   ├── driver\n│   │   │   │   │   │   ├── haproxy\n│   │   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   │   ├── test_cfg.py\n│   │   │   │   │   │   │   └── test_namespace_driver.py\n│   │   │   │   │   │   └── __init__.py\n│   │   │   │   │   ├── __init__.py\n│   │   │   │   │   └── test_plugin.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── test_agent_config.py\n│   │   │   ├── test_agent_ext_plugin.py\n│   │   │   ├── test_agent_linux_utils.py\n│   │   │   ├── test_agent_netns_cleanup.py\n│   │   │   ├── test_agent_ovs_cleanup.py\n│   │   │   ├── test_agent_rpc.py\n│   │   │   ├── test_api_api_common.py\n│   │   │   ├── test_api_v2.py\n│   │   │   ├── test_api_v2_resource.py\n│   │   │   ├── test_attributes.py\n│   │   │   ├── test_auth.py\n│   │   │   ├── test_common_utils.py\n│   │   │   ├── test_config.py\n│   │   │   ├── test_db_migration.py\n│   │   │   ├── test_db_plugin.py\n│   │   │   ├── test_db.py\n│   │   │   ├── test_db_rpc_base.py\n│   │   │   ├── test_debug_commands.py\n│   │   │   ├── test_dhcp_agent.py\n│   │   │   ├── test_extension_extended_attribute.py\n│   │   │   ├── test_extension_extraroute.py\n│   │   │   ├── _test_extension_portbindings.py\n│   │   │   ├── test_extension_portsecurity.py\n│   │   │   ├── test_extension_security_group.py\n│   │   │   ├── test_extensions.py\n│   │   │   ├── test_iptables_firewall.py\n│   │   │   ├── test_iptables_manager.py\n│   │   │   ├── test_l3_agent.py\n│   │   │   ├── test_l3_plugin.py\n│   │   │   ├── testlib_api.py\n│   │   │   ├── test_linux_daemon.py\n│   │   │   ├── test_linux_dhcp.py\n│   │   │   ├── test_linux_external_process.py\n│   │   │   ├── test_linux_interface.py\n│   │   │   ├── test_linux_ip_lib.py\n│   │   │   ├── test_loadbalancer_plugin.py\n│   │   │   ├── test_metadata_agent.py\n│   │   │   ├── test_metadata_namespace_proxy.py\n│   │   │   ├── test_policy.py\n│   │   │   ├── test_quantum_context.py\n│   │   │   ├── test_quantum_manager.py\n│   │   │   ├── test_quota_ext.py\n│   │   │   ├── _test_rootwrap_exec.py\n│   │   │   ├── test_rootwrap.py\n│   │   │   ├── test_routerserviceinsertion.py\n│   │   │   ├── test_security_groups_rpc.py\n│   │   │   ├── test_servicetype.py\n│   │   │   └── test_wsgi.py\n│   │   └── var\n│   │       ├── ca.crt\n│   │       ├── certificate.crt\n│   │       └── privatekey.key\n│   ├── version.py\n│   └── wsgi.py\n├── README\n├── run_tests.py\n├── run_tests.sh\n├── setup.cfg\n├── setup.py\n├── TESTING\n├── tools\n│   ├── build_debs.sh\n│   ├── check_i18n.py\n│   ├── check_i18n_test_case.txt\n│   ├── clean.sh\n│   ├── i18n_cfg.py\n│   ├── install_venv_common.py\n│   ├── install_venv.py\n│   ├── patch_tox_venv.py\n│   ├── pip-requires\n│   ├── test-requires\n│   └── with_venv.sh\n└── tox.ini\n</code></pre>\n','Quantum源码树','','draft','open','open','','quantum-code-tree-analyse','','','2013-04-28 15:37:39','2013-04-28 07:37:39','','0','http://blog.wachang.net/?p=287','0','post','','0');");
E_D("replace into `wp_posts` values('288','1','2013-04-01 17:03:50','2013-04-01 09:03:50','<p>以下是我git clone的Quantum的源代码，我简单做一下注释。</p>\n\n<pre><code>root@Compute2:~/quantum# tree\n.\n├── bin #各个组件的启动脚本\n│   ├── quantum-check-nvp-config\n│   ├── quantum-db-manage\n│   ├── quantum-debug\n│   ├── quantum-dhcp-agent\n│   ├── quantum-dhcp-agent-dnsmasq-lease-update\n│   ├── quantum-hyperv-agent\n│   ├── quantum-l3-agent\n│   ├── quantum-lbaas-agent\n│   ├── quantum-linuxbridge-agent\n│   ├── quantum-metadata-agent\n│   ├── quantum-nec-agent\n│   ├── quantum-netns-cleanup\n│   ├── quantum-ns-metadata-proxy\n│   ├── quantum-openvswitch-agent\n│   ├── quantum-ovs-cleanup\n│   ├── quantum-rootwrap\n│   ├── quantum-rpc-zmq-receiver\n│   ├── quantum-ryu-agent\n│   ├── quantum-server\n│   └── quantum-usage-audit\n├── contrib\n│   └── redhat-eventlet.patch\n├── doc#文档目录，已删除，可以用sphix编译\n├── etc#这是Quantum中所有的配置文件例子\n│   ├── api-paste.ini #配置WSGI应用，用于REST API处理\n│   ├── dhcp_agent.ini\n│   ├── init.d\n│   │   └── quantum-server\n│   ├── l3_agent.ini\n│   ├── lbaas_agent.ini\n│   ├── metadata_agent.ini\n│   ├── policy.json\n│   ├── quantum\n│   │   ├── plugins\n│   │   │   ├── bigswitch\n│   │   │   │   └── restproxy.ini\n│   │   │   ├── brocade\n│   │   │   │   └── brocade.ini\n│   │   │   ├── cisco\n│   │   │   │   ├── cisco_plugins.ini\n│   │   │   │   ├── credentials.ini\n│   │   │   │   ├── db_conn.ini\n│   │   │   │   ├── l2network_plugin.ini\n│   │   │   │   └── nexus.ini\n│   │   │   ├── hyperv\n│   │   │   │   └── hyperv_quantum_plugin.ini\n│   │   │   ├── linuxbridge\n│   │   │   │   └── linuxbridge_conf.ini\n│   │   │   ├── metaplugin\n│   │   │   │   └── metaplugin.ini\n│   │   │   ├── midonet\n│   │   │   │   └── midonet.ini\n│   │   │   ├── nec\n│   │   │   │   └── nec.ini\n│   │   │   ├── nicira\n│   │   │   │   └── nvp.ini\n│   │   │   ├── openvswitch\n│   │   │   │   └── ovs_quantum_plugin.ini\n│   │   │   ├── plumgrid\n│   │   │   │   └── plumgrid.ini\n│   │   │   └── ryu\n│   │   │       └── ryu.ini\n│   │   └── rootwrap.d\n│   │       ├── debug.filters\n│   │       ├── dhcp.filters\n│   │       ├── iptables-firewall.filters\n│   │       ├── l3.filters\n│   │       ├── lbaas-haproxy.filters\n│   │       ├── linuxbridge-plugin.filters\n│   │       ├── nec-plugin.filters\n│   │       ├── openvswitch-plugin.filters\n│   │       └── ryu-plugin.filters\n│   ├── quantum.conf\n│   └── rootwrap.conf\n├── HACKING.rst\n├── LICENSE\n├── MANIFEST.in\n├── openstack-common.conf\n├── quantum\n│   ├── agent\n│   │   ├── common\n│   │   │   ├── config.py\n│   │   │   └── __init__.py\n│   │   ├── dhcp_agent.py\n│   │   ├── firewall.py\n│   │   ├── __init__.py\n│   │   ├── l3_agent.py\n│   │   ├── linux\n│   │   │   ├── daemon.py\n│   │   │   ├── dhcp.py\n│   │   │   ├── external_process.py\n│   │   │   ├── __init__.py\n│   │   │   ├── interface.py\n│   │   │   ├── ip_lib.py\n│   │   │   ├── iptables_firewall.py\n│   │   │   ├── iptables_manager.py\n│   │   │   ├── ovs_lib.py\n│   │   │   └── utils.py\n│   │   ├── metadata\n│   │   │   ├── agent.py\n│   │   │   ├── __init__.py\n│   │   │   └── namespace_proxy.py\n│   │   ├── netns_cleanup_util.py\n│   │   ├── ovs_cleanup_util.py\n│   │   ├── rpc.py\n│   │   └── securitygroups_rpc.py\n│   ├── api\n│   │   ├── api_common.py\n│   │   ├── extensions.py\n│   │   ├── __init__.py\n│   │   ├── rpc\n│   │   │   ├── agentnotifiers\n│   │   │   │   ├── dhcp_rpc_agent_api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── l3_rpc_agent_api.py\n│   │   │   └── __init__.py\n│   │   ├── v2\n│   │   │   ├── attributes.py\n│   │   │   ├── base.py\n│   │   │   ├── __init__.py\n│   │   │   ├── resource.py\n│   │   │   └── router.py\n│   │   ├── versions.py\n│   │   └── views\n│   │       ├── __init__.py\n│   │       └── versions.py\n│   ├── auth.py\n│   ├── common\n│   │   ├── config.py\n│   │   ├── constants.py\n│   │   ├── exceptions.py\n│   │   ├── __init__.py\n│   │   ├── rpc.py\n│   │   ├── test_lib.py\n│   │   ├── topics.py\n│   │   └── utils.py\n│   ├── context.py\n│   ├── db\n│   │   ├── agentschedulers_db.py\n│   │   ├── agents_db.py\n│   │   ├── api.py\n│   │   ├── db_base_plugin_v2.py\n│   │   ├── dhcp_rpc_base.py\n│   │   ├── extraroute_db.py\n│   │   ├── __init__.py\n│   │   ├── l3_db.py\n│   │   ├── l3_rpc_base.py\n│   │   ├── loadbalancer\n│   │   │   ├── __init__.py\n│   │   │   └── loadbalancer_db.py\n│   │   ├── migration\n│   │   │   ├── alembic.ini\n│   │   │   ├── alembic_migrations\n│   │   │   │   ├── common_ext_ops.py\n│   │   │   │   ├── env.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── script.py.mako\n│   │   │   │   └── versions\n│   │   │   │       ├── 1149d7de0cfa_port_security.py\n│   │   │   │       ├── 1341ed32cc1e_nvp_netbinding_update.py\n│   │   │   │       ├── 1b693c095aa3_quota_ext_db_grizzly.py\n│   │   │   │       ├── 1c33fa3cd1a1_extra_route_config.py\n│   │   │   │       ├── 1d76643bcec4_nvp_netbinding.py\n│   │   │   │       ├── 2a6d0b51f4bb_cisco_plugin_cleanup.py\n│   │   │   │       ├── 2c4af419145b_l3_support.py\n│   │   │   │       ├── 363468ac592c_nvp_network_gw.py\n│   │   │   │       ├── 38335592a0dc_nvp_portmap.py\n│   │   │   │       ├── 3b54bf9e29f7_nec_plugin_sharednet.py\n│   │   │   │       ├── 3cb5d900c5de_security_groups.py\n│   │   │   │       ├── 45680af419f9_nvp_qos.py\n│   │   │   │       ├── 4692d074d587_agent_scheduler.py\n│   │   │   │       ├── 48b6f43f7471_service_type.py\n│   │   │   │       ├── 49332180ca96_ryu_plugin_update.py\n│   │   │   │       ├── 511471cc46b_agent_ext_model_supp.py\n│   │   │   │       ├── 54c2c487e913_lbaas.py\n│   │   │   │       ├── 5a875d0e5c_ryu.py\n│   │   │   │       ├── folsom_initial.py\n│   │   │   │       ├── grizzly_release.py\n│   │   │   │       └── README\n│   │   │   ├── cli.py\n│   │   │   ├── __init__.py\n│   │   │   └── README\n│   │   ├── model_base.py\n│   │   ├── models_v2.py\n│   │   ├── portsecurity_db.py\n│   │   ├── quota_db.py\n│   │   ├── routedserviceinsertion_db.py\n│   │   ├── routerservicetype_db.py\n│   │   ├── securitygroups_db.py\n│   │   ├── securitygroups_rpc_base.py\n│   │   ├── servicetype_db.py\n│   │   └── sqlalchemyutils.py\n│   ├── debug\n│   │   ├── commands.py\n│   │   ├── debug_agent.py\n│   │   ├── __init__.py\n│   │   ├── README\n│   │   └── shell.py\n│   ├── extensions\n│   │   ├── agent.py\n│   │   ├── agentscheduler.py\n│   │   ├── extraroute.py\n│   │   ├── flavor.py\n│   │   ├── __init__.py\n│   │   ├── l3.py\n│   │   ├── loadbalancer.py\n│   │   ├── portbindings.py\n│   │   ├── portsecurity.py\n│   │   ├── providernet.py\n│   │   ├── quotasv2.py\n│   │   ├── routedserviceinsertion.py\n│   │   ├── routerservicetype.py\n│   │   ├── securitygroup.py\n│   │   └── servicetype.py\n│   ├── __init__.py\n│   ├── locale\n│   │   ├── ja\n│   │   │   └── LC_MESSAGES\n│   │   │       └── quantum.po\n│   │   └── quantum.pot\n│   ├── manager.py\n│   ├── openstack\n│   │   ├── common\n│   │   │   ├── context.py\n│   │   │   ├── eventlet_backdoor.py\n│   │   │   ├── exception.py\n│   │   │   ├── excutils.py\n│   │   │   ├── fileutils.py\n│   │   │   ├── gettextutils.py\n│   │   │   ├── importutils.py\n│   │   │   ├── __init__.py\n│   │   │   ├── jsonutils.py\n│   │   │   ├── local.py\n│   │   │   ├── lockutils.py\n│   │   │   ├── log.py\n│   │   │   ├── loopingcall.py\n│   │   │   ├── network_utils.py\n│   │   │   ├── notifier\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── log_notifier.py\n│   │   │   │   ├── no_op_notifier.py\n│   │   │   │   ├── rabbit_notifier.py\n│   │   │   │   ├── rpc_notifier2.py\n│   │   │   │   ├── rpc_notifier.py\n│   │   │   │   └── test_notifier.py\n│   │   │   ├── periodic_task.py\n│   │   │   ├── policy.py\n│   │   │   ├── processutils.py\n│   │   │   ├── rpc\n│   │   │   │   ├── amqp.py\n│   │   │   │   ├── common.py\n│   │   │   │   ├── dispatcher.py\n│   │   │   │   ├── impl_fake.py\n│   │   │   │   ├── impl_kombu.py\n│   │   │   │   ├── impl_qpid.py\n│   │   │   │   ├── impl_zmq.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── matchmaker.py\n│   │   │   │   ├── matchmaker_redis.py\n│   │   │   │   ├── proxy.py\n│   │   │   │   └── service.py\n│   │   │   ├── service.py\n│   │   │   ├── setup.py\n│   │   │   ├── threadgroup.py\n│   │   │   ├── timeutils.py\n│   │   │   ├── uuidutils.py\n│   │   │   └── version.py\n│   │   └── __init__.py\n│   ├── plugins\n│   │   ├── bigswitch\n│   │   │   ├── __init__.py\n│   │   │   ├── plugin.py\n│   │   │   ├── README\n│   │   │   ├── tests\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_server.py\n│   │   │   ├── vcsversion.py\n│   │   │   └── version.py\n│   │   ├── brocade\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nos\n│   │   │   │   ├── fake_nosdriver.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── nctemplates.py\n│   │   │   │   └── nosdriver.py\n│   │   │   ├── QuantumPlugin.py\n│   │   │   ├── README.md\n│   │   │   ├── tests\n│   │   │   │   ├── noscli.py\n│   │   │   │   ├── nostest.py\n│   │   │   │   └── README\n│   │   │   └── vlanbm.py\n│   │   ├── cisco\n│   │   │   ├── common\n│   │   │   │   ├── cisco_configparser.py\n│   │   │   │   ├── cisco_constants.py\n│   │   │   │   ├── cisco_credentials_v2.py\n│   │   │   │   ├── cisco_exceptions.py\n│   │   │   │   ├── cisco_faults.py\n│   │   │   │   ├── cisco_utils.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db.py\n│   │   │   │   ├── l2network_models.py\n│   │   │   │   ├── models.py\n│   │   │   │   ├── network_db_v2.py\n│   │   │   │   ├── network_models_v2.py\n│   │   │   │   ├── nexus_db_v2.py\n│   │   │   │   └── nexus_models_v2.py\n│   │   │   ├── extensions\n│   │   │   │   ├── credential.py\n│   │   │   │   ├── _credential_view.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── qos.py\n│   │   │   │   └── _qos_view.py\n│   │   │   ├── __init__.py\n│   │   │   ├── l2device_plugin_base.py\n│   │   │   ├── l2network_plugin_configuration.py\n│   │   │   ├── models\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── virt_phy_sw_v2.py\n│   │   │   ├── network_plugin.py\n│   │   │   ├── nexus\n│   │   │   │   ├── cisco_nexus_configuration.py\n│   │   │   │   ├── cisco_nexus_network_driver_v2.py\n│   │   │   │   ├── cisco_nexus_plugin_v2.py\n│   │   │   │   ├── cisco_nexus_snippets.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── README\n│   │   │   ├── run_tests.py\n│   │   │   └── tests\n│   │   │       ├── __init__.py\n│   │   │       └── unit\n│   │   │           ├── api-paste.ini.cisco.test\n│   │   │           ├── __init__.py\n│   │   │           ├── quantum.conf.cisco.test\n│   │   │           ├── test_cisco_extension.py\n│   │   │           ├── test_database.py\n│   │   │           └── v2\n│   │   │               ├── api-paste.ini.cisco.test\n│   │   │               ├── __init__.py\n│   │   │               ├── nexus\n│   │   │               │   ├── fake_nexus_driver.py\n│   │   │               │   └── __init__.py\n│   │   │               ├── quantumv2.conf.cisco.test\n│   │   │               └── test_api_v2.py\n│   │   ├── common\n│   │   │   ├── constants.py\n│   │   │   └── __init__.py\n│   │   ├── hyperv\n│   │   │   ├── agent\n│   │   │   │   ├── hyperv_quantum_agent.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── utils.py\n│   │   │   ├── agent_notifier_api.py\n│   │   │   ├── common\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db.py\n│   │   │   ├── hyperv_quantum_plugin.py\n│   │   │   ├── __init__.py\n│   │   │   ├── model.py\n│   │   │   └── rpc_callbacks.py\n│   │   ├── __init__.py\n│   │   ├── linuxbridge\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── linuxbridge_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db_v2.py\n│   │   │   │   └── l2network_models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── lb_quantum_plugin.py\n│   │   │   └── README\n│   │   ├── metaplugin\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── meta_db_v2.py\n│   │   │   ├── meta_models_v2.py\n│   │   │   ├── meta_quantum_plugin.py\n│   │   │   ├── proxy_quantum_plugin.py\n│   │   │   ├── README\n│   │   │   └── run_tests.py\n│   │   ├── midonet\n│   │   │   ├── config.py\n│   │   │   ├── __init__.py\n│   │   │   ├── midonet_lib.py\n│   │   │   └── plugin.py\n│   │   ├── nec\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── nec_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── exceptions.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ofc_client.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── models.py\n│   │   │   │   └── nec_plugin_base.py\n│   │   │   ├── drivers\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── pfc.py\n│   │   │   │   └── trema.py\n│   │   │   ├── extensions\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── packetfilter.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nec_plugin.py\n│   │   │   ├── ofc_driver_base.py\n│   │   │   ├── ofc_manager.py\n│   │   │   └── README\n│   │   ├── nicira\n│   │   │   ├── __init__.py\n│   │   │   └── nicira_nvp_plugin\n│   │   │       ├── api_client\n│   │   │       │   ├── client_eventlet.py\n│   │   │       │   ├── client.py\n│   │   │       │   ├── common.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── request_eventlet.py\n│   │   │       │   └── request.py\n│   │   │       ├── check_nvp_config.py\n│   │   │       ├── common\n│   │   │       │   ├── config.py\n│   │   │       │   ├── exceptions.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── metadata_access.py\n│   │   │       │   └── securitygroups.py\n│   │   │       ├── extensions\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── nvp_networkgw.py\n│   │   │       │   └── nvp_qos.py\n│   │   │       ├── __init__.py\n│   │   │       ├── nicira_db.py\n│   │   │       ├── nicira_models.py\n│   │   │       ├── nicira_networkgw_db.py\n│   │   │       ├── nicira_qos_db.py\n│   │   │       ├── NvpApiClient.py\n│   │   │       ├── nvp_cluster.py\n│   │   │       ├── nvplib.py\n│   │   │       ├── nvp_plugin_version.py\n│   │   │       ├── QuantumPlugin.py\n│   │   │       └── README\n│   │   ├── openvswitch\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── ovs_quantum_agent.py\n│   │   │   │   ├── ovs-quantum-agent-xs_xcp.spec\n│   │   │   │   └── xenserver_install.sh\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── Makefile\n│   │   │   ├── ovs_db_v2.py\n│   │   │   ├── ovs_models_v2.py\n│   │   │   ├── ovs_quantum_plugin.py\n│   │   │   └── README\n│   │   ├── plumgrid\n│   │   │   ├── common\n│   │   │   │   ├── exceptions.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── plumgrid_nos_plugin\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── plugin_ver.py\n│   │   │   │   ├── plumgrid_nos_snippets.py\n│   │   │   │   ├── plumgrid_plugin.py\n│   │   │   │   └── rest_connection.py\n│   │   │   └── README\n│   │   ├── ryu\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ryu_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api_v2.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── README\n│   │   │   └── ryu_quantum_plugin.py\n│   │   └── services\n│   │       ├── agent_loadbalancer\n│   │       │   ├── agent\n│   │       │   │   ├── api.py\n│   │       │   │   ├── __init__.py\n│   │       │   │   └── manager.py\n│   │       │   ├── constants.py\n│   │       │   ├── drivers\n│   │       │   │   ├── haproxy\n│   │       │   │   │   ├── cfg.py\n│   │       │   │   │   ├── __init__.py\n│   │       │   │   │   └── namespace_driver.py\n│   │       │   │   └── __init__.py\n│   │       │   ├── __init__.py\n│   │       │   └── plugin.py\n│   │       ├── __init__.py\n│   │       └── service_base.py\n│   ├── policy.py\n│   ├── quantum_plugin_base_v2.py\n│   ├── quota.py\n│   ├── rootwrap\n│   │   ├── filters.py\n│   │   ├── __init__.py\n│   │   └── wrapper.py\n│   ├── scheduler\n│   │   ├── dhcp_agent_scheduler.py\n│   │   ├── __init__.py\n│   │   └── l3_agent_scheduler.py\n│   ├── server\n│   │   └── __init__.py\n│   ├── service.py\n│   ├── tests\n│   │   ├── base.py\n│   │   ├── etc\n│   │   │   ├── api-paste.ini.test\n│   │   │   ├── quantum.conf.test\n│   │   │   └── rootwrap.d\n│   │   │       └── quantum.test.filters\n│   │   ├── __init__.py\n│   │   ├── unit\n│   │   │   ├── bigswitch\n│   │   │   │   ├── etc\n│   │   │   │   │   └── restproxy.ini.test\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_restproxy_plugin.py\n│   │   │   │   └── test_router_db.py\n│   │   │   ├── brocade\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_brocade_db.py\n│   │   │   │   ├── test_brocade_plugin.py\n│   │   │   │   └── test_brocade_vlan.py\n│   │   │   ├── cisco\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_network_plugin.py\n│   │   │   │   └── test_nexus_plugin.py\n│   │   │   ├── database_stubs.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── loadbalancer\n│   │   │   │       ├── __init__.py\n│   │   │   │       └── test_db_loadbalancer.py\n│   │   │   ├── dummy_plugin.py\n│   │   │   ├── extensions\n│   │   │   │   ├── extendedattribute.py\n│   │   │   │   ├── extensionattribute.py\n│   │   │   │   ├── foxinsocks.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── v2attributes.py\n│   │   │   ├── extension_stubs.py\n│   │   │   ├── hyperv\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_hyperv_quantum_agent.py\n│   │   │   │   ├── test_hyperv_quantum_plugin.py\n│   │   │   │   └── test_hyperv_rpcapi.py\n│   │   │   ├── __init__.py\n│   │   │   ├── linuxbridge\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_lb_db.py\n│   │   │   │   ├── test_lb_quantum_agent.py\n│   │   │   │   ├── test_lb_security_group.py\n│   │   │   │   ├── test_linuxbridge_plugin.py\n│   │   │   │   └── test_rpcapi.py\n│   │   │   ├── metaplugin\n│   │   │   │   ├── fake_plugin.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_basic.py\n│   │   │   │   └── test_metaplugin.py\n│   │   │   ├── midonet\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_midonet_lib.py\n│   │   │   │   └── test_midonet_plugin.py\n│   │   │   ├── nec\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── stub_ofc_driver.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_config.py\n│   │   │   │   ├── test_db.py\n│   │   │   │   ├── test_nec_plugin.py\n│   │   │   │   ├── test_ofc_manager.py\n│   │   │   │   ├── test_pfc_driver.py\n│   │   │   │   ├── test_security_group.py\n│   │   │   │   └── test_trema_driver.py\n│   │   │   ├── nicira\n│   │   │   │   ├── etc\n│   │   │   │   │   ├── fake_get_gwservice.json\n│   │   │   │   │   ├── fake_get_lrouter.json\n│   │   │   │   │   ├── fake_get_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_get_lrouter_lport.json\n│   │   │   │   │   ├── fake_get_lrouter_nat.json\n│   │   │   │   │   ├── fake_get_lswitch.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_att.json\n│   │   │   │   │   ├── fake_get_lswitch_lport.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_status.json\n│   │   │   │   │   ├── fake_post_gwservice.json\n│   │   │   │   │   ├── fake_post_lqueue.json\n│   │   │   │   │   ├── fake_post_lrouter.json\n│   │   │   │   │   ├── fake_post_lrouter_lport.json\n│   │   │   │   │   ├── fake_post_lrouter_nat.json\n│   │   │   │   │   ├── fake_post_lswitch.json\n│   │   │   │   │   ├── fake_post_lswitch_lport.json\n│   │   │   │   │   ├── fake_post_security_profile.json\n│   │   │   │   │   ├── fake_put_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_put_lswitch_lport_att.json\n│   │   │   │   │   └── nvp.ini.test\n│   │   │   │   ├── fake_nvpapiclient.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_networkgw.py\n│   │   │   │   ├── test_nicira_plugin.py\n│   │   │   │   ├── test_nvp_api_common.py\n│   │   │   │   ├── test_nvp_api_request_eventlet.py\n│   │   │   │   ├── test_nvp_api_request.py\n│   │   │   │   └── test_nvplib.py\n│   │   │   ├── openvswitch\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_openvswitch_plugin.py\n│   │   │   │   ├── test_ovs_db.py\n│   │   │   │   ├── test_ovs_defaults.py\n│   │   │   │   ├── test_ovs_lib.py\n│   │   │   │   ├── test_ovs_quantum_agent.py\n│   │   │   │   ├── test_ovs_rpcapi.py\n│   │   │   │   ├── test_ovs_security_group.py\n│   │   │   │   └── test_ovs_tunnel.py\n│   │   │   ├── plumgrid\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_plumgrid_plugin.py\n│   │   │   ├── ryu\n│   │   │   │   ├── fake_ryu.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_ryu_agent.py\n│   │   │   │   ├── test_ryu_db.py\n│   │   │   │   ├── test_ryu_plugin.py\n│   │   │   │   └── test_ryu_security_group.py\n│   │   │   ├── services\n│   │   │   │   ├── agent_loadbalancer\n│   │   │   │   │   ├── agent\n│   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   ├── test_api.py\n│   │   │   │   │   │   ├── test_init.py\n│   │   │   │   │   │   └── test_manager.py\n│   │   │   │   │   ├── driver\n│   │   │   │   │   │   ├── haproxy\n│   │   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   │   ├── test_cfg.py\n│   │   │   │   │   │   │   └── test_namespace_driver.py\n│   │   │   │   │   │   └── __init__.py\n│   │   │   │   │   ├── __init__.py\n│   │   │   │   │   └── test_plugin.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── test_agent_config.py\n│   │   │   ├── test_agent_ext_plugin.py\n│   │   │   ├── test_agent_linux_utils.py\n│   │   │   ├── test_agent_netns_cleanup.py\n│   │   │   ├── test_agent_ovs_cleanup.py\n│   │   │   ├── test_agent_rpc.py\n│   │   │   ├── test_api_api_common.py\n│   │   │   ├── test_api_v2.py\n│   │   │   ├── test_api_v2_resource.py\n│   │   │   ├── test_attributes.py\n│   │   │   ├── test_auth.py\n│   │   │   ├── test_common_utils.py\n│   │   │   ├── test_config.py\n│   │   │   ├── test_db_migration.py\n│   │   │   ├── test_db_plugin.py\n│   │   │   ├── test_db.py\n│   │   │   ├── test_db_rpc_base.py\n│   │   │   ├── test_debug_commands.py\n│   │   │   ├── test_dhcp_agent.py\n│   │   │   ├── test_extension_extended_attribute.py\n│   │   │   ├── test_extension_extraroute.py\n│   │   │   ├── _test_extension_portbindings.py\n│   │   │   ├── test_extension_portsecurity.py\n│   │   │   ├── test_extension_security_group.py\n│   │   │   ├── test_extensions.py\n│   │   │   ├── test_iptables_firewall.py\n│   │   │   ├── test_iptables_manager.py\n│   │   │   ├── test_l3_agent.py\n│   │   │   ├── test_l3_plugin.py\n│   │   │   ├── testlib_api.py\n│   │   │   ├── test_linux_daemon.py\n│   │   │   ├── test_linux_dhcp.py\n│   │   │   ├── test_linux_external_process.py\n│   │   │   ├── test_linux_interface.py\n│   │   │   ├── test_linux_ip_lib.py\n│   │   │   ├── test_loadbalancer_plugin.py\n│   │   │   ├── test_metadata_agent.py\n│   │   │   ├── test_metadata_namespace_proxy.py\n│   │   │   ├── test_policy.py\n│   │   │   ├── test_quantum_context.py\n│   │   │   ├── test_quantum_manager.py\n│   │   │   ├── test_quota_ext.py\n│   │   │   ├── _test_rootwrap_exec.py\n│   │   │   ├── test_rootwrap.py\n│   │   │   ├── test_routerserviceinsertion.py\n│   │   │   ├── test_security_groups_rpc.py\n│   │   │   ├── test_servicetype.py\n│   │   │   └── test_wsgi.py\n│   │   └── var\n│   │       ├── ca.crt\n│   │       ├── certificate.crt\n│   │       └── privatekey.key\n│   ├── version.py\n│   └── wsgi.py\n├── README\n├── run_tests.py\n├── run_tests.sh\n├── setup.cfg\n├── setup.py\n├── TESTING\n├── tools\n│   ├── build_debs.sh\n│   ├── check_i18n.py\n│   ├── check_i18n_test_case.txt\n│   ├── clean.sh\n│   ├── i18n_cfg.py\n│   ├── install_venv_common.py\n│   ├── install_venv.py\n│   ├── patch_tox_venv.py\n│   ├── pip-requires\n│   ├── test-requires\n│   └── with_venv.sh\n└── tox.ini\n</code></pre>\n','','','inherit','open','open','','287-revision','','','2013-04-01 17:03:50','2013-04-01 09:03:50','','287','http://blog.wachang.net/2013/04/287-revision/','0','revision','','0');");
E_D("replace into `wp_posts` values('289','1','2013-04-01 17:03:57','2013-04-01 09:03:57','<p>以下是我git clone的Quantum的源代码，我简单做一下注释。</p>\n\n<pre><code>root@Compute2:~/quantum# tree\n.\n├── bin #各个组件的启动脚本\n│   ├── quantum-check-nvp-config\n│   ├── quantum-db-manage\n│   ├── quantum-debug\n│   ├── quantum-dhcp-agent\n│   ├── quantum-dhcp-agent-dnsmasq-lease-update\n│   ├── quantum-hyperv-agent\n│   ├── quantum-l3-agent\n│   ├── quantum-lbaas-agent\n│   ├── quantum-linuxbridge-agent\n│   ├── quantum-metadata-agent\n│   ├── quantum-nec-agent\n│   ├── quantum-netns-cleanup\n│   ├── quantum-ns-metadata-proxy\n│   ├── quantum-openvswitch-agent\n│   ├── quantum-ovs-cleanup\n│   ├── quantum-rootwrap\n│   ├── quantum-rpc-zmq-receiver\n│   ├── quantum-ryu-agent\n│   ├── quantum-server\n│   └── quantum-usage-audit\n├── contrib\n│   └── redhat-eventlet.patch\n├── doc#文档目录，已删除，可以用sphix编译\n├── etc#这是Quantum中所有的配置文件例子\n│   ├── api-paste.ini #配置WSGI应用，用于REST API处理\n│   ├── dhcp_agent.ini\n│   ├── init.d\n│   │   └── quantum-server\n│   ├── l3_agent.ini\n│   ├── lbaas_agent.ini\n│   ├── metadata_agent.ini\n│   ├── policy.json\n│   ├── quantum\n│   │   ├── plugins\n│   │   │   ├── bigswitch\n│   │   │   │   └── restproxy.ini\n│   │   │   ├── brocade\n│   │   │   │   └── brocade.ini\n│   │   │   ├── cisco\n│   │   │   │   ├── cisco_plugins.ini\n│   │   │   │   ├── credentials.ini\n│   │   │   │   ├── db_conn.ini\n│   │   │   │   ├── l2network_plugin.ini\n│   │   │   │   └── nexus.ini\n│   │   │   ├── hyperv\n│   │   │   │   └── hyperv_quantum_plugin.ini\n│   │   │   ├── linuxbridge\n│   │   │   │   └── linuxbridge_conf.ini\n│   │   │   ├── metaplugin\n│   │   │   │   └── metaplugin.ini\n│   │   │   ├── midonet\n│   │   │   │   └── midonet.ini\n│   │   │   ├── nec\n│   │   │   │   └── nec.ini\n│   │   │   ├── nicira\n│   │   │   │   └── nvp.ini\n│   │   │   ├── openvswitch\n│   │   │   │   └── ovs_quantum_plugin.ini\n│   │   │   ├── plumgrid\n│   │   │   │   └── plumgrid.ini\n│   │   │   └── ryu\n│   │   │       └── ryu.ini\n│   │   └── rootwrap.d\n│   │       ├── debug.filters\n│   │       ├── dhcp.filters\n│   │       ├── iptables-firewall.filters\n│   │       ├── l3.filters\n│   │       ├── lbaas-haproxy.filters\n│   │       ├── linuxbridge-plugin.filters\n│   │       ├── nec-plugin.filters\n│   │       ├── openvswitch-plugin.filters\n│   │       └── ryu-plugin.filters\n│   ├── quantum.conf\n│   └── rootwrap.conf\n├── HACKING.rst\n├── LICENSE\n├── MANIFEST.in\n├── openstack-common.conf\n├── quantum\n│   ├── agent\n│   │   ├── common\n│   │   │   ├── config.py\n│   │   │   └── __init__.py\n│   │   ├── dhcp_agent.py\n│   │   ├── firewall.py\n│   │   ├── __init__.py\n│   │   ├── l3_agent.py\n│   │   ├── linux\n│   │   │   ├── daemon.py\n│   │   │   ├── dhcp.py\n│   │   │   ├── external_process.py\n│   │   │   ├── __init__.py\n│   │   │   ├── interface.py\n│   │   │   ├── ip_lib.py\n│   │   │   ├── iptables_firewall.py\n│   │   │   ├── iptables_manager.py\n│   │   │   ├── ovs_lib.py\n│   │   │   └── utils.py\n│   │   ├── metadata\n│   │   │   ├── agent.py\n│   │   │   ├── __init__.py\n│   │   │   └── namespace_proxy.py\n│   │   ├── netns_cleanup_util.py\n│   │   ├── ovs_cleanup_util.py\n│   │   ├── rpc.py\n│   │   └── securitygroups_rpc.py\n│   ├── api\n│   │   ├── api_common.py\n│   │   ├── extensions.py\n│   │   ├── __init__.py\n│   │   ├── rpc\n│   │   │   ├── agentnotifiers\n│   │   │   │   ├── dhcp_rpc_agent_api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── l3_rpc_agent_api.py\n│   │   │   └── __init__.py\n│   │   ├── v2\n│   │   │   ├── attributes.py\n│   │   │   ├── base.py\n│   │   │   ├── __init__.py\n│   │   │   ├── resource.py\n│   │   │   └── router.py\n│   │   ├── versions.py\n│   │   └── views\n│   │       ├── __init__.py\n│   │       └── versions.py\n│   ├── auth.py\n│   ├── common\n│   │   ├── config.py\n│   │   ├── constants.py\n│   │   ├── exceptions.py\n│   │   ├── __init__.py\n│   │   ├── rpc.py\n│   │   ├── test_lib.py\n│   │   ├── topics.py\n│   │   └── utils.py\n│   ├── context.py\n│   ├── db\n│   │   ├── agentschedulers_db.py\n│   │   ├── agents_db.py\n│   │   ├── api.py\n│   │   ├── db_base_plugin_v2.py\n│   │   ├── dhcp_rpc_base.py\n│   │   ├── extraroute_db.py\n│   │   ├── __init__.py\n│   │   ├── l3_db.py\n│   │   ├── l3_rpc_base.py\n│   │   ├── loadbalancer\n│   │   │   ├── __init__.py\n│   │   │   └── loadbalancer_db.py\n│   │   ├── migration\n│   │   │   ├── alembic.ini\n│   │   │   ├── alembic_migrations\n│   │   │   │   ├── common_ext_ops.py\n│   │   │   │   ├── env.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── script.py.mako\n│   │   │   │   └── versions\n│   │   │   │       ├── 1149d7de0cfa_port_security.py\n│   │   │   │       ├── 1341ed32cc1e_nvp_netbinding_update.py\n│   │   │   │       ├── 1b693c095aa3_quota_ext_db_grizzly.py\n│   │   │   │       ├── 1c33fa3cd1a1_extra_route_config.py\n│   │   │   │       ├── 1d76643bcec4_nvp_netbinding.py\n│   │   │   │       ├── 2a6d0b51f4bb_cisco_plugin_cleanup.py\n│   │   │   │       ├── 2c4af419145b_l3_support.py\n│   │   │   │       ├── 363468ac592c_nvp_network_gw.py\n│   │   │   │       ├── 38335592a0dc_nvp_portmap.py\n│   │   │   │       ├── 3b54bf9e29f7_nec_plugin_sharednet.py\n│   │   │   │       ├── 3cb5d900c5de_security_groups.py\n│   │   │   │       ├── 45680af419f9_nvp_qos.py\n│   │   │   │       ├── 4692d074d587_agent_scheduler.py\n│   │   │   │       ├── 48b6f43f7471_service_type.py\n│   │   │   │       ├── 49332180ca96_ryu_plugin_update.py\n│   │   │   │       ├── 511471cc46b_agent_ext_model_supp.py\n│   │   │   │       ├── 54c2c487e913_lbaas.py\n│   │   │   │       ├── 5a875d0e5c_ryu.py\n│   │   │   │       ├── folsom_initial.py\n│   │   │   │       ├── grizzly_release.py\n│   │   │   │       └── README\n│   │   │   ├── cli.py\n│   │   │   ├── __init__.py\n│   │   │   └── README\n│   │   ├── model_base.py\n│   │   ├── models_v2.py\n│   │   ├── portsecurity_db.py\n│   │   ├── quota_db.py\n│   │   ├── routedserviceinsertion_db.py\n│   │   ├── routerservicetype_db.py\n│   │   ├── securitygroups_db.py\n│   │   ├── securitygroups_rpc_base.py\n│   │   ├── servicetype_db.py\n│   │   └── sqlalchemyutils.py\n│   ├── debug\n│   │   ├── commands.py\n│   │   ├── debug_agent.py\n│   │   ├── __init__.py\n│   │   ├── README\n│   │   └── shell.py\n│   ├── extensions\n│   │   ├── agent.py\n│   │   ├── agentscheduler.py\n│   │   ├── extraroute.py\n│   │   ├── flavor.py\n│   │   ├── __init__.py\n│   │   ├── l3.py\n│   │   ├── loadbalancer.py\n│   │   ├── portbindings.py\n│   │   ├── portsecurity.py\n│   │   ├── providernet.py\n│   │   ├── quotasv2.py\n│   │   ├── routedserviceinsertion.py\n│   │   ├── routerservicetype.py\n│   │   ├── securitygroup.py\n│   │   └── servicetype.py\n│   ├── __init__.py\n│   ├── locale\n│   │   ├── ja\n│   │   │   └── LC_MESSAGES\n│   │   │       └── quantum.po\n│   │   └── quantum.pot\n│   ├── manager.py\n│   ├── openstack\n│   │   ├── common\n│   │   │   ├── context.py\n│   │   │   ├── eventlet_backdoor.py\n│   │   │   ├── exception.py\n│   │   │   ├── excutils.py\n│   │   │   ├── fileutils.py\n│   │   │   ├── gettextutils.py\n│   │   │   ├── importutils.py\n│   │   │   ├── __init__.py\n│   │   │   ├── jsonutils.py\n│   │   │   ├── local.py\n│   │   │   ├── lockutils.py\n│   │   │   ├── log.py\n│   │   │   ├── loopingcall.py\n│   │   │   ├── network_utils.py\n│   │   │   ├── notifier\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── log_notifier.py\n│   │   │   │   ├── no_op_notifier.py\n│   │   │   │   ├── rabbit_notifier.py\n│   │   │   │   ├── rpc_notifier2.py\n│   │   │   │   ├── rpc_notifier.py\n│   │   │   │   └── test_notifier.py\n│   │   │   ├── periodic_task.py\n│   │   │   ├── policy.py\n│   │   │   ├── processutils.py\n│   │   │   ├── rpc\n│   │   │   │   ├── amqp.py\n│   │   │   │   ├── common.py\n│   │   │   │   ├── dispatcher.py\n│   │   │   │   ├── impl_fake.py\n│   │   │   │   ├── impl_kombu.py\n│   │   │   │   ├── impl_qpid.py\n│   │   │   │   ├── impl_zmq.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── matchmaker.py\n│   │   │   │   ├── matchmaker_redis.py\n│   │   │   │   ├── proxy.py\n│   │   │   │   └── service.py\n│   │   │   ├── service.py\n│   │   │   ├── setup.py\n│   │   │   ├── threadgroup.py\n│   │   │   ├── timeutils.py\n│   │   │   ├── uuidutils.py\n│   │   │   └── version.py\n│   │   └── __init__.py\n│   ├── plugins\n│   │   ├── bigswitch\n│   │   │   ├── __init__.py\n│   │   │   ├── plugin.py\n│   │   │   ├── README\n│   │   │   ├── tests\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_server.py\n│   │   │   ├── vcsversion.py\n│   │   │   └── version.py\n│   │   ├── brocade\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nos\n│   │   │   │   ├── fake_nosdriver.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── nctemplates.py\n│   │   │   │   └── nosdriver.py\n│   │   │   ├── QuantumPlugin.py\n│   │   │   ├── README.md\n│   │   │   ├── tests\n│   │   │   │   ├── noscli.py\n│   │   │   │   ├── nostest.py\n│   │   │   │   └── README\n│   │   │   └── vlanbm.py\n│   │   ├── cisco\n│   │   │   ├── common\n│   │   │   │   ├── cisco_configparser.py\n│   │   │   │   ├── cisco_constants.py\n│   │   │   │   ├── cisco_credentials_v2.py\n│   │   │   │   ├── cisco_exceptions.py\n│   │   │   │   ├── cisco_faults.py\n│   │   │   │   ├── cisco_utils.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db.py\n│   │   │   │   ├── l2network_models.py\n│   │   │   │   ├── models.py\n│   │   │   │   ├── network_db_v2.py\n│   │   │   │   ├── network_models_v2.py\n│   │   │   │   ├── nexus_db_v2.py\n│   │   │   │   └── nexus_models_v2.py\n│   │   │   ├── extensions\n│   │   │   │   ├── credential.py\n│   │   │   │   ├── _credential_view.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── qos.py\n│   │   │   │   └── _qos_view.py\n│   │   │   ├── __init__.py\n│   │   │   ├── l2device_plugin_base.py\n│   │   │   ├── l2network_plugin_configuration.py\n│   │   │   ├── models\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── virt_phy_sw_v2.py\n│   │   │   ├── network_plugin.py\n│   │   │   ├── nexus\n│   │   │   │   ├── cisco_nexus_configuration.py\n│   │   │   │   ├── cisco_nexus_network_driver_v2.py\n│   │   │   │   ├── cisco_nexus_plugin_v2.py\n│   │   │   │   ├── cisco_nexus_snippets.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── README\n│   │   │   ├── run_tests.py\n│   │   │   └── tests\n│   │   │       ├── __init__.py\n│   │   │       └── unit\n│   │   │           ├── api-paste.ini.cisco.test\n│   │   │           ├── __init__.py\n│   │   │           ├── quantum.conf.cisco.test\n│   │   │           ├── test_cisco_extension.py\n│   │   │           ├── test_database.py\n│   │   │           └── v2\n│   │   │               ├── api-paste.ini.cisco.test\n│   │   │               ├── __init__.py\n│   │   │               ├── nexus\n│   │   │               │   ├── fake_nexus_driver.py\n│   │   │               │   └── __init__.py\n│   │   │               ├── quantumv2.conf.cisco.test\n│   │   │               └── test_api_v2.py\n│   │   ├── common\n│   │   │   ├── constants.py\n│   │   │   └── __init__.py\n│   │   ├── hyperv\n│   │   │   ├── agent\n│   │   │   │   ├── hyperv_quantum_agent.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── utils.py\n│   │   │   ├── agent_notifier_api.py\n│   │   │   ├── common\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db.py\n│   │   │   ├── hyperv_quantum_plugin.py\n│   │   │   ├── __init__.py\n│   │   │   ├── model.py\n│   │   │   └── rpc_callbacks.py\n│   │   ├── __init__.py\n│   │   ├── linuxbridge\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── linuxbridge_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db_v2.py\n│   │   │   │   └── l2network_models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── lb_quantum_plugin.py\n│   │   │   └── README\n│   │   ├── metaplugin\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── meta_db_v2.py\n│   │   │   ├── meta_models_v2.py\n│   │   │   ├── meta_quantum_plugin.py\n│   │   │   ├── proxy_quantum_plugin.py\n│   │   │   ├── README\n│   │   │   └── run_tests.py\n│   │   ├── midonet\n│   │   │   ├── config.py\n│   │   │   ├── __init__.py\n│   │   │   ├── midonet_lib.py\n│   │   │   └── plugin.py\n│   │   ├── nec\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── nec_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── exceptions.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ofc_client.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── models.py\n│   │   │   │   └── nec_plugin_base.py\n│   │   │   ├── drivers\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── pfc.py\n│   │   │   │   └── trema.py\n│   │   │   ├── extensions\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── packetfilter.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nec_plugin.py\n│   │   │   ├── ofc_driver_base.py\n│   │   │   ├── ofc_manager.py\n│   │   │   └── README\n│   │   ├── nicira\n│   │   │   ├── __init__.py\n│   │   │   └── nicira_nvp_plugin\n│   │   │       ├── api_client\n│   │   │       │   ├── client_eventlet.py\n│   │   │       │   ├── client.py\n│   │   │       │   ├── common.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── request_eventlet.py\n│   │   │       │   └── request.py\n│   │   │       ├── check_nvp_config.py\n│   │   │       ├── common\n│   │   │       │   ├── config.py\n│   │   │       │   ├── exceptions.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── metadata_access.py\n│   │   │       │   └── securitygroups.py\n│   │   │       ├── extensions\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── nvp_networkgw.py\n│   │   │       │   └── nvp_qos.py\n│   │   │       ├── __init__.py\n│   │   │       ├── nicira_db.py\n│   │   │       ├── nicira_models.py\n│   │   │       ├── nicira_networkgw_db.py\n│   │   │       ├── nicira_qos_db.py\n│   │   │       ├── NvpApiClient.py\n│   │   │       ├── nvp_cluster.py\n│   │   │       ├── nvplib.py\n│   │   │       ├── nvp_plugin_version.py\n│   │   │       ├── QuantumPlugin.py\n│   │   │       └── README\n│   │   ├── openvswitch\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── ovs_quantum_agent.py\n│   │   │   │   ├── ovs-quantum-agent-xs_xcp.spec\n│   │   │   │   └── xenserver_install.sh\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── Makefile\n│   │   │   ├── ovs_db_v2.py\n│   │   │   ├── ovs_models_v2.py\n│   │   │   ├── ovs_quantum_plugin.py\n│   │   │   └── README\n│   │   ├── plumgrid\n│   │   │   ├── common\n│   │   │   │   ├── exceptions.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── plumgrid_nos_plugin\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── plugin_ver.py\n│   │   │   │   ├── plumgrid_nos_snippets.py\n│   │   │   │   ├── plumgrid_plugin.py\n│   │   │   │   └── rest_connection.py\n│   │   │   └── README\n│   │   ├── ryu\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ryu_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api_v2.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── README\n│   │   │   └── ryu_quantum_plugin.py\n│   │   └── services\n│   │       ├── agent_loadbalancer\n│   │       │   ├── agent\n│   │       │   │   ├── api.py\n│   │       │   │   ├── __init__.py\n│   │       │   │   └── manager.py\n│   │       │   ├── constants.py\n│   │       │   ├── drivers\n│   │       │   │   ├── haproxy\n│   │       │   │   │   ├── cfg.py\n│   │       │   │   │   ├── __init__.py\n│   │       │   │   │   └── namespace_driver.py\n│   │       │   │   └── __init__.py\n│   │       │   ├── __init__.py\n│   │       │   └── plugin.py\n│   │       ├── __init__.py\n│   │       └── service_base.py\n│   ├── policy.py\n│   ├── quantum_plugin_base_v2.py\n│   ├── quota.py\n│   ├── rootwrap\n│   │   ├── filters.py\n│   │   ├── __init__.py\n│   │   └── wrapper.py\n│   ├── scheduler\n│   │   ├── dhcp_agent_scheduler.py\n│   │   ├── __init__.py\n│   │   └── l3_agent_scheduler.py\n│   ├── server\n│   │   └── __init__.py\n│   ├── service.py\n│   ├── tests\n│   │   ├── base.py\n│   │   ├── etc\n│   │   │   ├── api-paste.ini.test\n│   │   │   ├── quantum.conf.test\n│   │   │   └── rootwrap.d\n│   │   │       └── quantum.test.filters\n│   │   ├── __init__.py\n│   │   ├── unit\n│   │   │   ├── bigswitch\n│   │   │   │   ├── etc\n│   │   │   │   │   └── restproxy.ini.test\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_restproxy_plugin.py\n│   │   │   │   └── test_router_db.py\n│   │   │   ├── brocade\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_brocade_db.py\n│   │   │   │   ├── test_brocade_plugin.py\n│   │   │   │   └── test_brocade_vlan.py\n│   │   │   ├── cisco\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_network_plugin.py\n│   │   │   │   └── test_nexus_plugin.py\n│   │   │   ├── database_stubs.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── loadbalancer\n│   │   │   │       ├── __init__.py\n│   │   │   │       └── test_db_loadbalancer.py\n│   │   │   ├── dummy_plugin.py\n│   │   │   ├── extensions\n│   │   │   │   ├── extendedattribute.py\n│   │   │   │   ├── extensionattribute.py\n│   │   │   │   ├── foxinsocks.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── v2attributes.py\n│   │   │   ├── extension_stubs.py\n│   │   │   ├── hyperv\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_hyperv_quantum_agent.py\n│   │   │   │   ├── test_hyperv_quantum_plugin.py\n│   │   │   │   └── test_hyperv_rpcapi.py\n│   │   │   ├── __init__.py\n│   │   │   ├── linuxbridge\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_lb_db.py\n│   │   │   │   ├── test_lb_quantum_agent.py\n│   │   │   │   ├── test_lb_security_group.py\n│   │   │   │   ├── test_linuxbridge_plugin.py\n│   │   │   │   └── test_rpcapi.py\n│   │   │   ├── metaplugin\n│   │   │   │   ├── fake_plugin.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_basic.py\n│   │   │   │   └── test_metaplugin.py\n│   │   │   ├── midonet\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_midonet_lib.py\n│   │   │   │   └── test_midonet_plugin.py\n│   │   │   ├── nec\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── stub_ofc_driver.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_config.py\n│   │   │   │   ├── test_db.py\n│   │   │   │   ├── test_nec_plugin.py\n│   │   │   │   ├── test_ofc_manager.py\n│   │   │   │   ├── test_pfc_driver.py\n│   │   │   │   ├── test_security_group.py\n│   │   │   │   └── test_trema_driver.py\n│   │   │   ├── nicira\n│   │   │   │   ├── etc\n│   │   │   │   │   ├── fake_get_gwservice.json\n│   │   │   │   │   ├── fake_get_lrouter.json\n│   │   │   │   │   ├── fake_get_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_get_lrouter_lport.json\n│   │   │   │   │   ├── fake_get_lrouter_nat.json\n│   │   │   │   │   ├── fake_get_lswitch.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_att.json\n│   │   │   │   │   ├── fake_get_lswitch_lport.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_status.json\n│   │   │   │   │   ├── fake_post_gwservice.json\n│   │   │   │   │   ├── fake_post_lqueue.json\n│   │   │   │   │   ├── fake_post_lrouter.json\n│   │   │   │   │   ├── fake_post_lrouter_lport.json\n│   │   │   │   │   ├── fake_post_lrouter_nat.json\n│   │   │   │   │   ├── fake_post_lswitch.json\n│   │   │   │   │   ├── fake_post_lswitch_lport.json\n│   │   │   │   │   ├── fake_post_security_profile.json\n│   │   │   │   │   ├── fake_put_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_put_lswitch_lport_att.json\n│   │   │   │   │   └── nvp.ini.test\n│   │   │   │   ├── fake_nvpapiclient.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_networkgw.py\n│   │   │   │   ├── test_nicira_plugin.py\n│   │   │   │   ├── test_nvp_api_common.py\n│   │   │   │   ├── test_nvp_api_request_eventlet.py\n│   │   │   │   ├── test_nvp_api_request.py\n│   │   │   │   └── test_nvplib.py\n│   │   │   ├── openvswitch\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_openvswitch_plugin.py\n│   │   │   │   ├── test_ovs_db.py\n│   │   │   │   ├── test_ovs_defaults.py\n│   │   │   │   ├── test_ovs_lib.py\n│   │   │   │   ├── test_ovs_quantum_agent.py\n│   │   │   │   ├── test_ovs_rpcapi.py\n│   │   │   │   ├── test_ovs_security_group.py\n│   │   │   │   └── test_ovs_tunnel.py\n│   │   │   ├── plumgrid\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_plumgrid_plugin.py\n│   │   │   ├── ryu\n│   │   │   │   ├── fake_ryu.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_ryu_agent.py\n│   │   │   │   ├── test_ryu_db.py\n│   │   │   │   ├── test_ryu_plugin.py\n│   │   │   │   └── test_ryu_security_group.py\n│   │   │   ├── services\n│   │   │   │   ├── agent_loadbalancer\n│   │   │   │   │   ├── agent\n│   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   ├── test_api.py\n│   │   │   │   │   │   ├── test_init.py\n│   │   │   │   │   │   └── test_manager.py\n│   │   │   │   │   ├── driver\n│   │   │   │   │   │   ├── haproxy\n│   │   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   │   ├── test_cfg.py\n│   │   │   │   │   │   │   └── test_namespace_driver.py\n│   │   │   │   │   │   └── __init__.py\n│   │   │   │   │   ├── __init__.py\n│   │   │   │   │   └── test_plugin.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── test_agent_config.py\n│   │   │   ├── test_agent_ext_plugin.py\n│   │   │   ├── test_agent_linux_utils.py\n│   │   │   ├── test_agent_netns_cleanup.py\n│   │   │   ├── test_agent_ovs_cleanup.py\n│   │   │   ├── test_agent_rpc.py\n│   │   │   ├── test_api_api_common.py\n│   │   │   ├── test_api_v2.py\n│   │   │   ├── test_api_v2_resource.py\n│   │   │   ├── test_attributes.py\n│   │   │   ├── test_auth.py\n│   │   │   ├── test_common_utils.py\n│   │   │   ├── test_config.py\n│   │   │   ├── test_db_migration.py\n│   │   │   ├── test_db_plugin.py\n│   │   │   ├── test_db.py\n│   │   │   ├── test_db_rpc_base.py\n│   │   │   ├── test_debug_commands.py\n│   │   │   ├── test_dhcp_agent.py\n│   │   │   ├── test_extension_extended_attribute.py\n│   │   │   ├── test_extension_extraroute.py\n│   │   │   ├── _test_extension_portbindings.py\n│   │   │   ├── test_extension_portsecurity.py\n│   │   │   ├── test_extension_security_group.py\n│   │   │   ├── test_extensions.py\n│   │   │   ├── test_iptables_firewall.py\n│   │   │   ├── test_iptables_manager.py\n│   │   │   ├── test_l3_agent.py\n│   │   │   ├── test_l3_plugin.py\n│   │   │   ├── testlib_api.py\n│   │   │   ├── test_linux_daemon.py\n│   │   │   ├── test_linux_dhcp.py\n│   │   │   ├── test_linux_external_process.py\n│   │   │   ├── test_linux_interface.py\n│   │   │   ├── test_linux_ip_lib.py\n│   │   │   ├── test_loadbalancer_plugin.py\n│   │   │   ├── test_metadata_agent.py\n│   │   │   ├── test_metadata_namespace_proxy.py\n│   │   │   ├── test_policy.py\n│   │   │   ├── test_quantum_context.py\n│   │   │   ├── test_quantum_manager.py\n│   │   │   ├── test_quota_ext.py\n│   │   │   ├── _test_rootwrap_exec.py\n│   │   │   ├── test_rootwrap.py\n│   │   │   ├── test_routerserviceinsertion.py\n│   │   │   ├── test_security_groups_rpc.py\n│   │   │   ├── test_servicetype.py\n│   │   │   └── test_wsgi.py\n│   │   └── var\n│   │       ├── ca.crt\n│   │       ├── certificate.crt\n│   │       └── privatekey.key\n│   ├── version.py\n│   └── wsgi.py\n├── README\n├── run_tests.py\n├── run_tests.sh\n├── setup.cfg\n├── setup.py\n├── TESTING\n├── tools\n│   ├── build_debs.sh\n│   ├── check_i18n.py\n│   ├── check_i18n_test_case.txt\n│   ├── clean.sh\n│   ├── i18n_cfg.py\n│   ├── install_venv_common.py\n│   ├── install_venv.py\n│   ├── patch_tox_venv.py\n│   ├── pip-requires\n│   ├── test-requires\n│   └── with_venv.sh\n└── tox.ini\n</code></pre>\n','','','inherit','open','open','','287-revision-2','','','2013-04-01 17:03:57','2013-04-01 09:03:57','','287','http://blog.wachang.net/2013/04/287-revision-2/','0','revision','','0');");
E_D("replace into `wp_posts` values('290','1','2013-04-01 19:55:50','2013-04-01 11:55:50','<p>以下是我git clone的Quantum的源代码，我简单做一下注释。</p>\n\n<pre><code>root@Compute2:~/quantum# tree\n.\n├── bin #各个组件的启动脚本\n│   ├── quantum-check-nvp-config\n│   ├── quantum-db-manage\n│   ├── quantum-debug\n│   ├── quantum-dhcp-agent\n│   ├── quantum-dhcp-agent-dnsmasq-lease-update\n│   ├── quantum-hyperv-agent\n│   ├── quantum-l3-agent\n│   ├── quantum-lbaas-agent\n│   ├── quantum-linuxbridge-agent\n│   ├── quantum-metadata-agent\n│   ├── quantum-nec-agent\n│   ├── quantum-netns-cleanup\n│   ├── quantum-ns-metadata-proxy\n│   ├── quantum-openvswitch-agent\n│   ├── quantum-ovs-cleanup\n│   ├── quantum-rootwrap\n│   ├── quantum-rpc-zmq-receiver\n│   ├── quantum-ryu-agent\n│   ├── quantum-server\n│   └── quantum-usage-audit\n├── contrib\n│   └── redhat-eventlet.patch\n├── doc#文档目录，已删除，可以用sphix编译\n├── etc#这是Quantum中所有的配置文件例子\n│   ├── api-paste.ini #配置WSGI应用，用于REST API处理\n│   ├── dhcp_agent.ini\n│   ├── init.d\n│   │   └── quantum-server #配置服务脚本，service quantum xxx\n│   ├── l3_agent.ini\n│   ├── lbaas_agent.ini\n│   ├── metadata_agent.ini\n│   ├── policy.json\n│   ├── quantum\n│   │   ├── plugins #都是插件的配置\n│   │   │   ├── bigswitch\n│   │   │   │   └── restproxy.ini\n│   │   │   ├── brocade\n│   │   │   │   └── brocade.ini\n│   │   │   ├── cisco\n│   │   │   │   ├── cisco_plugins.ini\n│   │   │   │   ├── credentials.ini\n│   │   │   │   ├── db_conn.ini\n│   │   │   │   ├── l2network_plugin.ini\n│   │   │   │   └── nexus.ini\n│   │   │   ├── hyperv\n│   │   │   │   └── hyperv_quantum_plugin.ini\n│   │   │   ├── linuxbridge\n│   │   │   │   └── linuxbridge_conf.ini\n│   │   │   ├── metaplugin\n│   │   │   │   └── metaplugin.ini\n│   │   │   ├── midonet\n│   │   │   │   └── midonet.ini\n│   │   │   ├── nec\n│   │   │   │   └── nec.ini\n│   │   │   ├── nicira\n│   │   │   │   └── nvp.ini\n│   │   │   ├── openvswitch\n│   │   │   │   └── ovs_quantum_plugin.ini\n│   │   │   ├── plumgrid\n│   │   │   │   └── plumgrid.ini\n│   │   │   └── ryu\n│   │   │       └── ryu.ini\n│   │   └── rootwrap.d\n│   │       ├── debug.filters\n│   │       ├── dhcp.filters\n│   │       ├── iptables-firewall.filters\n│   │       ├── l3.filters\n│   │       ├── lbaas-haproxy.filters\n│   │       ├── linuxbridge-plugin.filters\n│   │       ├── nec-plugin.filters\n│   │       ├── openvswitch-plugin.filters\n│   │       └── ryu-plugin.filters\n│   ├── quantum.conf #quantum配置文件\n│   └── rootwrap.conf\n├── HACKING.rst\n├── LICENSE\n├── MANIFEST.in\n├── openstack-common.conf\n├── quantum\n│   ├── agent\n│   │   ├── common\n│   │   │   ├── config.py#注册agent通用的选项，主要是agent_state的选项\n│   │   │   └── __init__.py\n│   │   ├── dhcp_agent.py\n│   │   ├── firewall.py\n│   │   ├── __init__.py\n│   │   ├── l3_agent.py\n│   │   ├── linux#涉及linux操作的库，比如设置iptables，获得MAC地址等\n│   │   │   ├── daemon.py\n│   │   │   ├── dhcp.py\n│   │   │   ├── external_process.py\n│   │   │   ├── __init__.py\n│   │   │   ├── interface.py\n│   │   │   ├── ip_lib.py\n│   │   │   ├── iptables_firewall.py\n│   │   │   ├── iptables_manager.py\n│   │   │   ├── ovs_lib.py\n│   │   │   └── utils.py\n│   │   ├── metadata\n│   │   │   ├── agent.py\n│   │   │   ├── __init__.py\n│   │   │   └── namespace_proxy.py\n│   │   ├── netns_cleanup_util.py\n│   │   ├── ovs_cleanup_util.py\n│   │   ├── rpc.py#Agent端通过RPC向Plugin通信的实现\n│   │   └── securitygroups_rpc.py\n│   ├── api\n│   │   ├── api_common.py\n│   │   ├── extensions.py\n│   │   ├── __init__.py\n│   │   ├── rpc\n│   │   │   ├── agentnotifiers\n│   │   │   │   ├── dhcp_rpc_agent_api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── l3_rpc_agent_api.py\n│   │   │   └── __init__.py\n│   │   ├── v2\n│   │   │   ├── attributes.py\n│   │   │   ├── base.py\n│   │   │   ├── __init__.py\n│   │   │   ├── resource.py\n│   │   │   └── router.py\n│   │   ├── versions.py\n│   │   └── views\n│   │       ├── __init__.py\n│   │       └── versions.py\n│   ├── auth.py\n│   ├── common\n│   │   ├── config.py\n│   │   ├── constants.py\n│   │   ├── exceptions.py\n│   │   ├── __init__.py\n│   │   ├── rpc.py\n│   │   ├── test_lib.py\n│   │   ├── topics.py\n│   │   └── utils.py\n│   ├── context.py\n│   ├── db\n│   │   ├── agentschedulers_db.py\n│   │   ├── agents_db.py\n│   │   ├── api.py\n│   │   ├── db_base_plugin_v2.py\n│   │   ├── dhcp_rpc_base.py\n│   │   ├── extraroute_db.py\n│   │   ├── __init__.py\n│   │   ├── l3_db.py\n│   │   ├── l3_rpc_base.py\n│   │   ├── loadbalancer\n│   │   │   ├── __init__.py\n│   │   │   └── loadbalancer_db.py\n│   │   ├── migration\n│   │   │   ├── alembic.ini\n│   │   │   ├── alembic_migrations\n│   │   │   │   ├── common_ext_ops.py\n│   │   │   │   ├── env.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── script.py.mako\n│   │   │   │   └── versions\n│   │   │   │       ├── 1149d7de0cfa_port_security.py\n│   │   │   │       ├── 1341ed32cc1e_nvp_netbinding_update.py\n│   │   │   │       ├── 1b693c095aa3_quota_ext_db_grizzly.py\n│   │   │   │       ├── 1c33fa3cd1a1_extra_route_config.py\n│   │   │   │       ├── 1d76643bcec4_nvp_netbinding.py\n│   │   │   │       ├── 2a6d0b51f4bb_cisco_plugin_cleanup.py\n│   │   │   │       ├── 2c4af419145b_l3_support.py\n│   │   │   │       ├── 363468ac592c_nvp_network_gw.py\n│   │   │   │       ├── 38335592a0dc_nvp_portmap.py\n│   │   │   │       ├── 3b54bf9e29f7_nec_plugin_sharednet.py\n│   │   │   │       ├── 3cb5d900c5de_security_groups.py\n│   │   │   │       ├── 45680af419f9_nvp_qos.py\n│   │   │   │       ├── 4692d074d587_agent_scheduler.py\n│   │   │   │       ├── 48b6f43f7471_service_type.py\n│   │   │   │       ├── 49332180ca96_ryu_plugin_update.py\n│   │   │   │       ├── 511471cc46b_agent_ext_model_supp.py\n│   │   │   │       ├── 54c2c487e913_lbaas.py\n│   │   │   │       ├── 5a875d0e5c_ryu.py\n│   │   │   │       ├── folsom_initial.py\n│   │   │   │       ├── grizzly_release.py\n│   │   │   │       └── README\n│   │   │   ├── cli.py\n│   │   │   ├── __init__.py\n│   │   │   └── README\n│   │   ├── model_base.py\n│   │   ├── models_v2.py\n│   │   ├── portsecurity_db.py\n│   │   ├── quota_db.py\n│   │   ├── routedserviceinsertion_db.py\n│   │   ├── routerservicetype_db.py\n│   │   ├── securitygroups_db.py\n│   │   ├── securitygroups_rpc_base.py\n│   │   ├── servicetype_db.py\n│   │   └── sqlalchemyutils.py\n│   ├── debug\n│   │   ├── commands.py\n│   │   ├── debug_agent.py\n│   │   ├── __init__.py\n│   │   ├── README\n│   │   └── shell.py\n│   ├── extensions\n│   │   ├── agent.py\n│   │   ├── agentscheduler.py\n│   │   ├── extraroute.py\n│   │   ├── flavor.py\n│   │   ├── __init__.py\n│   │   ├── l3.py\n│   │   ├── loadbalancer.py\n│   │   ├── portbindings.py\n│   │   ├── portsecurity.py\n│   │   ├── providernet.py\n│   │   ├── quotasv2.py\n│   │   ├── routedserviceinsertion.py\n│   │   ├── routerservicetype.py\n│   │   ├── securitygroup.py\n│   │   └── servicetype.py\n│   ├── __init__.py\n│   ├── locale\n│   │   ├── ja\n│   │   │   └── LC_MESSAGES\n│   │   │       └── quantum.po\n│   │   └── quantum.pot\n│   ├── manager.py\n│   ├── openstack\n│   │   ├── common\n│   │   │   ├── context.py\n│   │   │   ├── eventlet_backdoor.py\n│   │   │   ├── exception.py\n│   │   │   ├── excutils.py\n│   │   │   ├── fileutils.py\n│   │   │   ├── gettextutils.py\n│   │   │   ├── importutils.py\n│   │   │   ├── __init__.py\n│   │   │   ├── jsonutils.py\n│   │   │   ├── local.py\n│   │   │   ├── lockutils.py\n│   │   │   ├── log.py\n│   │   │   ├── loopingcall.py\n│   │   │   ├── network_utils.py\n│   │   │   ├── notifier\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── log_notifier.py\n│   │   │   │   ├── no_op_notifier.py\n│   │   │   │   ├── rabbit_notifier.py\n│   │   │   │   ├── rpc_notifier2.py\n│   │   │   │   ├── rpc_notifier.py\n│   │   │   │   └── test_notifier.py\n│   │   │   ├── periodic_task.py\n│   │   │   ├── policy.py\n│   │   │   ├── processutils.py\n│   │   │   ├── rpc\n│   │   │   │   ├── amqp.py\n│   │   │   │   ├── common.py\n│   │   │   │   ├── dispatcher.py\n│   │   │   │   ├── impl_fake.py\n│   │   │   │   ├── impl_kombu.py\n│   │   │   │   ├── impl_qpid.py\n│   │   │   │   ├── impl_zmq.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── matchmaker.py\n│   │   │   │   ├── matchmaker_redis.py\n│   │   │   │   ├── proxy.py\n│   │   │   │   └── service.py\n│   │   │   ├── service.py\n│   │   │   ├── setup.py\n│   │   │   ├── threadgroup.py\n│   │   │   ├── timeutils.py\n│   │   │   ├── uuidutils.py\n│   │   │   └── version.py\n│   │   └── __init__.py\n│   ├── plugins\n│   │   ├── bigswitch\n│   │   │   ├── __init__.py\n│   │   │   ├── plugin.py\n│   │   │   ├── README\n│   │   │   ├── tests\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_server.py\n│   │   │   ├── vcsversion.py\n│   │   │   └── version.py\n│   │   ├── brocade\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nos\n│   │   │   │   ├── fake_nosdriver.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── nctemplates.py\n│   │   │   │   └── nosdriver.py\n│   │   │   ├── QuantumPlugin.py\n│   │   │   ├── README.md\n│   │   │   ├── tests\n│   │   │   │   ├── noscli.py\n│   │   │   │   ├── nostest.py\n│   │   │   │   └── README\n│   │   │   └── vlanbm.py\n│   │   ├── cisco\n│   │   │   ├── common\n│   │   │   │   ├── cisco_configparser.py\n│   │   │   │   ├── cisco_constants.py\n│   │   │   │   ├── cisco_credentials_v2.py\n│   │   │   │   ├── cisco_exceptions.py\n│   │   │   │   ├── cisco_faults.py\n│   │   │   │   ├── cisco_utils.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db.py\n│   │   │   │   ├── l2network_models.py\n│   │   │   │   ├── models.py\n│   │   │   │   ├── network_db_v2.py\n│   │   │   │   ├── network_models_v2.py\n│   │   │   │   ├── nexus_db_v2.py\n│   │   │   │   └── nexus_models_v2.py\n│   │   │   ├── extensions\n│   │   │   │   ├── credential.py\n│   │   │   │   ├── _credential_view.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── qos.py\n│   │   │   │   └── _qos_view.py\n│   │   │   ├── __init__.py\n│   │   │   ├── l2device_plugin_base.py\n│   │   │   ├── l2network_plugin_configuration.py\n│   │   │   ├── models\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── virt_phy_sw_v2.py\n│   │   │   ├── network_plugin.py\n│   │   │   ├── nexus\n│   │   │   │   ├── cisco_nexus_configuration.py\n│   │   │   │   ├── cisco_nexus_network_driver_v2.py\n│   │   │   │   ├── cisco_nexus_plugin_v2.py\n│   │   │   │   ├── cisco_nexus_snippets.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── README\n│   │   │   ├── run_tests.py\n│   │   │   └── tests\n│   │   │       ├── __init__.py\n│   │   │       └── unit\n│   │   │           ├── api-paste.ini.cisco.test\n│   │   │           ├── __init__.py\n│   │   │           ├── quantum.conf.cisco.test\n│   │   │           ├── test_cisco_extension.py\n│   │   │           ├── test_database.py\n│   │   │           └── v2\n│   │   │               ├── api-paste.ini.cisco.test\n│   │   │               ├── __init__.py\n│   │   │               ├── nexus\n│   │   │               │   ├── fake_nexus_driver.py\n│   │   │               │   └── __init__.py\n│   │   │               ├── quantumv2.conf.cisco.test\n│   │   │               └── test_api_v2.py\n│   │   ├── common\n│   │   │   ├── constants.py\n│   │   │   └── __init__.py\n│   │   ├── hyperv\n│   │   │   ├── agent\n│   │   │   │   ├── hyperv_quantum_agent.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── utils.py\n│   │   │   ├── agent_notifier_api.py\n│   │   │   ├── common\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db.py\n│   │   │   ├── hyperv_quantum_plugin.py\n│   │   │   ├── __init__.py\n│   │   │   ├── model.py\n│   │   │   └── rpc_callbacks.py\n│   │   ├── __init__.py\n│   │   ├── linuxbridge\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── linuxbridge_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db_v2.py\n│   │   │   │   └── l2network_models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── lb_quantum_plugin.py\n│   │   │   └── README\n│   │   ├── metaplugin\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── meta_db_v2.py\n│   │   │   ├── meta_models_v2.py\n│   │   │   ├── meta_quantum_plugin.py\n│   │   │   ├── proxy_quantum_plugin.py\n│   │   │   ├── README\n│   │   │   └── run_tests.py\n│   │   ├── midonet\n│   │   │   ├── config.py\n│   │   │   ├── __init__.py\n│   │   │   ├── midonet_lib.py\n│   │   │   └── plugin.py\n│   │   ├── nec\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── nec_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── exceptions.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ofc_client.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── models.py\n│   │   │   │   └── nec_plugin_base.py\n│   │   │   ├── drivers\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── pfc.py\n│   │   │   │   └── trema.py\n│   │   │   ├── extensions\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── packetfilter.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nec_plugin.py\n│   │   │   ├── ofc_driver_base.py\n│   │   │   ├── ofc_manager.py\n│   │   │   └── README\n│   │   ├── nicira\n│   │   │   ├── __init__.py\n│   │   │   └── nicira_nvp_plugin\n│   │   │       ├── api_client\n│   │   │       │   ├── client_eventlet.py\n│   │   │       │   ├── client.py\n│   │   │       │   ├── common.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── request_eventlet.py\n│   │   │       │   └── request.py\n│   │   │       ├── check_nvp_config.py\n│   │   │       ├── common\n│   │   │       │   ├── config.py\n│   │   │       │   ├── exceptions.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── metadata_access.py\n│   │   │       │   └── securitygroups.py\n│   │   │       ├── extensions\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── nvp_networkgw.py\n│   │   │       │   └── nvp_qos.py\n│   │   │       ├── __init__.py\n│   │   │       ├── nicira_db.py\n│   │   │       ├── nicira_models.py\n│   │   │       ├── nicira_networkgw_db.py\n│   │   │       ├── nicira_qos_db.py\n│   │   │       ├── NvpApiClient.py\n│   │   │       ├── nvp_cluster.py\n│   │   │       ├── nvplib.py\n│   │   │       ├── nvp_plugin_version.py\n│   │   │       ├── QuantumPlugin.py\n│   │   │       └── README\n│   │   ├── openvswitch\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── ovs_quantum_agent.py#agent主文件\n│   │   │   │   ├── ovs-quantum-agent-xs_xcp.spec\n│   │   │   │   └── xenserver_install.sh\n│   │   │   ├── common\n│   │   │   │   ├── config.py#ovs插件注册选项，用于读取配置文件\n│   │   │   │   ├── constants.py#一些常量\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── Makefile\n│   │   │   ├── ovs_db_v2.py\n│   │   │   ├── ovs_models_v2.py#数据库表定义与sqlalchemy的类的映射\n│   │   │   ├── ovs_quantum_plugin.py#插件部分主程序\n│   │   │   └── README\n│   │   ├── plumgrid\n│   │   │   ├── common\n│   │   │   │   ├── exceptions.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── plumgrid_nos_plugin\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── plugin_ver.py\n│   │   │   │   ├── plumgrid_nos_snippets.py\n│   │   │   │   ├── plumgrid_plugin.py\n│   │   │   │   └── rest_connection.py\n│   │   │   └── README\n│   │   ├── ryu\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ryu_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api_v2.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── README\n│   │   │   └── ryu_quantum_plugin.py\n│   │   └── services\n│   │       ├── agent_loadbalancer\n│   │       │   ├── agent\n│   │       │   │   ├── api.py\n│   │       │   │   ├── __init__.py\n│   │       │   │   └── manager.py\n│   │       │   ├── constants.py\n│   │       │   ├── drivers\n│   │       │   │   ├── haproxy\n│   │       │   │   │   ├── cfg.py\n│   │       │   │   │   ├── __init__.py\n│   │       │   │   │   └── namespace_driver.py\n│   │       │   │   └── __init__.py\n│   │       │   ├── __init__.py\n│   │       │   └── plugin.py\n│   │       ├── __init__.py\n│   │       └── service_base.py\n│   ├── policy.py\n│   ├── quantum_plugin_base_v2.py\n│   ├── quota.py\n│   ├── rootwrap\n│   │   ├── filters.py\n│   │   ├── __init__.py\n│   │   └── wrapper.py\n│   ├── scheduler\n│   │   ├── dhcp_agent_scheduler.py\n│   │   ├── __init__.py\n│   │   └── l3_agent_scheduler.py\n│   ├── server\n│   │   └── __init__.py\n│   ├── service.py\n│   ├── tests\n│   │   ├── base.py\n│   │   ├── etc\n│   │   │   ├── api-paste.ini.test\n│   │   │   ├── quantum.conf.test\n│   │   │   └── rootwrap.d\n│   │   │       └── quantum.test.filters\n│   │   ├── __init__.py\n│   │   ├── unit\n│   │   │   ├── bigswitch\n│   │   │   │   ├── etc\n│   │   │   │   │   └── restproxy.ini.test\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_restproxy_plugin.py\n│   │   │   │   └── test_router_db.py\n│   │   │   ├── brocade\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_brocade_db.py\n│   │   │   │   ├── test_brocade_plugin.py\n│   │   │   │   └── test_brocade_vlan.py\n│   │   │   ├── cisco\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_network_plugin.py\n│   │   │   │   └── test_nexus_plugin.py\n│   │   │   ├── database_stubs.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── loadbalancer\n│   │   │   │       ├── __init__.py\n│   │   │   │       └── test_db_loadbalancer.py\n│   │   │   ├── dummy_plugin.py\n│   │   │   ├── extensions\n│   │   │   │   ├── extendedattribute.py\n│   │   │   │   ├── extensionattribute.py\n│   │   │   │   ├── foxinsocks.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── v2attributes.py\n│   │   │   ├── extension_stubs.py\n│   │   │   ├── hyperv\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_hyperv_quantum_agent.py\n│   │   │   │   ├── test_hyperv_quantum_plugin.py\n│   │   │   │   └── test_hyperv_rpcapi.py\n│   │   │   ├── __init__.py\n│   │   │   ├── linuxbridge\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_lb_db.py\n│   │   │   │   ├── test_lb_quantum_agent.py\n│   │   │   │   ├── test_lb_security_group.py\n│   │   │   │   ├── test_linuxbridge_plugin.py\n│   │   │   │   └── test_rpcapi.py\n│   │   │   ├── metaplugin\n│   │   │   │   ├── fake_plugin.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_basic.py\n│   │   │   │   └── test_metaplugin.py\n│   │   │   ├── midonet\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_midonet_lib.py\n│   │   │   │   └── test_midonet_plugin.py\n│   │   │   ├── nec\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── stub_ofc_driver.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_config.py\n│   │   │   │   ├── test_db.py\n│   │   │   │   ├── test_nec_plugin.py\n│   │   │   │   ├── test_ofc_manager.py\n│   │   │   │   ├── test_pfc_driver.py\n│   │   │   │   ├── test_security_group.py\n│   │   │   │   └── test_trema_driver.py\n│   │   │   ├── nicira\n│   │   │   │   ├── etc\n│   │   │   │   │   ├── fake_get_gwservice.json\n│   │   │   │   │   ├── fake_get_lrouter.json\n│   │   │   │   │   ├── fake_get_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_get_lrouter_lport.json\n│   │   │   │   │   ├── fake_get_lrouter_nat.json\n│   │   │   │   │   ├── fake_get_lswitch.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_att.json\n│   │   │   │   │   ├── fake_get_lswitch_lport.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_status.json\n│   │   │   │   │   ├── fake_post_gwservice.json\n│   │   │   │   │   ├── fake_post_lqueue.json\n│   │   │   │   │   ├── fake_post_lrouter.json\n│   │   │   │   │   ├── fake_post_lrouter_lport.json\n│   │   │   │   │   ├── fake_post_lrouter_nat.json\n│   │   │   │   │   ├── fake_post_lswitch.json\n│   │   │   │   │   ├── fake_post_lswitch_lport.json\n│   │   │   │   │   ├── fake_post_security_profile.json\n│   │   │   │   │   ├── fake_put_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_put_lswitch_lport_att.json\n│   │   │   │   │   └── nvp.ini.test\n│   │   │   │   ├── fake_nvpapiclient.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_networkgw.py\n│   │   │   │   ├── test_nicira_plugin.py\n│   │   │   │   ├── test_nvp_api_common.py\n│   │   │   │   ├── test_nvp_api_request_eventlet.py\n│   │   │   │   ├── test_nvp_api_request.py\n│   │   │   │   └── test_nvplib.py\n│   │   │   ├── openvswitch\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_openvswitch_plugin.py\n│   │   │   │   ├── test_ovs_db.py\n│   │   │   │   ├── test_ovs_defaults.py\n│   │   │   │   ├── test_ovs_lib.py\n│   │   │   │   ├── test_ovs_quantum_agent.py\n│   │   │   │   ├── test_ovs_rpcapi.py\n│   │   │   │   ├── test_ovs_security_group.py\n│   │   │   │   └── test_ovs_tunnel.py\n│   │   │   ├── plumgrid\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_plumgrid_plugin.py\n│   │   │   ├── ryu\n│   │   │   │   ├── fake_ryu.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_ryu_agent.py\n│   │   │   │   ├── test_ryu_db.py\n│   │   │   │   ├── test_ryu_plugin.py\n│   │   │   │   └── test_ryu_security_group.py\n│   │   │   ├── services\n│   │   │   │   ├── agent_loadbalancer\n│   │   │   │   │   ├── agent\n│   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   ├── test_api.py\n│   │   │   │   │   │   ├── test_init.py\n│   │   │   │   │   │   └── test_manager.py\n│   │   │   │   │   ├── driver\n│   │   │   │   │   │   ├── haproxy\n│   │   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   │   ├── test_cfg.py\n│   │   │   │   │   │   │   └── test_namespace_driver.py\n│   │   │   │   │   │   └── __init__.py\n│   │   │   │   │   ├── __init__.py\n│   │   │   │   │   └── test_plugin.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── test_agent_config.py\n│   │   │   ├── test_agent_ext_plugin.py\n│   │   │   ├── test_agent_linux_utils.py\n│   │   │   ├── test_agent_netns_cleanup.py\n│   │   │   ├── test_agent_ovs_cleanup.py\n│   │   │   ├── test_agent_rpc.py\n│   │   │   ├── test_api_api_common.py\n│   │   │   ├── test_api_v2.py\n│   │   │   ├── test_api_v2_resource.py\n│   │   │   ├── test_attributes.py\n│   │   │   ├── test_auth.py\n│   │   │   ├── test_common_utils.py\n│   │   │   ├── test_config.py\n│   │   │   ├── test_db_migration.py\n│   │   │   ├── test_db_plugin.py\n│   │   │   ├── test_db.py\n│   │   │   ├── test_db_rpc_base.py\n│   │   │   ├── test_debug_commands.py\n│   │   │   ├── test_dhcp_agent.py\n│   │   │   ├── test_extension_extended_attribute.py\n│   │   │   ├── test_extension_extraroute.py\n│   │   │   ├── _test_extension_portbindings.py\n│   │   │   ├── test_extension_portsecurity.py\n│   │   │   ├── test_extension_security_group.py\n│   │   │   ├── test_extensions.py\n│   │   │   ├── test_iptables_firewall.py\n│   │   │   ├── test_iptables_manager.py\n│   │   │   ├── test_l3_agent.py\n│   │   │   ├── test_l3_plugin.py\n│   │   │   ├── testlib_api.py\n│   │   │   ├── test_linux_daemon.py\n│   │   │   ├── test_linux_dhcp.py\n│   │   │   ├── test_linux_external_process.py\n│   │   │   ├── test_linux_interface.py\n│   │   │   ├── test_linux_ip_lib.py\n│   │   │   ├── test_loadbalancer_plugin.py\n│   │   │   ├── test_metadata_agent.py\n│   │   │   ├── test_metadata_namespace_proxy.py\n│   │   │   ├── test_policy.py\n│   │   │   ├── test_quantum_context.py\n│   │   │   ├── test_quantum_manager.py\n│   │   │   ├── test_quota_ext.py\n│   │   │   ├── _test_rootwrap_exec.py\n│   │   │   ├── test_rootwrap.py\n│   │   │   ├── test_routerserviceinsertion.py\n│   │   │   ├── test_security_groups_rpc.py\n│   │   │   ├── test_servicetype.py\n│   │   │   └── test_wsgi.py\n│   │   └── var\n│   │       ├── ca.crt\n│   │       ├── certificate.crt\n│   │       └── privatekey.key\n│   ├── version.py\n│   └── wsgi.py\n├── README\n├── run_tests.py\n├── run_tests.sh\n├── setup.cfg\n├── setup.py\n├── TESTING\n├── tools\n│   ├── build_debs.sh\n│   ├── check_i18n.py\n│   ├── check_i18n_test_case.txt\n│   ├── clean.sh\n│   ├── i18n_cfg.py\n│   ├── install_venv_common.py\n│   ├── install_venv.py\n│   ├── patch_tox_venv.py\n│   ├── pip-requires\n│   ├── test-requires\n│   └── with_venv.sh\n└── tox.ini\n</code></pre>\n','','','inherit','open','open','','287-revision-3','','','2013-04-01 19:55:50','2013-04-01 11:55:50','','287','http://blog.wachang.net/2013/04/287-revision-3/','0','revision','','0');");
E_D("replace into `wp_posts` values('292','1','2013-04-01 20:27:16','2013-04-01 12:27:16','<p>以下是我git clone的Quantum的源代码，我简单做一下注释。</p>\n\n<pre><code>root@Compute2:~/quantum# tree\n.\n├── bin #各个组件的启动脚本\n│   ├── quantum-check-nvp-config\n│   ├── quantum-db-manage\n│   ├── quantum-debug\n│   ├── quantum-dhcp-agent\n│   ├── quantum-dhcp-agent-dnsmasq-lease-update\n│   ├── quantum-hyperv-agent\n│   ├── quantum-l3-agent\n│   ├── quantum-lbaas-agent\n│   ├── quantum-linuxbridge-agent\n│   ├── quantum-metadata-agent\n│   ├── quantum-nec-agent\n│   ├── quantum-netns-cleanup\n│   ├── quantum-ns-metadata-proxy\n│   ├── quantum-openvswitch-agent\n│   ├── quantum-ovs-cleanup\n│   ├── quantum-rootwrap\n│   ├── quantum-rpc-zmq-receiver\n│   ├── quantum-ryu-agent\n│   ├── quantum-server\n│   └── quantum-usage-audit\n├── contrib\n│   └── redhat-eventlet.patch\n├── doc#文档目录，已删除，可以用sphix编译\n├── etc#这是Quantum中所有的配置文件例子\n│   ├── api-paste.ini #配置WSGI应用，用于REST API处理\n│   ├── dhcp_agent.ini\n│   ├── init.d\n│   │   └── quantum-server #配置服务脚本，service quantum xxx\n│   ├── l3_agent.ini\n│   ├── lbaas_agent.ini\n│   ├── metadata_agent.ini\n│   ├── policy.json\n│   ├── quantum\n│   │   ├── plugins #都是插件的配置\n│   │   │   ├── bigswitch\n│   │   │   │   └── restproxy.ini\n│   │   │   ├── brocade\n│   │   │   │   └── brocade.ini\n│   │   │   ├── cisco\n│   │   │   │   ├── cisco_plugins.ini\n│   │   │   │   ├── credentials.ini\n│   │   │   │   ├── db_conn.ini\n│   │   │   │   ├── l2network_plugin.ini\n│   │   │   │   └── nexus.ini\n│   │   │   ├── hyperv\n│   │   │   │   └── hyperv_quantum_plugin.ini\n│   │   │   ├── linuxbridge\n│   │   │   │   └── linuxbridge_conf.ini\n│   │   │   ├── metaplugin\n│   │   │   │   └── metaplugin.ini\n│   │   │   ├── midonet\n│   │   │   │   └── midonet.ini\n│   │   │   ├── nec\n│   │   │   │   └── nec.ini\n│   │   │   ├── nicira\n│   │   │   │   └── nvp.ini\n│   │   │   ├── openvswitch\n│   │   │   │   └── ovs_quantum_plugin.ini\n│   │   │   ├── plumgrid\n│   │   │   │   └── plumgrid.ini\n│   │   │   └── ryu\n│   │   │       └── ryu.ini\n│   │   └── rootwrap.d\n│   │       ├── debug.filters\n│   │       ├── dhcp.filters\n│   │       ├── iptables-firewall.filters\n│   │       ├── l3.filters\n│   │       ├── lbaas-haproxy.filters\n│   │       ├── linuxbridge-plugin.filters\n│   │       ├── nec-plugin.filters\n│   │       ├── openvswitch-plugin.filters\n│   │       └── ryu-plugin.filters\n│   ├── quantum.conf #quantum配置文件\n│   └── rootwrap.conf\n├── HACKING.rst\n├── LICENSE\n├── MANIFEST.in\n├── openstack-common.conf\n├── quantum\n│   ├── agent\n│   │   ├── common\n│   │   │   ├── config.py#注册agent通用的选项，主要是agent_state的选项\n│   │   │   └── __init__.py\n│   │   ├── dhcp_agent.py\n│   │   ├── firewall.py\n│   │   ├── __init__.py\n│   │   ├── l3_agent.py\n│   │   ├── linux#涉及linux操作的库，比如设置iptables，获得MAC地址等\n│   │   │   ├── daemon.py\n│   │   │   ├── dhcp.py\n│   │   │   ├── external_process.py\n│   │   │   ├── __init__.py\n│   │   │   ├── interface.py\n│   │   │   ├── ip_lib.py\n│   │   │   ├── iptables_firewall.py\n│   │   │   ├── iptables_manager.py\n│   │   │   ├── ovs_lib.py\n│   │   │   └── utils.py\n│   │   ├── metadata\n│   │   │   ├── agent.py\n│   │   │   ├── __init__.py\n│   │   │   └── namespace_proxy.py\n│   │   ├── netns_cleanup_util.py\n│   │   ├── ovs_cleanup_util.py\n│   │   ├── rpc.py#Agent端通过RPC向Plugin通信的实现\n│   │   └── securitygroups_rpc.py\n│   ├── api\n│   │   ├── api_common.py\n│   │   ├── extensions.py\n│   │   ├── __init__.py\n│   │   ├── rpc\n│   │   │   ├── agentnotifiers\n│   │   │   │   ├── dhcp_rpc_agent_api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── l3_rpc_agent_api.py\n│   │   │   └── __init__.py\n│   │   ├── v2\n│   │   │   ├── attributes.py\n│   │   │   ├── base.py\n│   │   │   ├── __init__.py\n│   │   │   ├── resource.py\n│   │   │   └── router.py\n│   │   ├── versions.py\n│   │   └── views\n│   │       ├── __init__.py\n│   │       └── versions.py\n│   ├── auth.py\n│   ├── common\n│   │   ├── config.py\n│   │   ├── constants.py\n│   │   ├── exceptions.py\n│   │   ├── __init__.py\n│   │   ├── rpc.py\n│   │   ├── test_lib.py\n│   │   ├── topics.py\n│   │   └── utils.py\n│   ├── context.py\n│   ├── db\n│   │   ├── agentschedulers_db.py\n│   │   ├── agents_db.py\n│   │   ├── api.py\n│   │   ├── db_base_plugin_v2.py\n│   │   ├── dhcp_rpc_base.py\n│   │   ├── extraroute_db.py\n│   │   ├── __init__.py\n│   │   ├── l3_db.py\n│   │   ├── l3_rpc_base.py\n│   │   ├── loadbalancer\n│   │   │   ├── __init__.py\n│   │   │   └── loadbalancer_db.py\n│   │   ├── migration\n│   │   │   ├── alembic.ini\n│   │   │   ├── alembic_migrations\n│   │   │   │   ├── common_ext_ops.py\n│   │   │   │   ├── env.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── script.py.mako\n│   │   │   │   └── versions\n│   │   │   │       ├── 1149d7de0cfa_port_security.py\n│   │   │   │       ├── 1341ed32cc1e_nvp_netbinding_update.py\n│   │   │   │       ├── 1b693c095aa3_quota_ext_db_grizzly.py\n│   │   │   │       ├── 1c33fa3cd1a1_extra_route_config.py\n│   │   │   │       ├── 1d76643bcec4_nvp_netbinding.py\n│   │   │   │       ├── 2a6d0b51f4bb_cisco_plugin_cleanup.py\n│   │   │   │       ├── 2c4af419145b_l3_support.py\n│   │   │   │       ├── 363468ac592c_nvp_network_gw.py\n│   │   │   │       ├── 38335592a0dc_nvp_portmap.py\n│   │   │   │       ├── 3b54bf9e29f7_nec_plugin_sharednet.py\n│   │   │   │       ├── 3cb5d900c5de_security_groups.py\n│   │   │   │       ├── 45680af419f9_nvp_qos.py\n│   │   │   │       ├── 4692d074d587_agent_scheduler.py\n│   │   │   │       ├── 48b6f43f7471_service_type.py\n│   │   │   │       ├── 49332180ca96_ryu_plugin_update.py\n│   │   │   │       ├── 511471cc46b_agent_ext_model_supp.py\n│   │   │   │       ├── 54c2c487e913_lbaas.py\n│   │   │   │       ├── 5a875d0e5c_ryu.py\n│   │   │   │       ├── folsom_initial.py\n│   │   │   │       ├── grizzly_release.py\n│   │   │   │       └── README\n│   │   │   ├── cli.py\n│   │   │   ├── __init__.py\n│   │   │   └── README\n│   │   ├── model_base.py\n│   │   ├── models_v2.py\n│   │   ├── portsecurity_db.py\n│   │   ├── quota_db.py\n│   │   ├── routedserviceinsertion_db.py\n│   │   ├── routerservicetype_db.py\n│   │   ├── securitygroups_db.py\n│   │   ├── securitygroups_rpc_base.py\n│   │   ├── servicetype_db.py\n│   │   └── sqlalchemyutils.py\n│   ├── debug\n│   │   ├── commands.py\n│   │   ├── debug_agent.py\n│   │   ├── __init__.py\n│   │   ├── README\n│   │   └── shell.py\n│   ├── extensions\n│   │   ├── agent.py\n│   │   ├── agentscheduler.py\n│   │   ├── extraroute.py\n│   │   ├── flavor.py\n│   │   ├── __init__.py\n│   │   ├── l3.py\n│   │   ├── loadbalancer.py\n│   │   ├── portbindings.py\n│   │   ├── portsecurity.py\n│   │   ├── providernet.py\n│   │   ├── quotasv2.py\n│   │   ├── routedserviceinsertion.py\n│   │   ├── routerservicetype.py\n│   │   ├── securitygroup.py\n│   │   └── servicetype.py\n│   ├── __init__.py\n│   ├── locale\n│   │   ├── ja\n│   │   │   └── LC_MESSAGES\n│   │   │       └── quantum.po\n│   │   └── quantum.pot\n│   ├── manager.py\n│   ├── openstack\n│   │   ├── common\n│   │   │   ├── context.py\n│   │   │   ├── eventlet_backdoor.py\n│   │   │   ├── exception.py\n│   │   │   ├── excutils.py\n│   │   │   ├── fileutils.py\n│   │   │   ├── gettextutils.py\n│   │   │   ├── importutils.py\n│   │   │   ├── __init__.py\n│   │   │   ├── jsonutils.py\n│   │   │   ├── local.py\n│   │   │   ├── lockutils.py\n│   │   │   ├── log.py\n│   │   │   ├── loopingcall.py\n│   │   │   ├── network_utils.py\n│   │   │   ├── notifier\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── log_notifier.py\n│   │   │   │   ├── no_op_notifier.py\n│   │   │   │   ├── rabbit_notifier.py\n│   │   │   │   ├── rpc_notifier2.py\n│   │   │   │   ├── rpc_notifier.py\n│   │   │   │   └── test_notifier.py\n│   │   │   ├── periodic_task.py\n│   │   │   ├── policy.py\n│   │   │   ├── processutils.py\n│   │   │   ├── rpc\n│   │   │   │   ├── amqp.py\n│   │   │   │   ├── common.py\n│   │   │   │   ├── dispatcher.py\n│   │   │   │   ├── impl_fake.py\n│   │   │   │   ├── impl_kombu.py\n│   │   │   │   ├── impl_qpid.py\n│   │   │   │   ├── impl_zmq.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── matchmaker.py\n│   │   │   │   ├── matchmaker_redis.py\n│   │   │   │   ├── proxy.py\n│   │   │   │   └── service.py\n│   │   │   ├── service.py\n│   │   │   ├── setup.py\n│   │   │   ├── threadgroup.py\n│   │   │   ├── timeutils.py\n│   │   │   ├── uuidutils.py\n│   │   │   └── version.py\n│   │   └── __init__.py\n│   ├── plugins\n│   │   ├── bigswitch\n│   │   │   ├── __init__.py\n│   │   │   ├── plugin.py\n│   │   │   ├── README\n│   │   │   ├── tests\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_server.py\n│   │   │   ├── vcsversion.py\n│   │   │   └── version.py\n│   │   ├── brocade\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nos\n│   │   │   │   ├── fake_nosdriver.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── nctemplates.py\n│   │   │   │   └── nosdriver.py\n│   │   │   ├── QuantumPlugin.py\n│   │   │   ├── README.md\n│   │   │   ├── tests\n│   │   │   │   ├── noscli.py\n│   │   │   │   ├── nostest.py\n│   │   │   │   └── README\n│   │   │   └── vlanbm.py\n│   │   ├── cisco\n│   │   │   ├── common\n│   │   │   │   ├── cisco_configparser.py\n│   │   │   │   ├── cisco_constants.py\n│   │   │   │   ├── cisco_credentials_v2.py\n│   │   │   │   ├── cisco_exceptions.py\n│   │   │   │   ├── cisco_faults.py\n│   │   │   │   ├── cisco_utils.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db.py\n│   │   │   │   ├── l2network_models.py\n│   │   │   │   ├── models.py\n│   │   │   │   ├── network_db_v2.py\n│   │   │   │   ├── network_models_v2.py\n│   │   │   │   ├── nexus_db_v2.py\n│   │   │   │   └── nexus_models_v2.py\n│   │   │   ├── extensions\n│   │   │   │   ├── credential.py\n│   │   │   │   ├── _credential_view.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── qos.py\n│   │   │   │   └── _qos_view.py\n│   │   │   ├── __init__.py\n│   │   │   ├── l2device_plugin_base.py\n│   │   │   ├── l2network_plugin_configuration.py\n│   │   │   ├── models\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── virt_phy_sw_v2.py\n│   │   │   ├── network_plugin.py\n│   │   │   ├── nexus\n│   │   │   │   ├── cisco_nexus_configuration.py\n│   │   │   │   ├── cisco_nexus_network_driver_v2.py\n│   │   │   │   ├── cisco_nexus_plugin_v2.py\n│   │   │   │   ├── cisco_nexus_snippets.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── README\n│   │   │   ├── run_tests.py\n│   │   │   └── tests\n│   │   │       ├── __init__.py\n│   │   │       └── unit\n│   │   │           ├── api-paste.ini.cisco.test\n│   │   │           ├── __init__.py\n│   │   │           ├── quantum.conf.cisco.test\n│   │   │           ├── test_cisco_extension.py\n│   │   │           ├── test_database.py\n│   │   │           └── v2\n│   │   │               ├── api-paste.ini.cisco.test\n│   │   │               ├── __init__.py\n│   │   │               ├── nexus\n│   │   │               │   ├── fake_nexus_driver.py\n│   │   │               │   └── __init__.py\n│   │   │               ├── quantumv2.conf.cisco.test\n│   │   │               └── test_api_v2.py\n│   │   ├── common\n│   │   │   ├── constants.py\n│   │   │   └── __init__.py\n│   │   ├── hyperv\n│   │   │   ├── agent\n│   │   │   │   ├── hyperv_quantum_agent.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── utils.py\n│   │   │   ├── agent_notifier_api.py\n│   │   │   ├── common\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db.py\n│   │   │   ├── hyperv_quantum_plugin.py\n│   │   │   ├── __init__.py\n│   │   │   ├── model.py\n│   │   │   └── rpc_callbacks.py\n│   │   ├── __init__.py\n│   │   ├── linuxbridge\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── linuxbridge_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db_v2.py\n│   │   │   │   └── l2network_models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── lb_quantum_plugin.py\n│   │   │   └── README\n│   │   ├── metaplugin\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── meta_db_v2.py\n│   │   │   ├── meta_models_v2.py\n│   │   │   ├── meta_quantum_plugin.py\n│   │   │   ├── proxy_quantum_plugin.py\n│   │   │   ├── README\n│   │   │   └── run_tests.py\n│   │   ├── midonet\n│   │   │   ├── config.py\n│   │   │   ├── __init__.py\n│   │   │   ├── midonet_lib.py\n│   │   │   └── plugin.py\n│   │   ├── nec\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── nec_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── exceptions.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ofc_client.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── models.py\n│   │   │   │   └── nec_plugin_base.py\n│   │   │   ├── drivers\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── pfc.py\n│   │   │   │   └── trema.py\n│   │   │   ├── extensions\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── packetfilter.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nec_plugin.py\n│   │   │   ├── ofc_driver_base.py\n│   │   │   ├── ofc_manager.py\n│   │   │   └── README\n│   │   ├── nicira\n│   │   │   ├── __init__.py\n│   │   │   └── nicira_nvp_plugin\n│   │   │       ├── api_client\n│   │   │       │   ├── client_eventlet.py\n│   │   │       │   ├── client.py\n│   │   │       │   ├── common.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── request_eventlet.py\n│   │   │       │   └── request.py\n│   │   │       ├── check_nvp_config.py\n│   │   │       ├── common\n│   │   │       │   ├── config.py\n│   │   │       │   ├── exceptions.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── metadata_access.py\n│   │   │       │   └── securitygroups.py\n│   │   │       ├── extensions\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── nvp_networkgw.py\n│   │   │       │   └── nvp_qos.py\n│   │   │       ├── __init__.py\n│   │   │       ├── nicira_db.py\n│   │   │       ├── nicira_models.py\n│   │   │       ├── nicira_networkgw_db.py\n│   │   │       ├── nicira_qos_db.py\n│   │   │       ├── NvpApiClient.py\n│   │   │       ├── nvp_cluster.py\n│   │   │       ├── nvplib.py\n│   │   │       ├── nvp_plugin_version.py\n│   │   │       ├── QuantumPlugin.py\n│   │   │       └── README\n│   │   ├── openvswitch\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── ovs_quantum_agent.py#agent主文件\n│   │   │   │   ├── ovs-quantum-agent-xs_xcp.spec\n│   │   │   │   └── xenserver_install.sh\n│   │   │   ├── common\n│   │   │   │   ├── config.py#ovs插件注册选项，用于读取配置文件\n│   │   │   │   ├── constants.py#一些常量\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── Makefile\n│   │   │   ├── ovs_db_v2.py\n│   │   │   ├── ovs_models_v2.py#数据库表定义与sqlalchemy的类的映射\n│   │   │   ├── ovs_quantum_plugin.py#插件部分主程序\n│   │   │   └── README\n│   │   ├── plumgrid\n│   │   │   ├── common\n│   │   │   │   ├── exceptions.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── plumgrid_nos_plugin\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── plugin_ver.py\n│   │   │   │   ├── plumgrid_nos_snippets.py\n│   │   │   │   ├── plumgrid_plugin.py\n│   │   │   │   └── rest_connection.py\n│   │   │   └── README\n│   │   ├── ryu\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ryu_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api_v2.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── README\n│   │   │   └── ryu_quantum_plugin.py\n│   │   └── services\n│   │       ├── agent_loadbalancer\n│   │       │   ├── agent\n│   │       │   │   ├── api.py\n│   │       │   │   ├── __init__.py\n│   │       │   │   └── manager.py\n│   │       │   ├── constants.py\n│   │       │   ├── drivers\n│   │       │   │   ├── haproxy\n│   │       │   │   │   ├── cfg.py\n│   │       │   │   │   ├── __init__.py\n│   │       │   │   │   └── namespace_driver.py\n│   │       │   │   └── __init__.py\n│   │       │   ├── __init__.py\n│   │       │   └── plugin.py\n│   │       ├── __init__.py\n│   │       └── service_base.py\n│   ├── policy.py\n│   ├── quantum_plugin_base_v2.py\n│   ├── quota.py\n│   ├── rootwrap\n│   │   ├── filters.py\n│   │   ├── __init__.py\n│   │   └── wrapper.py\n│   ├── scheduler\n│   │   ├── dhcp_agent_scheduler.py\n│   │   ├── __init__.py\n│   │   └── l3_agent_scheduler.py\n│   ├── server\n│   │   └── __init__.py\n│   ├── service.py\n│   ├── tests\n│   │   ├── base.py\n│   │   ├── etc\n│   │   │   ├── api-paste.ini.test\n│   │   │   ├── quantum.conf.test\n│   │   │   └── rootwrap.d\n│   │   │       └── quantum.test.filters\n│   │   ├── __init__.py\n│   │   ├── unit\n│   │   │   ├── bigswitch\n│   │   │   │   ├── etc\n│   │   │   │   │   └── restproxy.ini.test\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_restproxy_plugin.py\n│   │   │   │   └── test_router_db.py\n│   │   │   ├── brocade\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_brocade_db.py\n│   │   │   │   ├── test_brocade_plugin.py\n│   │   │   │   └── test_brocade_vlan.py\n│   │   │   ├── cisco\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_network_plugin.py\n│   │   │   │   └── test_nexus_plugin.py\n│   │   │   ├── database_stubs.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── loadbalancer\n│   │   │   │       ├── __init__.py\n│   │   │   │       └── test_db_loadbalancer.py\n│   │   │   ├── dummy_plugin.py\n│   │   │   ├── extensions\n│   │   │   │   ├── extendedattribute.py\n│   │   │   │   ├── extensionattribute.py\n│   │   │   │   ├── foxinsocks.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── v2attributes.py\n│   │   │   ├── extension_stubs.py\n│   │   │   ├── hyperv\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_hyperv_quantum_agent.py\n│   │   │   │   ├── test_hyperv_quantum_plugin.py\n│   │   │   │   └── test_hyperv_rpcapi.py\n│   │   │   ├── __init__.py\n│   │   │   ├── linuxbridge\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_lb_db.py\n│   │   │   │   ├── test_lb_quantum_agent.py\n│   │   │   │   ├── test_lb_security_group.py\n│   │   │   │   ├── test_linuxbridge_plugin.py\n│   │   │   │   └── test_rpcapi.py\n│   │   │   ├── metaplugin\n│   │   │   │   ├── fake_plugin.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_basic.py\n│   │   │   │   └── test_metaplugin.py\n│   │   │   ├── midonet\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_midonet_lib.py\n│   │   │   │   └── test_midonet_plugin.py\n│   │   │   ├── nec\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── stub_ofc_driver.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_config.py\n│   │   │   │   ├── test_db.py\n│   │   │   │   ├── test_nec_plugin.py\n│   │   │   │   ├── test_ofc_manager.py\n│   │   │   │   ├── test_pfc_driver.py\n│   │   │   │   ├── test_security_group.py\n│   │   │   │   └── test_trema_driver.py\n│   │   │   ├── nicira\n│   │   │   │   ├── etc\n│   │   │   │   │   ├── fake_get_gwservice.json\n│   │   │   │   │   ├── fake_get_lrouter.json\n│   │   │   │   │   ├── fake_get_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_get_lrouter_lport.json\n│   │   │   │   │   ├── fake_get_lrouter_nat.json\n│   │   │   │   │   ├── fake_get_lswitch.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_att.json\n│   │   │   │   │   ├── fake_get_lswitch_lport.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_status.json\n│   │   │   │   │   ├── fake_post_gwservice.json\n│   │   │   │   │   ├── fake_post_lqueue.json\n│   │   │   │   │   ├── fake_post_lrouter.json\n│   │   │   │   │   ├── fake_post_lrouter_lport.json\n│   │   │   │   │   ├── fake_post_lrouter_nat.json\n│   │   │   │   │   ├── fake_post_lswitch.json\n│   │   │   │   │   ├── fake_post_lswitch_lport.json\n│   │   │   │   │   ├── fake_post_security_profile.json\n│   │   │   │   │   ├── fake_put_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_put_lswitch_lport_att.json\n│   │   │   │   │   └── nvp.ini.test\n│   │   │   │   ├── fake_nvpapiclient.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_networkgw.py\n│   │   │   │   ├── test_nicira_plugin.py\n│   │   │   │   ├── test_nvp_api_common.py\n│   │   │   │   ├── test_nvp_api_request_eventlet.py\n│   │   │   │   ├── test_nvp_api_request.py\n│   │   │   │   └── test_nvplib.py\n│   │   │   ├── openvswitch\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_openvswitch_plugin.py\n│   │   │   │   ├── test_ovs_db.py\n│   │   │   │   ├── test_ovs_defaults.py\n│   │   │   │   ├── test_ovs_lib.py\n│   │   │   │   ├── test_ovs_quantum_agent.py\n│   │   │   │   ├── test_ovs_rpcapi.py\n│   │   │   │   ├── test_ovs_security_group.py\n│   │   │   │   └── test_ovs_tunnel.py\n│   │   │   ├── plumgrid\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_plumgrid_plugin.py\n│   │   │   ├── ryu\n│   │   │   │   ├── fake_ryu.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_ryu_agent.py\n│   │   │   │   ├── test_ryu_db.py\n│   │   │   │   ├── test_ryu_plugin.py\n│   │   │   │   └── test_ryu_security_group.py\n│   │   │   ├── services\n│   │   │   │   ├── agent_loadbalancer\n│   │   │   │   │   ├── agent\n│   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   ├── test_api.py\n│   │   │   │   │   │   ├── test_init.py\n│   │   │   │   │   │   └── test_manager.py\n│   │   │   │   │   ├── driver\n│   │   │   │   │   │   ├── haproxy\n│   │   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   │   ├── test_cfg.py\n│   │   │   │   │   │   │   └── test_namespace_driver.py\n│   │   │   │   │   │   └── __init__.py\n│   │   │   │   │   ├── __init__.py\n│   │   │   │   │   └── test_plugin.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── test_agent_config.py\n│   │   │   ├── test_agent_ext_plugin.py\n│   │   │   ├── test_agent_linux_utils.py\n│   │   │   ├── test_agent_netns_cleanup.py\n│   │   │   ├── test_agent_ovs_cleanup.py\n│   │   │   ├── test_agent_rpc.py\n│   │   │   ├── test_api_api_common.py\n│   │   │   ├── test_api_v2.py\n│   │   │   ├── test_api_v2_resource.py\n│   │   │   ├── test_attributes.py\n│   │   │   ├── test_auth.py\n│   │   │   ├── test_common_utils.py\n│   │   │   ├── test_config.py\n│   │   │   ├── test_db_migration.py\n│   │   │   ├── test_db_plugin.py\n│   │   │   ├── test_db.py\n│   │   │   ├── test_db_rpc_base.py\n│   │   │   ├── test_debug_commands.py\n│   │   │   ├── test_dhcp_agent.py\n│   │   │   ├── test_extension_extended_attribute.py\n│   │   │   ├── test_extension_extraroute.py\n│   │   │   ├── _test_extension_portbindings.py\n│   │   │   ├── test_extension_portsecurity.py\n│   │   │   ├── test_extension_security_group.py\n│   │   │   ├── test_extensions.py\n│   │   │   ├── test_iptables_firewall.py\n│   │   │   ├── test_iptables_manager.py\n│   │   │   ├── test_l3_agent.py\n│   │   │   ├── test_l3_plugin.py\n│   │   │   ├── testlib_api.py\n│   │   │   ├── test_linux_daemon.py\n│   │   │   ├── test_linux_dhcp.py\n│   │   │   ├── test_linux_external_process.py\n│   │   │   ├── test_linux_interface.py\n│   │   │   ├── test_linux_ip_lib.py\n│   │   │   ├── test_loadbalancer_plugin.py\n│   │   │   ├── test_metadata_agent.py\n│   │   │   ├── test_metadata_namespace_proxy.py\n│   │   │   ├── test_policy.py\n│   │   │   ├── test_quantum_context.py\n│   │   │   ├── test_quantum_manager.py\n│   │   │   ├── test_quota_ext.py\n│   │   │   ├── _test_rootwrap_exec.py\n│   │   │   ├── test_rootwrap.py\n│   │   │   ├── test_routerserviceinsertion.py\n│   │   │   ├── test_security_groups_rpc.py\n│   │   │   ├── test_servicetype.py\n│   │   │   └── test_wsgi.py\n│   │   └── var\n│   │       ├── ca.crt\n│   │       ├── certificate.crt\n│   │       └── privatekey.key\n│   ├── version.py\n│   └── wsgi.py\n├── README\n├── run_tests.py\n├── run_tests.sh\n├── setup.cfg\n├── setup.py\n├── TESTING\n├── tools\n│   ├── build_debs.sh\n│   ├── check_i18n.py\n│   ├── check_i18n_test_case.txt\n│   ├── clean.sh\n│   ├── i18n_cfg.py\n│   ├── install_venv_common.py\n│   ├── install_venv.py\n│   ├── patch_tox_venv.py\n│   ├── pip-requires\n│   ├── test-requires\n│   └── with_venv.sh\n└── tox.ini\n</code></pre>\n','','','inherit','open','open','','287-revision-4','','','2013-04-01 20:27:16','2013-04-01 12:27:16','','287','http://blog.wachang.net/2013/04/287-revision-4/','0','revision','','0');");
E_D("replace into `wp_posts` values('293','1','2013-04-01 20:28:15','2013-04-01 12:28:15','<p>以下是我git clone的Quantum的源代码，我简单做一下注释。</p>\n\n<pre><code>root@Compute2:~/quantum# tree\n.\n├── bin #各个组件的启动脚本\n│   ├── quantum-check-nvp-config\n│   ├── quantum-db-manage\n│   ├── quantum-debug\n│   ├── quantum-dhcp-agent\n│   ├── quantum-dhcp-agent-dnsmasq-lease-update\n│   ├── quantum-hyperv-agent\n│   ├── quantum-l3-agent\n│   ├── quantum-lbaas-agent\n│   ├── quantum-linuxbridge-agent\n│   ├── quantum-metadata-agent\n│   ├── quantum-nec-agent\n│   ├── quantum-netns-cleanup\n│   ├── quantum-ns-metadata-proxy\n│   ├── quantum-openvswitch-agent\n│   ├── quantum-ovs-cleanup\n│   ├── quantum-rootwrap\n│   ├── quantum-rpc-zmq-receiver\n│   ├── quantum-ryu-agent\n│   ├── quantum-server\n│   └── quantum-usage-audit\n├── contrib\n│   └── redhat-eventlet.patch\n├── doc#文档目录，已删除，可以用sphix编译\n├── etc#这是Quantum中所有的配置文件例子\n│   ├── api-paste.ini #配置WSGI应用，用于REST API处理\n│   ├── dhcp_agent.ini\n│   ├── init.d\n│   │   └── quantum-server #配置服务脚本，service quantum xxx\n│   ├── l3_agent.ini\n│   ├── lbaas_agent.ini\n│   ├── metadata_agent.ini\n│   ├── policy.json\n│   ├── quantum\n│   │   ├── plugins #都是插件的配置\n│   │   │   ├── bigswitch\n│   │   │   │   └── restproxy.ini\n│   │   │   ├── brocade\n│   │   │   │   └── brocade.ini\n│   │   │   ├── cisco\n│   │   │   │   ├── cisco_plugins.ini\n│   │   │   │   ├── credentials.ini\n│   │   │   │   ├── db_conn.ini\n│   │   │   │   ├── l2network_plugin.ini\n│   │   │   │   └── nexus.ini\n│   │   │   ├── hyperv\n│   │   │   │   └── hyperv_quantum_plugin.ini\n│   │   │   ├── linuxbridge\n│   │   │   │   └── linuxbridge_conf.ini\n│   │   │   ├── metaplugin\n│   │   │   │   └── metaplugin.ini\n│   │   │   ├── midonet\n│   │   │   │   └── midonet.ini\n│   │   │   ├── nec\n│   │   │   │   └── nec.ini\n│   │   │   ├── nicira\n│   │   │   │   └── nvp.ini\n│   │   │   ├── openvswitch\n│   │   │   │   └── ovs_quantum_plugin.ini\n│   │   │   ├── plumgrid\n│   │   │   │   └── plumgrid.ini\n│   │   │   └── ryu\n│   │   │       └── ryu.ini\n│   │   └── rootwrap.d\n│   │       ├── debug.filters\n│   │       ├── dhcp.filters\n│   │       ├── iptables-firewall.filters\n│   │       ├── l3.filters\n│   │       ├── lbaas-haproxy.filters\n│   │       ├── linuxbridge-plugin.filters\n│   │       ├── nec-plugin.filters\n│   │       ├── openvswitch-plugin.filters\n│   │       └── ryu-plugin.filters\n│   ├── quantum.conf #quantum配置文件\n│   └── rootwrap.conf\n├── HACKING.rst\n├── LICENSE\n├── MANIFEST.in\n├── openstack-common.conf\n├── quantum\n│   ├── agent\n│   │   ├── common\n│   │   │   ├── config.py#注册agent通用的选项，主要是agent_state的选项\n│   │   │   └── __init__.py\n│   │   ├── dhcp_agent.py\n│   │   ├── firewall.py\n│   │   ├── __init__.py\n│   │   ├── l3_agent.py\n│   │   ├── linux#涉及linux操作的库，比如设置iptables，获得MAC地址等\n│   │   │   ├── daemon.py\n│   │   │   ├── dhcp.py\n│   │   │   ├── external_process.py\n│   │   │   ├── __init__.py\n│   │   │   ├── interface.py\n│   │   │   ├── ip_lib.py\n│   │   │   ├── iptables_firewall.py\n│   │   │   ├── iptables_manager.py\n│   │   │   ├── ovs_lib.py\n│   │   │   └── utils.py\n│   │   ├── metadata\n│   │   │   ├── agent.py\n│   │   │   ├── __init__.py\n│   │   │   └── namespace_proxy.py\n│   │   ├── netns_cleanup_util.py\n│   │   ├── ovs_cleanup_util.py\n│   │   ├── rpc.py#Agent端通过RPC向Plugin通信的实现\n│   │   └── securitygroups_rpc.py\n│   ├── api\n│   │   ├── api_common.py\n│   │   ├── extensions.py\n│   │   ├── __init__.py\n│   │   ├── rpc\n│   │   │   ├── agentnotifiers\n│   │   │   │   ├── dhcp_rpc_agent_api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── l3_rpc_agent_api.py\n│   │   │   └── __init__.py\n│   │   ├── v2\n│   │   │   ├── attributes.py\n│   │   │   ├── base.py\n│   │   │   ├── __init__.py\n│   │   │   ├── resource.py\n│   │   │   └── router.py\n│   │   ├── versions.py\n│   │   └── views\n│   │       ├── __init__.py\n│   │       └── versions.py\n│   ├── auth.py\n│   ├── common\n│   │   ├── config.py\n│   │   ├── constants.py\n│   │   ├── exceptions.py\n│   │   ├── __init__.py\n│   │   ├── rpc.py\n│   │   ├── test_lib.py\n│   │   ├── topics.py\n│   │   └── utils.py\n│   ├── context.py\n│   ├── db\n│   │   ├── agentschedulers_db.py\n│   │   ├── agents_db.py\n│   │   ├── api.py\n│   │   ├── db_base_plugin_v2.py\n│   │   ├── dhcp_rpc_base.py\n│   │   ├── extraroute_db.py\n│   │   ├── __init__.py\n│   │   ├── l3_db.py\n│   │   ├── l3_rpc_base.py\n│   │   ├── loadbalancer\n│   │   │   ├── __init__.py\n│   │   │   └── loadbalancer_db.py\n│   │   ├── migration\n│   │   │   ├── alembic.ini\n│   │   │   ├── alembic_migrations\n│   │   │   │   ├── common_ext_ops.py\n│   │   │   │   ├── env.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── script.py.mako\n│   │   │   │   └── versions\n│   │   │   │       ├── 1149d7de0cfa_port_security.py\n│   │   │   │       ├── 1341ed32cc1e_nvp_netbinding_update.py\n│   │   │   │       ├── 1b693c095aa3_quota_ext_db_grizzly.py\n│   │   │   │       ├── 1c33fa3cd1a1_extra_route_config.py\n│   │   │   │       ├── 1d76643bcec4_nvp_netbinding.py\n│   │   │   │       ├── 2a6d0b51f4bb_cisco_plugin_cleanup.py\n│   │   │   │       ├── 2c4af419145b_l3_support.py\n│   │   │   │       ├── 363468ac592c_nvp_network_gw.py\n│   │   │   │       ├── 38335592a0dc_nvp_portmap.py\n│   │   │   │       ├── 3b54bf9e29f7_nec_plugin_sharednet.py\n│   │   │   │       ├── 3cb5d900c5de_security_groups.py\n│   │   │   │       ├── 45680af419f9_nvp_qos.py\n│   │   │   │       ├── 4692d074d587_agent_scheduler.py\n│   │   │   │       ├── 48b6f43f7471_service_type.py\n│   │   │   │       ├── 49332180ca96_ryu_plugin_update.py\n│   │   │   │       ├── 511471cc46b_agent_ext_model_supp.py\n│   │   │   │       ├── 54c2c487e913_lbaas.py\n│   │   │   │       ├── 5a875d0e5c_ryu.py\n│   │   │   │       ├── folsom_initial.py\n│   │   │   │       ├── grizzly_release.py\n│   │   │   │       └── README\n│   │   │   ├── cli.py\n│   │   │   ├── __init__.py\n│   │   │   └── README\n│   │   ├── model_base.py\n│   │   ├── models_v2.py\n│   │   ├── portsecurity_db.py\n│   │   ├── quota_db.py\n│   │   ├── routedserviceinsertion_db.py\n│   │   ├── routerservicetype_db.py\n│   │   ├── securitygroups_db.py\n│   │   ├── securitygroups_rpc_base.py\n│   │   ├── servicetype_db.py\n│   │   └── sqlalchemyutils.py\n│   ├── debug\n│   │   ├── commands.py\n│   │   ├── debug_agent.py\n│   │   ├── __init__.py\n│   │   ├── README\n│   │   └── shell.py\n│   ├── extensions\n│   │   ├── agent.py\n│   │   ├── agentscheduler.py\n│   │   ├── extraroute.py\n│   │   ├── flavor.py\n│   │   ├── __init__.py\n│   │   ├── l3.py\n│   │   ├── loadbalancer.py\n│   │   ├── portbindings.py\n│   │   ├── portsecurity.py\n│   │   ├── providernet.py\n│   │   ├── quotasv2.py\n│   │   ├── routedserviceinsertion.py\n│   │   ├── routerservicetype.py\n│   │   ├── securitygroup.py\n│   │   └── servicetype.py\n│   ├── __init__.py\n│   ├── locale\n│   │   ├── ja\n│   │   │   └── LC_MESSAGES\n│   │   │       └── quantum.po\n│   │   └── quantum.pot\n│   ├── manager.py\n│   ├── openstack\n│   │   ├── common\n│   │   │   ├── context.py\n│   │   │   ├── eventlet_backdoor.py\n│   │   │   ├── exception.py\n│   │   │   ├── excutils.py\n│   │   │   ├── fileutils.py\n│   │   │   ├── gettextutils.py\n│   │   │   ├── importutils.py\n│   │   │   ├── __init__.py\n│   │   │   ├── jsonutils.py\n│   │   │   ├── local.py\n│   │   │   ├── lockutils.py\n│   │   │   ├── log.py\n│   │   │   ├── loopingcall.py\n│   │   │   ├── network_utils.py\n│   │   │   ├── notifier\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── log_notifier.py\n│   │   │   │   ├── no_op_notifier.py\n│   │   │   │   ├── rabbit_notifier.py\n│   │   │   │   ├── rpc_notifier2.py\n│   │   │   │   ├── rpc_notifier.py\n│   │   │   │   └── test_notifier.py\n│   │   │   ├── periodic_task.py\n│   │   │   ├── policy.py\n│   │   │   ├── processutils.py\n│   │   │   ├── rpc\n│   │   │   │   ├── amqp.py\n│   │   │   │   ├── common.py\n│   │   │   │   ├── dispatcher.py\n│   │   │   │   ├── impl_fake.py\n│   │   │   │   ├── impl_kombu.py\n│   │   │   │   ├── impl_qpid.py\n│   │   │   │   ├── impl_zmq.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── matchmaker.py\n│   │   │   │   ├── matchmaker_redis.py\n│   │   │   │   ├── proxy.py\n│   │   │   │   └── service.py\n│   │   │   ├── service.py\n│   │   │   ├── setup.py\n│   │   │   ├── threadgroup.py\n│   │   │   ├── timeutils.py\n│   │   │   ├── uuidutils.py\n│   │   │   └── version.py\n│   │   └── __init__.py\n│   ├── plugins\n│   │   ├── bigswitch\n│   │   │   ├── __init__.py\n│   │   │   ├── plugin.py\n│   │   │   ├── README\n│   │   │   ├── tests\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_server.py\n│   │   │   ├── vcsversion.py\n│   │   │   └── version.py\n│   │   ├── brocade\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nos\n│   │   │   │   ├── fake_nosdriver.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── nctemplates.py\n│   │   │   │   └── nosdriver.py\n│   │   │   ├── QuantumPlugin.py\n│   │   │   ├── README.md\n│   │   │   ├── tests\n│   │   │   │   ├── noscli.py\n│   │   │   │   ├── nostest.py\n│   │   │   │   └── README\n│   │   │   └── vlanbm.py\n│   │   ├── cisco\n│   │   │   ├── common\n│   │   │   │   ├── cisco_configparser.py\n│   │   │   │   ├── cisco_constants.py\n│   │   │   │   ├── cisco_credentials_v2.py\n│   │   │   │   ├── cisco_exceptions.py\n│   │   │   │   ├── cisco_faults.py\n│   │   │   │   ├── cisco_utils.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db.py\n│   │   │   │   ├── l2network_models.py\n│   │   │   │   ├── models.py\n│   │   │   │   ├── network_db_v2.py\n│   │   │   │   ├── network_models_v2.py\n│   │   │   │   ├── nexus_db_v2.py\n│   │   │   │   └── nexus_models_v2.py\n│   │   │   ├── extensions\n│   │   │   │   ├── credential.py\n│   │   │   │   ├── _credential_view.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── qos.py\n│   │   │   │   └── _qos_view.py\n│   │   │   ├── __init__.py\n│   │   │   ├── l2device_plugin_base.py\n│   │   │   ├── l2network_plugin_configuration.py\n│   │   │   ├── models\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── virt_phy_sw_v2.py\n│   │   │   ├── network_plugin.py\n│   │   │   ├── nexus\n│   │   │   │   ├── cisco_nexus_configuration.py\n│   │   │   │   ├── cisco_nexus_network_driver_v2.py\n│   │   │   │   ├── cisco_nexus_plugin_v2.py\n│   │   │   │   ├── cisco_nexus_snippets.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── README\n│   │   │   ├── run_tests.py\n│   │   │   └── tests\n│   │   │       ├── __init__.py\n│   │   │       └── unit\n│   │   │           ├── api-paste.ini.cisco.test\n│   │   │           ├── __init__.py\n│   │   │           ├── quantum.conf.cisco.test\n│   │   │           ├── test_cisco_extension.py\n│   │   │           ├── test_database.py\n│   │   │           └── v2\n│   │   │               ├── api-paste.ini.cisco.test\n│   │   │               ├── __init__.py\n│   │   │               ├── nexus\n│   │   │               │   ├── fake_nexus_driver.py\n│   │   │               │   └── __init__.py\n│   │   │               ├── quantumv2.conf.cisco.test\n│   │   │               └── test_api_v2.py\n│   │   ├── common\n│   │   │   ├── constants.py\n│   │   │   └── __init__.py\n│   │   ├── hyperv\n│   │   │   ├── agent\n│   │   │   │   ├── hyperv_quantum_agent.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── utils.py\n│   │   │   ├── agent_notifier_api.py\n│   │   │   ├── common\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db.py\n│   │   │   ├── hyperv_quantum_plugin.py\n│   │   │   ├── __init__.py\n│   │   │   ├── model.py\n│   │   │   └── rpc_callbacks.py\n│   │   ├── __init__.py\n│   │   ├── linuxbridge\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── linuxbridge_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── constants.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── l2network_db_v2.py\n│   │   │   │   └── l2network_models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── lb_quantum_plugin.py\n│   │   │   └── README\n│   │   ├── metaplugin\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── meta_db_v2.py\n│   │   │   ├── meta_models_v2.py\n│   │   │   ├── meta_quantum_plugin.py\n│   │   │   ├── proxy_quantum_plugin.py\n│   │   │   ├── README\n│   │   │   └── run_tests.py\n│   │   ├── midonet\n│   │   │   ├── config.py\n│   │   │   ├── __init__.py\n│   │   │   ├── midonet_lib.py\n│   │   │   └── plugin.py\n│   │   ├── nec\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── nec_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   ├── exceptions.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ofc_client.py\n│   │   │   ├── db\n│   │   │   │   ├── api.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── models.py\n│   │   │   │   └── nec_plugin_base.py\n│   │   │   ├── drivers\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── pfc.py\n│   │   │   │   └── trema.py\n│   │   │   ├── extensions\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── packetfilter.py\n│   │   │   ├── __init__.py\n│   │   │   ├── nec_plugin.py\n│   │   │   ├── ofc_driver_base.py\n│   │   │   ├── ofc_manager.py\n│   │   │   └── README\n│   │   ├── nicira\n│   │   │   ├── __init__.py\n│   │   │   └── nicira_nvp_plugin\n│   │   │       ├── api_client\n│   │   │       │   ├── client_eventlet.py\n│   │   │       │   ├── client.py\n│   │   │       │   ├── common.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── request_eventlet.py\n│   │   │       │   └── request.py\n│   │   │       ├── check_nvp_config.py\n│   │   │       ├── common\n│   │   │       │   ├── config.py\n│   │   │       │   ├── exceptions.py\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── metadata_access.py\n│   │   │       │   └── securitygroups.py\n│   │   │       ├── extensions\n│   │   │       │   ├── __init__.py\n│   │   │       │   ├── nvp_networkgw.py\n│   │   │       │   └── nvp_qos.py\n│   │   │       ├── __init__.py\n│   │   │       ├── nicira_db.py\n│   │   │       ├── nicira_models.py\n│   │   │       ├── nicira_networkgw_db.py\n│   │   │       ├── nicira_qos_db.py\n│   │   │       ├── NvpApiClient.py\n│   │   │       ├── nvp_cluster.py\n│   │   │       ├── nvplib.py\n│   │   │       ├── nvp_plugin_version.py\n│   │   │       ├── QuantumPlugin.py\n│   │   │       └── README\n│   │   ├── openvswitch\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── ovs_quantum_agent.py#agent主文件\n│   │   │   │   ├── ovs-quantum-agent-xs_xcp.spec\n│   │   │   │   └── xenserver_install.sh\n│   │   │   ├── common\n│   │   │   │   ├── config.py#ovs插件注册选项，用于读取配置文件\n│   │   │   │   ├── constants.py#一些常量\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── Makefile\n│   │   │   ├── ovs_db_v2.py\n│   │   │   ├── ovs_models_v2.py#数据库表定义与sqlalchemy的类的映射\n│   │   │   ├── ovs_quantum_plugin.py#插件部分主程序\n│   │   │   └── README\n│   │   ├── plumgrid\n│   │   │   ├── common\n│   │   │   │   ├── exceptions.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── __init__.py\n│   │   │   ├── plumgrid_nos_plugin\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── plugin_ver.py\n│   │   │   │   ├── plumgrid_nos_snippets.py\n│   │   │   │   ├── plumgrid_plugin.py\n│   │   │   │   └── rest_connection.py\n│   │   │   └── README\n│   │   ├── ryu\n│   │   │   ├── agent\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── ryu_quantum_agent.py\n│   │   │   ├── common\n│   │   │   │   ├── config.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── db\n│   │   │   │   ├── api_v2.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── models_v2.py\n│   │   │   ├── __init__.py\n│   │   │   ├── README\n│   │   │   └── ryu_quantum_plugin.py\n│   │   └── services\n│   │       ├── agent_loadbalancer\n│   │       │   ├── agent\n│   │       │   │   ├── api.py\n│   │       │   │   ├── __init__.py\n│   │       │   │   └── manager.py\n│   │       │   ├── constants.py\n│   │       │   ├── drivers\n│   │       │   │   ├── haproxy\n│   │       │   │   │   ├── cfg.py\n│   │       │   │   │   ├── __init__.py\n│   │       │   │   │   └── namespace_driver.py\n│   │       │   │   └── __init__.py\n│   │       │   ├── __init__.py\n│   │       │   └── plugin.py\n│   │       ├── __init__.py\n│   │       └── service_base.py\n│   ├── policy.py\n│   ├── quantum_plugin_base_v2.py\n│   ├── quota.py\n│   ├── rootwrap\n│   │   ├── filters.py\n│   │   ├── __init__.py\n│   │   └── wrapper.py\n│   ├── scheduler\n│   │   ├── dhcp_agent_scheduler.py\n│   │   ├── __init__.py\n│   │   └── l3_agent_scheduler.py\n│   ├── server\n│   │   └── __init__.py\n│   ├── service.py\n│   ├── tests\n│   │   ├── base.py\n│   │   ├── etc\n│   │   │   ├── api-paste.ini.test\n│   │   │   ├── quantum.conf.test\n│   │   │   └── rootwrap.d\n│   │   │       └── quantum.test.filters\n│   │   ├── __init__.py\n│   │   ├── unit\n│   │   │   ├── bigswitch\n│   │   │   │   ├── etc\n│   │   │   │   │   └── restproxy.ini.test\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_restproxy_plugin.py\n│   │   │   │   └── test_router_db.py\n│   │   │   ├── brocade\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_brocade_db.py\n│   │   │   │   ├── test_brocade_plugin.py\n│   │   │   │   └── test_brocade_vlan.py\n│   │   │   ├── cisco\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_network_plugin.py\n│   │   │   │   └── test_nexus_plugin.py\n│   │   │   ├── database_stubs.py\n│   │   │   ├── db\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── loadbalancer\n│   │   │   │       ├── __init__.py\n│   │   │   │       └── test_db_loadbalancer.py\n│   │   │   ├── dummy_plugin.py\n│   │   │   ├── extensions\n│   │   │   │   ├── extendedattribute.py\n│   │   │   │   ├── extensionattribute.py\n│   │   │   │   ├── foxinsocks.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── v2attributes.py\n│   │   │   ├── extension_stubs.py\n│   │   │   ├── hyperv\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_hyperv_quantum_agent.py\n│   │   │   │   ├── test_hyperv_quantum_plugin.py\n│   │   │   │   └── test_hyperv_rpcapi.py\n│   │   │   ├── __init__.py\n│   │   │   ├── linuxbridge\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_lb_db.py\n│   │   │   │   ├── test_lb_quantum_agent.py\n│   │   │   │   ├── test_lb_security_group.py\n│   │   │   │   ├── test_linuxbridge_plugin.py\n│   │   │   │   └── test_rpcapi.py\n│   │   │   ├── metaplugin\n│   │   │   │   ├── fake_plugin.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_basic.py\n│   │   │   │   └── test_metaplugin.py\n│   │   │   ├── midonet\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_midonet_lib.py\n│   │   │   │   └── test_midonet_plugin.py\n│   │   │   ├── nec\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── stub_ofc_driver.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_config.py\n│   │   │   │   ├── test_db.py\n│   │   │   │   ├── test_nec_plugin.py\n│   │   │   │   ├── test_ofc_manager.py\n│   │   │   │   ├── test_pfc_driver.py\n│   │   │   │   ├── test_security_group.py\n│   │   │   │   └── test_trema_driver.py\n│   │   │   ├── nicira\n│   │   │   │   ├── etc\n│   │   │   │   │   ├── fake_get_gwservice.json\n│   │   │   │   │   ├── fake_get_lrouter.json\n│   │   │   │   │   ├── fake_get_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_get_lrouter_lport.json\n│   │   │   │   │   ├── fake_get_lrouter_nat.json\n│   │   │   │   │   ├── fake_get_lswitch.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_att.json\n│   │   │   │   │   ├── fake_get_lswitch_lport.json\n│   │   │   │   │   ├── fake_get_lswitch_lport_status.json\n│   │   │   │   │   ├── fake_post_gwservice.json\n│   │   │   │   │   ├── fake_post_lqueue.json\n│   │   │   │   │   ├── fake_post_lrouter.json\n│   │   │   │   │   ├── fake_post_lrouter_lport.json\n│   │   │   │   │   ├── fake_post_lrouter_nat.json\n│   │   │   │   │   ├── fake_post_lswitch.json\n│   │   │   │   │   ├── fake_post_lswitch_lport.json\n│   │   │   │   │   ├── fake_post_security_profile.json\n│   │   │   │   │   ├── fake_put_lrouter_lport_att.json\n│   │   │   │   │   ├── fake_put_lswitch_lport_att.json\n│   │   │   │   │   └── nvp.ini.test\n│   │   │   │   ├── fake_nvpapiclient.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_networkgw.py\n│   │   │   │   ├── test_nicira_plugin.py\n│   │   │   │   ├── test_nvp_api_common.py\n│   │   │   │   ├── test_nvp_api_request_eventlet.py\n│   │   │   │   ├── test_nvp_api_request.py\n│   │   │   │   └── test_nvplib.py\n│   │   │   ├── openvswitch\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_agent_scheduler.py\n│   │   │   │   ├── test_openvswitch_plugin.py\n│   │   │   │   ├── test_ovs_db.py\n│   │   │   │   ├── test_ovs_defaults.py\n│   │   │   │   ├── test_ovs_lib.py\n│   │   │   │   ├── test_ovs_quantum_agent.py\n│   │   │   │   ├── test_ovs_rpcapi.py\n│   │   │   │   ├── test_ovs_security_group.py\n│   │   │   │   └── test_ovs_tunnel.py\n│   │   │   ├── plumgrid\n│   │   │   │   ├── __init__.py\n│   │   │   │   └── test_plumgrid_plugin.py\n│   │   │   ├── ryu\n│   │   │   │   ├── fake_ryu.py\n│   │   │   │   ├── __init__.py\n│   │   │   │   ├── test_defaults.py\n│   │   │   │   ├── test_ryu_agent.py\n│   │   │   │   ├── test_ryu_db.py\n│   │   │   │   ├── test_ryu_plugin.py\n│   │   │   │   └── test_ryu_security_group.py\n│   │   │   ├── services\n│   │   │   │   ├── agent_loadbalancer\n│   │   │   │   │   ├── agent\n│   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   ├── test_api.py\n│   │   │   │   │   │   ├── test_init.py\n│   │   │   │   │   │   └── test_manager.py\n│   │   │   │   │   ├── driver\n│   │   │   │   │   │   ├── haproxy\n│   │   │   │   │   │   │   ├── __init__.py\n│   │   │   │   │   │   │   ├── test_cfg.py\n│   │   │   │   │   │   │   └── test_namespace_driver.py\n│   │   │   │   │   │   └── __init__.py\n│   │   │   │   │   ├── __init__.py\n│   │   │   │   │   └── test_plugin.py\n│   │   │   │   └── __init__.py\n│   │   │   ├── test_agent_config.py\n│   │   │   ├── test_agent_ext_plugin.py\n│   │   │   ├── test_agent_linux_utils.py\n│   │   │   ├── test_agent_netns_cleanup.py\n│   │   │   ├── test_agent_ovs_cleanup.py\n│   │   │   ├── test_agent_rpc.py\n│   │   │   ├── test_api_api_common.py\n│   │   │   ├── test_api_v2.py\n│   │   │   ├── test_api_v2_resource.py\n│   │   │   ├── test_attributes.py\n│   │   │   ├── test_auth.py\n│   │   │   ├── test_common_utils.py\n│   │   │   ├── test_config.py\n│   │   │   ├── test_db_migration.py\n│   │   │   ├── test_db_plugin.py\n│   │   │   ├── test_db.py\n│   │   │   ├── test_db_rpc_base.py\n│   │   │   ├── test_debug_commands.py\n│   │   │   ├── test_dhcp_agent.py\n│   │   │   ├── test_extension_extended_attribute.py\n│   │   │   ├── test_extension_extraroute.py\n│   │   │   ├── _test_extension_portbindings.py\n│   │   │   ├── test_extension_portsecurity.py\n│   │   │   ├── test_extension_security_group.py\n│   │   │   ├── test_extensions.py\n│   │   │   ├── test_iptables_firewall.py\n│   │   │   ├── test_iptables_manager.py\n│   │   │   ├── test_l3_agent.py\n│   │   │   ├── test_l3_plugin.py\n│   │   │   ├── testlib_api.py\n│   │   │   ├── test_linux_daemon.py\n│   │   │   ├── test_linux_dhcp.py\n│   │   │   ├── test_linux_external_process.py\n│   │   │   ├── test_linux_interface.py\n│   │   │   ├── test_linux_ip_lib.py\n│   │   │   ├── test_loadbalancer_plugin.py\n│   │   │   ├── test_metadata_agent.py\n│   │   │   ├── test_metadata_namespace_proxy.py\n│   │   │   ├── test_policy.py\n│   │   │   ├── test_quantum_context.py\n│   │   │   ├── test_quantum_manager.py\n│   │   │   ├── test_quota_ext.py\n│   │   │   ├── _test_rootwrap_exec.py\n│   │   │   ├── test_rootwrap.py\n│   │   │   ├── test_routerserviceinsertion.py\n│   │   │   ├── test_security_groups_rpc.py\n│   │   │   ├── test_servicetype.py\n│   │   │   └── test_wsgi.py\n│   │   └── var\n│   │       ├── ca.crt\n│   │       ├── certificate.crt\n│   │       └── privatekey.key\n│   ├── version.py\n│   └── wsgi.py\n├── README\n├── run_tests.py\n├── run_tests.sh\n├── setup.cfg\n├── setup.py\n├── TESTING\n├── tools\n│   ├── build_debs.sh\n│   ├── check_i18n.py\n│   ├── check_i18n_test_case.txt\n│   ├── clean.sh\n│   ├── i18n_cfg.py\n│   ├── install_venv_common.py\n│   ├── install_venv.py\n│   ├── patch_tox_venv.py\n│   ├── pip-requires\n│   ├── test-requires\n│   └── with_venv.sh\n└── tox.ini\n</code></pre>\n','Quantum源代码目录结构及各文件作用分析','','inherit','open','open','','287-revision-5','','','2013-04-01 20:28:15','2013-04-01 12:28:15','','287','http://blog.wachang.net/2013/04/287-revision-5/','0','revision','','0');");
E_D("replace into `wp_posts` values('294','1','2013-03-13 18:08:45','2013-03-13 10:08:45','<p>http://www.sebastien-han.fr/blog/2012/09/28/quantum-plugin-comparison/</p>\n','openstack插件概况','','inherit','open','open','','147-revision-2','','','2013-03-13 18:08:45','2013-03-13 10:08:45','','147','http://blog.wachang.net/2013/03/147-revision-2/','0','revision','','0');");
E_D("replace into `wp_posts` values('295','1','2013-04-02 15:07:09','2013-04-02 07:07:09','<p>记录一下DNS中的一些概念，因为今天试了下cloudflare，感觉很棒，这是基础知识。关于DNS可以使用nsllookup命令查询，直接执行nslookup进入相应界面或者加参数得到结果。</p>\n\n<h3>A记录</h3>\n\n<p>A记录是用来创建到IP地址的记录。也就是一个域名和相应IP地址的记录。</p>\n\n<pre><code>root@Node1:~# nslookup -type=a www.baidu.com\nServer:     61.139.2.69\nAddress:    61.139.2.69#53\n\nNon-authoritative answer:\nwww.baidu.com   canonical name = www.a.shifen.com.\nName:   www.a.shifen.com\nAddress: 115.239.210.27\nName:   www.a.shifen.com\nAddress: 115.239.210.26\n</code></pre>\n\n<p>最上面表示DNS服务器地址，下面的<code>非权威应答</code>表示查询得到的域名的IP地址，这里还显示了一个别名，baidu的这个形式估计是做负载用的。关于A记录的技巧：</p>\n\n<!--more-->\n\n<ul>\n<li><p>如果想创建不带www的记录，即ezloo.com，在主机记录中填写@或者留空，不同的注册商可能不一样。</p></li>\n<li><p>创建多个域名到同一个IP，比如给博客建了二级域名，可以使用*.blog.ezloo.com来指向一个IP，这样的话，不管是访问a.blog.ezloo.com还是b.blog.ezloo.com都能到同一个IP。</p></li>\n<li><p>如果你给同一个二级域名设置了多个A记录，比如你建了两个blog的A记录，其中一个指向了111.111.111.111，另一个指向了111.111.111.112，那幺在查询的时候，每次返回的数据包含了两个IP地址，但是在返回的过程中数据排列的顺序每次都不相同。由于大 部分的客户端只选择第一条记录所以通过这种方式可以实现一定程度的负载均衡。</p></li>\n</ul>\n\n<h3>NS记录</h3>\n\n<p>NS记录是域名服务器记录，用来指定域名由哪台服务器来进行解析。</p>\n\n<pre><code>root@Node1:~# nslookup -type=ns baidu.com\nServer:     61.139.2.69\nAddress:    61.139.2.69#53\n\nNon-authoritative answer:\nbaidu.com   nameserver = ns3.baidu.com.\nbaidu.com   nameserver = ns4.baidu.com.\nbaidu.com   nameserver = dns.baidu.com.\nbaidu.com   nameserver = ns2.baidu.com.\n\nAuthoritative answers can be found from:\nns4.baidu.com   internet address = 220.181.38.10\ndns.baidu.com   internet address = 202.108.22.220\nns2.baidu.com   internet address = 61.135.165.235\nns3.baidu.com   internet address = 220.181.37.10\n</code></pre>\n\n<h3>AAAA记录</h3>\n\n<p>查询域名的IPv6地址。当然，这里的域名是指向的ipv6的地址。</p>\n\n<pre><code>root@Node1:~# nslookup -type=aaaa ipv6.baidu.com    \nServer:     61.139.2.69\nAddress:    61.139.2.69#53\n\nNon-authoritative answer:\nipv6.baidu.com  has AAAA address 2400:da00::dbf:0:100\n</code></pre>\n\n<h3>CNAME</h3>\n\n<p>CNAME是指A记录的另外一个名称，允许你将多个记录映射到同一台计算机上。比如我的tumblr博客的地址是wachang.tumblr.com,别名blog.wachang.net指向了domains.tumblr.com，那么访问blog.wachang.net其实就是访问的domains.tumblr.com。domains.tumblr.com在根据内容跳转到wachang.tumblr.com上。</p>\n\n<pre><code>root@Node1:~# nslookup -type=cname blog.wachang.net\nServer:     61.139.2.69\nAddress:    61.139.2.69#53\n\nNon-authoritative answer:\nblog.wachang.net    canonical name = domains.tumblr.com.\n</code></pre>\n\n<p>在比如百度的，我们看看：</p>\n\n<pre><code>root@Node1:~# nslookup -type=cname www.baidu.com   \nServer:     61.139.2.69\nAddress:    61.139.2.69#53\n\nNon-authoritative answer:\nwww.baidu.com   canonical name = www.a.shifen.com.\n</code></pre>\n\n<h3>MX记录</h3>\n\n<p>邮件交换记录提供到SMTP服务器的记录类型，可以有多条，同样样映射到A记录，提供冗余和数据备份，不同的服务器具备不同的优先级，数字越小代表优先级越高，会被优先选择。mx 记录的权重对 Mail 服务是很重要的，当发送邮件时，Mail 服务器先对域名进行解析，查找 mx 记录。先找权重数最小的服务器（比如说是 10），如果能连通，那幺就将服务器发送过去；如果无法连通 mx 记录为 10 的服务器，那幺才将邮件发送到权重为 20 的 mail 服务器上。</p>\n\n<p>这里有一个重要的概念，权重 20 的服务器在配置上只是暂时缓存 mail ，当权重 20 的服务器能连通权重为 10 的服务器时，仍会将邮件发送的权重为 10 的 Mail 服务器上。当然，这个机制需要在 Mail 服务器上配置。</p>\n','关于DNS中A,AAAA,MX,CNAME记录','','publish','open','open','','about-dns-record','','','2013-04-02 15:07:09','2013-04-02 07:07:09','','0','http://blog.wachang.net/?p=295','0','post','','0');");
E_D("replace into `wp_posts` values('296','1','2013-04-02 15:05:36','2013-04-02 07:05:36','<p>记录一下DNS中的一些概念，因为今天试了下cloudflare，感觉很棒，这是基础知识。关于DNS可以使用nsllookup命令查询，直接执行nslookup进入相应界面或者加参数得到结果。</p>\n\n<h3>A记录</h3>\n\n<p>A记录是用来创建到IP地址的记录。也就是一个域名和相应IP地址的记录。</p>\n\n<pre><code>root@Node1:~# nslookup -type=a www.baidu.com\nServer:     61.139.2.69\nAddress:    61.139.2.69#53\n\nNon-authoritative answer:\nwww.baidu.com   canonical name = www.a.shifen.com.\nName:   www.a.shifen.com\nAddress: 115.239.210.27\nName:   www.a.shifen.com\nAddress: 115.239.210.26\n</code></pre>\n\n<p>最上面表示DNS服务器地址，下面的<code>非权威应答</code>表示查询得到的域名的IP地址，这里还显示了一个别名，baidu的这个形式估计是做负载用的。关于A记录的技巧：</p>\n\n<ul>\n<li><p>如果想创建不带www的记录，即ezloo.com，在主机记录中填写@或者留空，不同的注册商可能不一样。</p></li>\n<li><p>创建多个域名到同一个IP，比如给博客建了二级域名，可以使用*.blog.ezloo.com来指向一个IP，这样的话，不管是访问a.blog.ezloo.com还是b.blog.ezloo.com都能到同一个IP。</p></li>\n<li><p>如果你给同一个二级域名设置了多个A记录，比如你建了两个blog的A记录，其中一个指向了111.111.111.111，另一个指向了111.111.111.112，那幺在查询的时候，每次返回的数据包含了两个IP地址，但是在返回的过程中数据排列的顺序每次都不相同。由于大 部分的客户端只选择第一条记录所以通过这种方式可以实现一定程度的负载均衡。</p></li>\n</ul>\n\n<h3>NS记录</h3>\n\n<p>NS记录是域名服务器记录，用来指定域名由哪台服务器来进行解析。</p>\n\n<pre><code>root@Node1:~# nslookup -type=ns baidu.com\nServer:     61.139.2.69\nAddress:    61.139.2.69#53\n\nNon-authoritative answer:\nbaidu.com   nameserver = ns3.baidu.com.\nbaidu.com   nameserver = ns4.baidu.com.\nbaidu.com   nameserver = dns.baidu.com.\nbaidu.com   nameserver = ns2.baidu.com.\n\nAuthoritative answers can be found from:\nns4.baidu.com   internet address = 220.181.38.10\ndns.baidu.com   internet address = 202.108.22.220\nns2.baidu.com   internet address = 61.135.165.235\nns3.baidu.com   internet address = 220.181.37.10\n</code></pre>\n\n<h3>AAAA记录</h3>\n\n<p>查询域名的IPv6地址。当然，这里的域名是指向的ipv6的地址。</p>\n\n<pre><code>root@Node1:~# nslookup -type=aaaa ipv6.baidu.com    \nServer:     61.139.2.69\nAddress:    61.139.2.69#53\n\nNon-authoritative answer:\nipv6.baidu.com  has AAAA address 2400:da00::dbf:0:100\n</code></pre>\n\n<h3>CNAME</h3>\n\n<p>CNAME是指A记录的另外一个名称，允许你将多个记录映射到同一台计算机上。比如我的tumblr博客的地址是wachang.tumblr.com,别名blog.wachang.net指向了domains.tumblr.com，那么访问blog.wachang.net其实就是访问的domains.tumblr.com。domains.tumblr.com在根据内容跳转到wachang.tumblr.com上。</p>\n\n<pre><code>root@Node1:~# nslookup -type=cname blog.wachang.net\nServer:     61.139.2.69\nAddress:    61.139.2.69#53\n\nNon-authoritative answer:\nblog.wachang.net    canonical name = domains.tumblr.com.\n</code></pre>\n\n<p>在比如百度的，我们看看：</p>\n\n<pre><code>root@Node1:~# nslookup -type=cname www.baidu.com   \nServer:     61.139.2.69\nAddress:    61.139.2.69#53\n\nNon-authoritative answer:\nwww.baidu.com   canonical name = www.a.shifen.com.\n</code></pre>\n\n<h3>MX记录</h3>\n\n<p>邮件交换记录提供到SMTP服务器的记录类型，可以有多条，同样样映射到A记录，提供冗余和数据备份，不同的服务器具备不同的优先级，数字越小代表优先级越高，会被优先选择。mx 记录的权重对 Mail 服务是很重要的，当发送邮件时，Mail 服务器先对域名进行解析，查找 mx 记录。先找权重数最小的服务器（比如说是 10），如果能连通，那幺就将服务器发送过去；如果无法连通 mx 记录为 10 的服务器，那幺才将邮件发送到权重为 20 的 mail 服务器上。</p>\n\n<p>这里有一个重要的概念，权重 20 的服务器在配置上只是暂时缓存 mail ，当权重 20 的服务器能连通权重为 10 的服务器时，仍会将邮件发送的权重为 10 的 Mail 服务器上。当然，这个机制需要在 Mail 服务器上配置。</p>\n','关于DNS中A,AAAA,MX,CNAME记录','','inherit','open','open','','295-revision','','','2013-04-02 15:05:36','2013-04-02 07:05:36','','295','http://blog.wachang.net/2013/04/295-revision/','0','revision','','0');");
E_D("replace into `wp_posts` values('297','1','2013-04-07 14:01:19','2013-04-07 06:01:19','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum WSGI服务基础(1)</p>\n  \n  <p>本文涉及代码文件:quantum\\\\quantum\\\\wsgi.py</p>\n</blockquote>\n\n<h2>1 背景</h2>\n\n<p>在上一篇文章<strong>Quantum 基础知识及服务启动</strong>中简单的阐述了一下quantum server是如何启动，其中重要的两段代码：</p>\n\n<pre><code>quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务\nquantum_service.wait()#启动WSGI服务\n</code></pre>\n\n<p>这两句构造了一个WSGI服务器实例并调用了相应的方法。在WSGI部分有两个文件:</p>\n\n<ul>\n<li><code>quantum\\\\quantum\\\\wsgi.py</code>：实现了WSGI中的基本概念，可以当成一个Lib库。</li>\n<li><code>quantum\\\\quantum\\\\service.py</code>:基于上面wsgi提供的基本操作构建一个wsgi服务，比如quantum-api-server。</li>\n</ul>\n\n<p>在OpenStack的其他组件中，wsgi.py内容都是差不多的，而service.py则是不同的。</p>\n\n<!--more-->\n\n<h2>2 wsgi.py</h2>\n\n<p>首先我们来分析这个文件，如上所说，该文件包含了wsgi中的一些概念的实现。首先看import部分，里面import了几个主要的东西：</p>\n\n<pre><code>import webob.dec#webob库\nimport webob.exc\nfrom xml.etree import ElementTree as etree#XML处理库\nimport eventlet.wsgi\nfrom quantum.openstack.common import jsonutils#JSON相关库\n</code></pre>\n\n<p>以上主要模块我在基础部分都有讲到。请先回顾。</p>\n\n<p>然后我们看看这个类的UML图：</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/wsgi.py_.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/wsgi.py_-1024x461.png\" alt=\"wsgi.py\" width=\"640\" height=\"288\" class=\"aligncenter size-large wp-image-305\" /></a></p>\n\n<p>这里再提示wsgi.py中定义的类等就是WSGI的一些基本实现，在quantum架构中，大多会从wsgi.py中定义的类进行继承。</p>\n\n<p>首先，我将<a href=\"http://blog.wachang.net/2013/04/quantum-wsgi-define-and-how-to-handle-api/\">Quantum WSGI中代码概念及如何处理API</a>中涉及的概念在代码上做一个总结。</p>\n\n<h3>2.1 class Application(object)</h3>\n\n<p>这里的Application主要是一个WSGI应用的装饰器，实际的WSGI应用需要继承他。这个类主要是完成配置文件中:<strong>[app:name]内的初始化！！！！</strong></p>\n\n<pre><code>class Application(object):\n    \"\"\"Base WSGI application wrapper. Subclasses need to implement __call__.\"\"\"\n\n    @classmethod\n    def factory(cls, global_config, **local_config): #主要用来实例化类\n        \"\"\"Used for paste app factories in paste.deploy config files.\n\n        Any local configuration (that is, values under the [app:APPNAME]\n        section of the paste config) will be passed into the `__init__` method\n        as kwargs.#这里说明了api-paste.ini文中中的配置如何使用！\n\n        A hypothetical configuration would look like:\n\n            [app:wadl]\n            latest_version = 1.3\n            paste.app_factory = nova.api.fancy_api:Wadl.factory\n\n        which would result in a call to the `Wadl` class as\n        #Class Wadl需要有一个call方法\n\n            import quantum.api.fancy_api\n            fancy_api.Wadl(latest_version=''1.3'')\n\n        You could of course re-implement the `factory` method in subclasses,\n        but using the kwarg passing it shouldn''t be necessary.\n\n        \"\"\"\n        return cls(**local_config)\n\n    def __call__(self, environ, start_response):\n        \"\"\"Subclasses will probably want to implement __call__ like this:\n        #call方法用来实现一个WSGI应用的功能，处理请求，返回结果。子类需要重写这个方法。\n\n        @webob.dec.wsgify(RequestClass=Request)\n        #此装饰器将一个函数封装为一个WSGI应用。\n        def __call__(self, req):\n          # Any of the following objects work as responses:\n\n          # Option 1: simple string\n          res = ''message\\\\n''\n\n          # Option 2: a nicely formatted HTTP exception page\n          res = exc.HTTPForbidden(detail=''Nice try'')\n\n          # Option 3: a webob Response object (in case you need to play with\n          # headers, or you want to be treated like an iterable, or or or)\n          res = Response();\n          res.app_iter = open(''somefile'')\n\n          # Option 4: any wsgi app to be run next\n          res = self.application #quantum中使用的是这种方法。子类需要有一个application参数\n\n          # Option 5: you can get a Response object for a wsgi app, too, to\n          # play with headers etc\n          res = req.get_response(self.application) #quantum中使用的是这种方法。子类需要有一个application参数\n\n          # You can then just return your response...\n          return res\n          # ... or set req.response and return None.\n          req.response = res\n\n        See the end of http://pythonpaste.org/webob/modules/dec.html\n        for more info.\n\n        \"\"\"\n        raise NotImplementedError(_(''You must implement __call__''))    \n</code></pre>\n\n<h3>2.2 class Controller(object)</h3>\n\n<pre><code>class Controller(object):\n    \"\"\"WSGI app that dispatched to methods.与Method对应的controller，上面说到，一个路由表会指定一个controller，这个controller的基本。\n\n    WSGI app that reads routing information supplied by RoutesMiddleware\n    and calls the requested action method upon itself.  All action methods\n    must, in addition to their normal parameters, accept a ''req'' argument\n    which is the incoming wsgi.Request.  They raise a webob.exc exception,\n    or return a dict which will be serialized by requested content type.\n\n    \"\"\"\n\n    @webob.dec.wsgify(RequestClass=Request)#装饰为一个WSGI应用\n    def __call__(self, req):\n        \"\"\"\n        Call the method specified in req.environ by RoutesMiddleware.\n        \"\"\"\n        arg_dict = req.environ[''wsgiorg.routing_args''][1]\n        action = arg_dict[''action'']\n        method = getattr(self, action)\n        del arg_dict[''controller'']\n        del arg_dict[''action'']\n        if ''format'' in arg_dict:\n            del arg_dict[''format'']\n        arg_dict[''request''] = req\n        result = method(**arg_dict)#执行方法，这里是一个抽象，子类继承后决定具体怎么执行    \n</code></pre>\n\n<h3>2.3 class Middleware(object)</h3>\n\n<p>可以认为是一个filter，把一个WSGI包装一点新的功能，<strong>主要用来初始化api-paste.ini配置中[filter:]段中的实例初始化。</strong>，作为一个filter，app必然要作为一个参数。</p>\n\n<pre><code>class Middleware(object):#所谓中间件，也就是一个WSGI APP\n    \"\"\"\n    Base WSGI middleware wrapper. These classes require an application to be\n    initialized that will be called next.  By default the middleware will\n    simply call its wrapped app, or you can override __call__ to customize its\n    behavior.\n    \"\"\"\n\n    @classmethod\n    def factory(cls, global_config, **local_config):\n        \"\"\"Used for paste app factories in paste.deploy config files.\n\n        Any local configuration (that is, values under the [filter:APPNAME]\n        section of the paste config) will be passed into the `__init__` method\n        as kwargs.\n\n        A hypothetical configuration would look like:\n\n            [filter:analytics]\n            redis_host = 127.0.0.1\n            paste.filter_factory = nova.api.analytics:Analytics.factory\n\n        which would result in a call to the `Analytics` class as\n\n            import nova.api.analytics\n            analytics.Analytics(app_from_paste, redis_host=''127.0.0.1'')\n\n        You could of course re-implement the `factory` method in subclasses,\n        but using the kwarg passing it shouldn''t be necessary.\n\n        \"\"\"\n        def _factory(app):\n            return cls(app, **local_config)\n        return _factory\n\n    def __init__(self, application):\n        self.application = application\n\n    def process_request(self, req):\n        \"\"\"\n        Called on each request.\n\n        If this returns None, the next application down the stack will be\n        executed. If it returns a response then that response will be returned\n        and execution will stop here.\n\n        \"\"\"\n        return None\n\n    def process_response(self, response):\n        \"\"\"Do whatever you''d like to the response.\"\"\"\n        return response\n\n    @webob.dec.wsgify#封装为WSGI应用\n    def __call__(self, req):\n        response = self.process_request(req)\n        if response:\n            return response\n        response = req.get_response(self.application)\n        return self.process_response(response)     \n</code></pre>\n\n<h3>2.4 class Resource(Application)</h3>\n\n<p>继承了Application，这就是一个WSGI应用了。这个类用来干嘛？类Controller作为Resource类的一个成员，所以这个类就是用来处理调度controller以及内容格式化的。</p>\n\n<pre><code>class Resource(Application):\n    \"\"\"WSGI app that handles (de)serialization and controller dispatch.\n\n    WSGI app that reads routing information supplied by RoutesMiddleware\n    and calls the requested action method upon its controller.  All\n    controller action methods must accept a ''req'' argument, which is the\n    incoming wsgi.Request. If the operation is a PUT or POST, the controller\n    method must also accept a ''body'' argument (the deserialized request body).\n    They may raise a webob.exc exception or return a dict, which will be\n    serialized by requested content type.\n\n    \"\"\"\n\n    def __init__(self, controller, fault_body_function,\n                 deserializer=None, serializer=None):\n        \"\"\"\n        :param controller: object that implement methods created by routes lib\n        :param deserializer: object that can serialize the output of a\n                             controller into a webob response\n        :param serializer: object that can deserialize a webob request\n                           into necessary pieces\n        :param fault_body_function: a function that will build the response\n                                    body for HTTP errors raised by operations\n                                    on this resource object\n\n        \"\"\"\n        self.controller = controller\n        self.deserializer = deserializer or RequestDeserializer()\n        self.serializer = serializer or ResponseSerializer()\n        self._fault_body_function = fault_body_function\n        # use serializer''s xmlns for populating Fault generator xmlns\n        xml_serializer = self.serializer.body_serializers[''application/xml'']\n        if hasattr(xml_serializer, ''xmlns''):\n            self._xmlns = xml_serializer.xmlns\n    def dispatch(self, request, action, action_args):\n        \"\"\"Find action-spefic method on controller and call it.\"\"\"\n\n        controller_method = getattr(self.controller, action)\n        try:\n            #NOTE(salvatore-orlando): the controller method must have\n            # an argument whose name is ''request''\n            return controller_method(request=request, **action_args)#执行controller的方法了！！\n        except TypeError as exc:\n            LOG.exception(exc)\n            return Fault(webob.exc.HTTPBadRequest(),\n                         self._xmlns) \n</code></pre>\n\n<h3>2.5 class Server(object)</h3>\n\n<p>主要是一个WSGI服务器，也就是Quantum API Server的基本，跟一般的socket服务器差不多，区别就是用了eventlet来做线程处理。</p>\n\n<pre><code>class Server(object):\n    \"\"\"Server class to manage multiple WSGI sockets and applications.\"\"\"\n\n    def _run(self, application, socket):\n        \"\"\"Start a WSGI server in a new green thread.\"\"\"\n        logger = logging.getLogger(''eventlet.wsgi.server'')\n        eventlet.wsgi.server(socket, application, custom_pool=self.pool,\n                         log=logging.WritableLogger(logger))   \n</code></pre>\n\n<h3>2.6 class Router(object)</h3>\n\n<p>把API的路径转换到相应的app，这个类很重要。</p>\n\n<pre><code>class Router(object):\n    \"\"\"\n    WSGI middleware that maps incoming requests to WSGI apps.\n    \"\"\"\n\n    @classmethod\n    def factory(cls, global_config, **local_config):\n        \"\"\"\n        Returns an instance of the WSGI Router class\n        \"\"\"\n        return cls()\n\n    def __init__(self, mapper):\n        \"\"\"\n        Create a router for the given routes.Mapper.#根据routes.Mapper中的路由规则产生一个路由器，\n        相关的路由规则，在解析api-paste.ini中的extensions部分已经完成。\n\n        Each route in `mapper` must specify a ''controller'', which is a\n        WSGI app to call.  You''ll probably want to specify an ''action'' as\n        well and have your controller be a wsgi.Controller, who will route\n        the request to the action method.\n\n        Examples:\n          mapper = routes.Mapper()\n          sc = ServerController()\n\n          # Explicit mapping of one route to a controller+action\n          mapper.connect(None, \"/svrlist\", controller=sc, action=\"list\")\n\n          # Actions are all implicitly defined\n          mapper.resource(\"network\", \"networks\", controller=nc)\n\n          # Pointing to an arbitrary WSGI app.  You can specify the\n          # {path_info:.*} parameter so the target app can be handed just that\n          # section of the URL.\n          mapper.connect(None, \"/v1.0/{path_info:.*}\", controller=BlogApp())\n        \"\"\"\n        self.map = mapper\n        self._router = routes.middleware.RoutesMiddleware(self._dispatch,\n                                                          self.map)\n\n    @webob.dec.wsgify\n    def __call__(self, req):\n        \"\"\"\n        Route the incoming request to a controller based on self.map.\n        If no match, return a 404.\n        \"\"\"\n        return self._router\n\n    @staticmethod\n    @webob.dec.wsgify\n    def _dispatch(req):\n        \"\"\"\n        Called by self._router after matching the incoming request to a route\n        and putting the information into req.environ.  Either returns 404\n        or the routed WSGI app''s response.\n        \"\"\"\n        match = req.environ[''wsgiorg.routing_args''][1]\n        if not match:\n            return webob.exc.HTTPNotFound()\n        app = match[''controller'']#返回是controller的名字\n        return app     \n</code></pre>\n','Quantum WSGI服务基础','','publish','open','open','','quantum-wsgi-base','','','2013-04-07 14:01:19','2013-04-07 06:01:19','','0','http://blog.wachang.net/?p=297','0','post','','0');");
E_D("replace into `wp_posts` values('298','1','2013-04-01 16:42:48','2013-04-01 08:42:48','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum 基础知识及服务启动</p>\n</blockquote>\n\n<p>我认为Quantum在代码上可以分为三个部分：</p>\n\n<ul>\n<li>Quantum Server：启动进程，处理REST API</li>\n<li>Quantum Plugin：对于一个API请求，如何将此API内容递交给Plugin处理。</li>\n<li>Plugin与Agent：两者之间是如何交互的，RPC相关的实现。</li>\n</ul>\n\n<!--more-->\n\n<h2>1 关于配置文件</h2>\n\n<p>Quantum有四类配置文件：</p>\n\n<ul>\n<li>api-paste.ini:这是用来配置Quantum WSGI服务的，主要就是如何处理一个REST API请求。此文件的解析是通过Paste.Deploy库来完成的。</li>\n<li>quantum.conf:主要是配置Quantum选用的plugin,以及和数据库交互，以及与其他组件的交互，此文件解析是通过OpenStack自己基于库ConfigParser开发的oslo库完成的。</li>\n<li>插件配置文件，比如：ovs&#95;quantum&#95;plugin.ini，这个配置文件，Plugin和Agent都会用到，此文件解析是通过OpenStack自己基于库ConfigParser开发的oslo库完成的。</li>\n<li>rootwrap.conf：貌似是具体执行一些linux命令时候的包装。</li>\n</ul>\n\n<p>关于配置文件如何解析，很重要，我在基础篇中已经有详细的介绍，可以先看看～</p>\n\n<h2>2 服务启动目录</h2>\n\n<p>在quantum/bin下有下图的一些文件：</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png\" alt=\"quantum-bin\" width=\"289\" height=\"458\" class=\"aligncenter size-full wp-image-282\" /></a></p>\n\n<p>这里面的每一个文件在安装quantum之后都是放在/usr/bin下面的，也就是作为服务启动的脚本，那么我们打开quantum-server这个，作为quantum启动的脚本，里面内容很简单：</p>\n\n<pre><code>mport eventlet\neventlet.monkey_patch()\n\nimport os\nimport sys\nsys.path.insert(0, os.getcwd())\nfrom quantum.server import main as server\n\nserver()\n</code></pre>\n\n<p>说白了，其实这个目录的东西可以看成是一个\"引入\"，关键还是得看import的部分，才是真正的执行代码。</p>\n\n<h2>3 Quantum服务启动</h2>\n\n<p>quantum服务的启动主要是quantum/server/<strong>init</strong>.py文件：</p>\n\n<pre><code>import sys\nfrom oslo.config import cfg #创建一个配置管理器cfg.CONF\nfrom quantum.common import config #注册核心选项core_opts\nfrom quantum import service\n\ndef main():\n    # the configuration will be read into the cfg.CONF global data structure\n    config.parse(sys.argv[1:]) #解析配置文件，即是quantum.conf,把相应的配置信息写入到cfg.CONF中。\n\n    try:\n        quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务\n        quantum_service.wait()#启动WSGI服务\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n\n<p>主要讲两个部分，第一是配置读取，<code>from oslo.config import cfg</code>创建了一个cfg.CONF配置管理器，<code>from quantum.common import config</code>而quantum common则会想配置管理器注册核心选项core&#95;opts信息，主要是读取quantum.conf文件使用，以及cli&#95;opts，提供CLI操作支持，同时会定义两个比较重要的函数：</p>\n\n<pre><code>def parse(args):#解析配置文件的，实际上是调用cdg.CONF()的call方法\ndef setup_logging(conf):#设置LOG信息用\ndef load_paste_app(app_name):#载入WSGI应用的，涉及API处理部分\n</code></pre>\n\n<p>关于这一部分，如果不是很懂的话，请先阅读本系列文章基础部分，关于配置文件cfg的部分，请阅读<a href=\"http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-config-file/\">Quantum OpenvSwitch Plugin&amp;Agent读取配置文件</a>,原理都是一样的。</p>\n\n<p>第二部分，就是启动相应的WSGI服务器，我们主要看</p>\n\n<pre><code>quantum_service = service.serve_wsgi(service.QuantumApiService)\nquantum_service.wait()\n</code></pre>\n\n<p>主要就是这两句，这一部分的细节会在随后中讲，这里的核心就是使用paste.deploy加载一个app，并作为处理API请求的应用，然后启动相应的服务器。</p>\n','Quantum 基础知识及服务启动','','inherit','open','open','','281-revision-3','','','2013-04-01 16:42:48','2013-04-01 08:42:48','','281','http://blog.wachang.net/2013/04/281-revision-3/','0','revision','','0');");
E_D("replace into `wp_posts` values('299','1','2013-04-02 16:48:00','2013-04-02 08:48:00','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum WSGI服务(API Server)</p>\n</blockquote>\n\n<h2>1 背景</h2>\n\n<p>在上一篇文章<strong>Quantum 基础知识及服务启动</strong>中简单的阐述了一下quantum server是如何启动，其中重要的两段代码：</p>\n\n<pre><code>quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务\nquantum_service.wait()#启动WSGI服务\n</code></pre>\n\n<p>这两句构造了一个WSGI服务器实例并调用了相应的方法。在WSGI部分有两个文件:</p>\n\n<ul>\n<li><code>quantum\\\\quantum\\\\wsgi.py</code>：实现了WSGI中的基本概念，可以当成一个Lib库。</li>\n<li><code>quantum\\\\quantum\\\\service.py</code>:基于上面wsgi提供的基本操作构建一个wsgi服务，比如quantum-api-server。</li>\n</ul>\n\n<p>在OpenStack的其他组件中，wsgi.py内容都是差不多的，而service.py则是不同的。</p>\n\n<h2>2 wsgi.py</h2>\n\n<p>首先我们来分析这个文件，如上所说，该文件包含了wsgi中的一些概念的实现。首先看import部分，里面import了几个主要的东西：</p>\n\n<pre><code>import webob.dec#webob库\nimport webob.exc\nfrom xml.etree import ElementTree as etree#XML处理库\nimport eventlet.wsgi\nfrom quantum.openstack.common import jsonutils#JSON相关库\n</code></pre>\n\n<p>以上主要模块我在基础部分都有讲到。请先回顾。</p>\n\n<p>然后我们看看这个类的UML图：</p>\n','Quantum WSGI服务(API Server)','','inherit','open','open','','297-revision','','','2013-04-02 16:48:00','2013-04-02 08:48:00','','297','http://blog.wachang.net/2013/04/297-revision/','0','revision','','0');");
E_D("replace into `wp_posts` values('300','1','2013-03-07 00:17:11','2013-03-06 16:17:11','<h2>Linux/Ubuntu 如何查看和杀死僵尸进程</h2>\n\n<p>http://blog.51osos.com/linux/linux-how-to-kill-zombie-process/</p>\n','','','inherit','open','open','','109-revision','','','2013-03-07 00:17:11','2013-03-06 16:17:11','','109','http://blog.wachang.net/2013/03/109-revision/','0','revision','','0');");
E_D("replace into `wp_posts` values('301','1','2013-03-08 18:39:08','2013-03-08 10:39:08','\n','','','inherit','open','open','','129-revision','','','2013-03-08 18:39:08','2013-03-08 10:39:08','','129','http://blog.wachang.net/2013/03/129-revision/','0','revision','','0');");
E_D("replace into `wp_posts` values('302','1','2013-04-02 21:32:34','2013-04-02 13:32:34','<p>http://docs.gridcentric.com/canary/usage.html https://wiki.openstack.org/wiki/PerformanceMonitoringTools http://blog.csdn.net/21aspnet/article/details/6729724</p>\n','','','inherit','open','open','','142-revision','','','2013-04-02 21:32:34','2013-04-02 13:32:34','','142','http://blog.wachang.net/2013/04/142-revision/','0','revision','','0');");
E_D("replace into `wp_posts` values('303','1','2013-04-03 10:40:03','2013-04-03 02:40:03','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum WSGI中代码概念及如何处理API</p>\n</blockquote>\n\n<p>在写WSGI的代码分析的过程中，发现要理解WSGI部分的代码，得先理解WSGI如何处理API的过程，这样理解代码会相当快，于是补上此篇文档。</p>\n\n<p>在我前面的基础篇中，我已经讲述了quantum中的api-paste.ini文件如何定义了quantum api的处理流程。这里做一个回顾：</p>\n\n<p>对于v2.0之类的API，使用keystone验证的话，会有以下几个过程：</p>\n\n<pre><code>`/v2.0`（urlmap进行区分）---》读取authtoken段的参数---》与keystone进行交互---》增加extension---》APIRouter\n</code></pre>\n\n<p>上面这个流程是什么意思呢？我跳过认证部分讲：</p>\n\n<p>quantum使用的是REST API，这个API的一个特点就是API的路径，有着重要作用，是作为一个参数传递的，比如一个api:</p>\n\n<pre><code>/v2.0/networks/(the uuid of network).json\n</code></pre>\n\n<p>那么，这个networks加上这个HTTP请求的方法（GET/PUT等）就能决定最终是调用quantum plugin中的哪个函数（函数 get_network），而uuid则会作为一个参数传递，.json则会告诉quantum这个API请求的结果需要以什么形式返回。</p>\n\n<!--more-->\n\n<p>上面这个过程我们换算到程序中就有以下这么些东西：</p>\n\n<h2>WSGI&amp;API</h2>\n\n<p><strong>Application</strong></p>\n\n<p>首先，quantum-server这个WSGI服务器需要一个“东西”，用来处理接收到的API，这个应用在代码中的概念就是一个application，那么这个application要处理些啥呢，如何处理？OK，这就是配置文件api-paste.ini所定义的了，你看，其实api-paste.ini中对一个API的处理分为了很多步骤，是由很多的类或者实例或者管道来联合处理的，那么，这些类的实例，就是一个application，所以中，api-paste.ini文件中定义了多个application，在Python.Paste中的loadapp()函数读取api-paste.ini这个配置文件，就生成了这么一个抽象的application，可以看到这个app准确的来说不是实例化类这种传统方式得到的，这个app主要就是通过调用不同函数不同实例的方法完成一个动作，所以说，他是一个概念，你可以认为这个application只定义了流程，而没有相应的代码。在api-paste.ini文件中的第一段:</p>\n\n<pre><code>[composite:quantum]\nuse = egg:Paste#urlmap\n/: quantumversions\n/v2.0: quantumapi_v2_0\n</code></pre>\n\n<p>如上，这个application（的名字）就叫做quantum。这个其实是个抽象的application,而后面的一些配置：</p>\n\n<pre><code>[app:quantumversions]\npaste.app_factory = quantum.api.versions:Versions.factory\n</code></pre>\n\n<p>这里也定义了一个app，这个当然就有具体的代码和实例了。当然，你可以认为在api-paste.ini文件中每个段都定义了一个app，loadapp()会把这个app按照一定的规则组合成一个大的application.</p>\n\n<p><strong>Routes</strong></p>\n\n<p>在例子API中，我们说到REST API中这个后缀，专业点的说法就是路径path，很是重要。他能决定quantum最终调用的处理方式，那么如何决定这么个事呢，这个时候就需要引入路由这个概念了，与网络中的路由类似，OpenStack中引入Routes这个库就是可以根据REST API中的path信息进行一个调度。</p>\n\n<p><strong>Router</strong></p>\n\n<p>为了完成调度，肯定就需要一个调度器，这个就是Router，正如api-paste.ini中描述的一个API经过application处理以后最后到达APIRouter，这个API Router根据自己生成的路由规则把相应的API内容调度到一个处理它的东西上（controller,如下）。</p>\n\n<p>由于quantum api有核心api和扩展api，所以api-paste.ini中定义的extension其实再载入了相应扩展API定义以后也会生成一个Router，处理扩展API相关，这个下面会讲。</p>\n\n<p><strong>Routes Table：</strong></p>\n\n<p>既然是路由，那么就需要一个路由表了，这个路由表的作用就是让程序能够根据REST API的path信息将相应的操作传递到一个处理它的“东西上”，这个“东西”是什么呢？名字就叫controller：</p>\n\n<p><strong>controller</strong></p>\n\n<p>controller是什么意思？controller就是一个调度器，我们知道，quantum api的操作其实都是plugin来完成的，那么最基本的，肯定是使用plugin中的函数来完成。前面的路由routes，只能根据一定的规则把path路径或者HTTP的body参数路由到一个controller，那么这个controller，要做的就是根据传递过来的信息，plugin中需要执行操作的函数，并调用这个函数，当然，controller也会把body信息(如果有)传递给plugin相关函数。OK，到这里，我必须引入quantum api中的一些基本概念了。</p>\n\n<p><strong>resource</strong></p>\n\n<p>从quantum api中就可以看出来，resource就是一个需要操作的资源，多个resource的集合就是resources,举个例子，quantum中三大概念，network,subnet,port，我们假设API形式为/v2.0/port/XXX /v2.0/network/XXX 这些中的port,network就是resource，那么多个resouce和在一起，就是resources了撒，不过quantum给他换了个名字，叫collection，所以quantum中的REST API都是/v2.0/ports/XXX /v2.0/networks/XXX这种了，因为resource，collection这个词会在代码中出现，所以你明白他是什么意思就OK了！简单一个以quantum中network的总结：</p>\n\n<pre><code>networks = collection\nnetwork = resource\n</code></pre>\n\n<p>我举一个简单的route中添加路由表的例子，仅作举例，不懂的话没关系，以后会深入讲：</p>\n\n<pre><code>from routes import Mapper  \nmap = Mapper()  \nmap.connect(None, \"/error/{action}/{id}, controller=\"error\")  \nmap.connect(\"home\", \"/\", controller=\"main\", action=\"index\")  \n\n# Match a URL, returns a dict or None if no match  \nresult = map.match(''/error/myapp/4'')  \n# result == {''controller'': ''main'', ''action'': ''myapp'', ''id'': ''4''}  \n</code></pre>\n\n<p><strong>action</strong></p>\n\n<p>在routes表中，我们注意有一个action,这个在代码中也会涉及，action是啥意思，我们知道HTTP请求中GET PUT POST等方法，对应需要的操作，那么在quantum代码中，我们不这样叫，我们把HTTP的方法映射到对资源的action（操作上），这个映射关系如下所示，这个图中，collection就是上面的概念resources，而这其实也是一个简单的routes表了，不过目前我们只需要看看action和method的对应。</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/routepath.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/routepath.png\" alt=\"routepath\" width=\"888\" height=\"170\" class=\"aligncenter size-full wp-image-308\" /></a></p>\n\n<p>整个上面所说的其实都是一个<strong>MVC（模型-视图-控制）</strong>框架，这是一个软件开发方式，可以自己学习一下,可以更好的理解OpenStack各个组件的REST API思想（用了python各种库来实现了一个MVC）。</p>\n\n<h2>API&amp;扩展API</h2>\n\n<p>Quantum是有两类API的，一类是核心API，包括networks,ports,subnets的API，这个API的Router是通过api-paste.ini中的APIRouter来进行的，同时你可以扩展API，相应的扩展都在quantum/extensions目录下，你可以把自己定义的resoucre加入到扩展中，形成扩展API，这一部分后续文章讲，现在只是基础概念。而扩展API的Router其实是在api-paste.ini中调用extension_middleware完成的，所以，整个流程可以如下两个图，这两个图体现了本文全部内容：</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/loadapp.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/loadapp.png\" alt=\"loadapp\" width=\"794\" height=\"547\" class=\"aligncenter size-full wp-image-309\" /></a></p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/http.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/http.png\" alt=\"http\" width=\"687\" height=\"634\" class=\"aligncenter size-full wp-image-310\" /></a></p>\n','Quantum WSGI中代码概念及如何处理API','','publish','open','open','','quantum-wsgi-define-and-how-to-handle-api','','','2013-04-07 10:50:03','2013-04-07 02:50:03','','0','http://blog.wachang.net/?p=303','0','post','','1');");
E_D("replace into `wp_posts` values('304','1','2013-04-03 00:50:41','2013-04-02 16:50:41','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum WSGI中代码概念及如何处理API</p>\n</blockquote>\n\n<p>在写WSGI的代码分析的过程中，发现要理解WSGI部分的代码，得先理解WSGI如何处理API的过程，这样理解代码会相当快，于是补上此篇文档。</p>\n\n<p>在我前面的基础篇中，我已经讲述了quantum中的api-paste.ini文件如何定义了quantum api的处理流程。这里做一个回顾：</p>\n\n<p>对于v2.0之类的API，使用keystone验证的话，会有以下几个过程：</p>\n\n<pre><code>`/v2.0`（urlmap进行区分）---》读取authtoken段的参数---》与keystone进行交互---》增加extension---》APIRouter\n</code></pre>\n\n<p>上面这个流程是什么意思呢？我跳过认证部分讲：</p>\n\n<p>quantum使用的是REST API，这个API的一个特点就是API的路径，有着重要作用，是作为一个参数传递的，比如一个api:</p>\n\n<pre><code>/v2.0/networks/(the uuid of network).json\n</code></pre>\n\n<p>那么，这个networks加上这个HTTP请求的方法（GET/PUT等）就能决定最终是调用quantum plugin中的哪个函数（函数 get_network），而uuid则会作为一个参数传递，.json则会告诉quantum这个API请求的结果需要以什么形式返回。</p>\n\n<p>上面这个过程我们换算到程序中就有以下这么些东西：</p>\n\n<h2>WSGI&amp;API</h2>\n\n<p><strong>Application</strong></p>\n\n<p>首先，quantum-server这个WSGI服务器需要一个“东西”，用来处理接收到的API，这个应用在代码中的概念就是一个application，那么这个application要处理些啥呢，如何处理？OK，这就是配置文件api-paste.ini所定义的了，你看，其实api-paste.ini中对一个API的处理分为了很多步骤，是由很多的类或者实例或者管道来联合处理的，这些东西合并在一起，就是一个WSGI Application。在Python.Paste中的loadapp()函数读取api-paste.ini这个配置文件，就生成了这么一个application，可以看到这个app准确的来说不是实例化类这种传统方式得到了，这个app主要就是通过调用不同函数不同实例的方法完成一个动作，所以说，他是一个概念，你可以认为这个application只定义了流程，而没有响应的代码。</p>\n\n<p><strong>Routes</strong></p>\n\n<p>在例子API中，我们说到REST API中这个后缀，专业点的说法就是路径path，很是重要。他能决定quantum最终调用的处理方式，那么如何决定这么个事呢，这个时候就需要引入路由这个概念了，与网络中的路由类似，OpenStack中引入Routes这个库就是可以根据REST API中的path信息进行一个调度。这里我就需要强调了：</p>\n\n<p><strong>Routes Table：</strong></p>\n\n<p>既然是路由，那么就需要一个路由表了，这个路由表的作用就是让程序能够根据REST API的path信息将相应的操作传递到一个处理它的“东西上”，这个“东西”是什么呢？名字就叫controller。</p>\n\n<p><strong>controller</strong></p>\n\n<p>controller是什么意思？controller就是一个调度器，我们知道，quantum api的操作其实都是plugin来完成的，那么最基本的，肯定是使用plugin中的函数来完成。前面的路由routes，只能根据一定的规则把path路径或者HTTP的body参数路由到一个controller，那么这个controller，要做的就是根据传递过来的信息，plugin中需要执行操作的函数，并调用这个函数，当然，controller也会把body信息(如果有)传递给plugin相关函数。OK，到这里，我必须引入quantum api中的一些基本概念了。</p>\n\n<p><strong>resource</strong></p>\n\n<p>从quantum api中就可以看出来，resource就是一个需要操作的资源，多个resource的集合就是resources,举个例子，quantum中三大概念，network,subnet,port，我们假设API形式为/v2.0/port/XXX /v2.0/network/XXX 这些中的port,network就是resource，那么多个resouce和在一起，就是resources了撒，不过quantum给他换了个名字，叫collection，所以quantum中的REST API都是/v2.0/ports/XXX /v2.0/networks/XXX这种了，因为resource，collection这个词会在代码中出现，所以你明白他是什么意思就OK了！简单一个以quantum中network的总结：</p>\n\n<pre><code>networks = collection\nnetwork = resource\n</code></pre>\n\n<p>我举一个简单的route中添加路由表的例子，仅作举例，不懂的话没关系，以后会深入讲：</p>\n\n<pre><code>from routes import Mapper  \nmap = Mapper()  \nmap.connect(None, \"/error/{action}/{id}, controller=\"error\")  \nmap.connect(\"home\", \"/\", controller=\"main\", action=\"index\")  \n\n# Match a URL, returns a dict or None if no match  \nresult = map.match(''/error/myapp/4'')  \n# result == {''controller'': ''main'', ''action'': ''myapp'', ''id'': ''4''}  \n</code></pre>\n\n<p><strong>action</strong></p>\n\n<p>在routes表中，我们注意有一个action,这个在代码中也会涉及，action是啥意思，我们知道HTTP请求中GET PUT POST等方法，对应需要的操作，那么在quantum代码中，我们不这样叫，我们把HTTP的方法映射到对资源的action（操作上），这个映射关系如下所示：</p>\n\n<p>**</p>\n','Quantum WSGI中代码概念及如何处理API','','inherit','open','open','','303-revision','','','2013-04-03 00:50:41','2013-04-02 16:50:41','','303','http://blog.wachang.net/2013/04/303-revision/','0','revision','','0');");
E_D("replace into `wp_posts` values('305','1','2013-04-03 01:30:52','2013-04-02 17:30:52','','wsgi.py','','inherit','open','open','','wsgi-py','','','2013-04-03 01:30:52','2013-04-02 17:30:52','','297','http://blog.wachang.net/wp-content/uploads/2013/04/wsgi.py_.png','0','attachment','image/png','0');");
E_D("replace into `wp_posts` values('306','1','2013-04-02 20:17:51','2013-04-02 12:17:51','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum WSGI服务(API Server)</p>\n</blockquote>\n\n<h2>1 背景</h2>\n\n<p>在上一篇文章<strong>Quantum 基础知识及服务启动</strong>中简单的阐述了一下quantum server是如何启动，其中重要的两段代码：</p>\n\n<pre><code>quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务\nquantum_service.wait()#启动WSGI服务\n</code></pre>\n\n<p>这两句构造了一个WSGI服务器实例并调用了相应的方法。在WSGI部分有两个文件:</p>\n\n<ul>\n<li><code>quantum\\\\quantum\\\\wsgi.py</code>：实现了WSGI中的基本概念，可以当成一个Lib库。</li>\n<li><code>quantum\\\\quantum\\\\service.py</code>:基于上面wsgi提供的基本操作构建一个wsgi服务，比如quantum-api-server。</li>\n</ul>\n\n<p>在OpenStack的其他组件中，wsgi.py内容都是差不多的，而service.py则是不同的。</p>\n\n<h2>2 wsgi.py</h2>\n\n<p>首先我们来分析这个文件，如上所说，该文件包含了wsgi中的一些概念的实现。首先看import部分，里面import了几个主要的东西：</p>\n\n<pre><code>import webob.dec#webob库\nimport webob.exc\nfrom xml.etree import ElementTree as etree#XML处理库\nimport eventlet.wsgi\nfrom quantum.openstack.common import jsonutils#JSON相关库\n</code></pre>\n\n<p>以上主要模块我在基础部分都有讲到。请先回顾。</p>\n\n<p>然后我们看看这个类的UML图：</p>\n','Quantum WSGI服务(API Server)','','inherit','open','open','','297-revision-2','','','2013-04-02 20:17:51','2013-04-02 12:17:51','','297','http://blog.wachang.net/2013/04/297-revision-2/','0','revision','','0');");
E_D("replace into `wp_posts` values('307','1','2013-04-03 01:32:03','2013-04-02 17:32:03','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum WSGI服务(API Server)</p>\n</blockquote>\n\n<h2>1 背景</h2>\n\n<p>在上一篇文章<strong>Quantum 基础知识及服务启动</strong>中简单的阐述了一下quantum server是如何启动，其中重要的两段代码：</p>\n\n<pre><code>quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务\nquantum_service.wait()#启动WSGI服务\n</code></pre>\n\n<p>这两句构造了一个WSGI服务器实例并调用了相应的方法。在WSGI部分有两个文件:</p>\n\n<ul>\n<li><code>quantum\\\\quantum\\\\wsgi.py</code>：实现了WSGI中的基本概念，可以当成一个Lib库。</li>\n<li><code>quantum\\\\quantum\\\\service.py</code>:基于上面wsgi提供的基本操作构建一个wsgi服务，比如quantum-api-server。</li>\n</ul>\n\n<p>在OpenStack的其他组件中，wsgi.py内容都是差不多的，而service.py则是不同的。</p>\n\n<h2>2 wsgi.py</h2>\n\n<p>首先我们来分析这个文件，如上所说，该文件包含了wsgi中的一些概念的实现。首先看import部分，里面import了几个主要的东西：</p>\n\n<pre><code>import webob.dec#webob库\nimport webob.exc\nfrom xml.etree import ElementTree as etree#XML处理库\nimport eventlet.wsgi\nfrom quantum.openstack.common import jsonutils#JSON相关库\n</code></pre>\n\n<p>以上主要模块我在基础部分都有讲到。请先回顾。</p>\n\n<p>然后我们看看这个类的UML图：</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/wsgi.py_.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/wsgi.py_-1024x461.png\" alt=\"wsgi.py\" width=\"640\" height=\"288\" class=\"aligncenter size-large wp-image-305\" /></a></p>\n','Quantum WSGI服务(API Server)','','inherit','open','open','','297-revision-3','','','2013-04-03 01:32:03','2013-04-02 17:32:03','','297','http://blog.wachang.net/2013/04/297-revision-3/','0','revision','','0');");
E_D("replace into `wp_posts` values('308','1','2013-04-03 10:27:59','2013-04-03 02:27:59','','routepath','','inherit','open','open','','routepath','','','2013-04-03 10:27:59','2013-04-03 02:27:59','','303','http://blog.wachang.net/wp-content/uploads/2013/04/routepath.png','0','attachment','image/png','0');");
E_D("replace into `wp_posts` values('309','1','2013-04-03 10:36:56','2013-04-03 02:36:56','','loadapp','','inherit','open','open','','loadapp','','','2013-04-03 10:36:56','2013-04-03 02:36:56','','303','http://blog.wachang.net/wp-content/uploads/2013/04/loadapp.png','0','attachment','image/png','0');");
E_D("replace into `wp_posts` values('310','1','2013-04-03 10:37:14','2013-04-03 02:37:14','','http','','inherit','open','open','','http','','','2013-04-03 10:37:14','2013-04-03 02:37:14','','303','http://blog.wachang.net/wp-content/uploads/2013/04/http.png','0','attachment','image/png','0');");
E_D("replace into `wp_posts` values('311','1','2013-04-03 10:38:34','2013-04-03 02:38:34','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum WSGI中代码概念及如何处理API</p>\n</blockquote>\n\n<p>在写WSGI的代码分析的过程中，发现要理解WSGI部分的代码，得先理解WSGI如何处理API的过程，这样理解代码会相当快，于是补上此篇文档。</p>\n\n<p>在我前面的基础篇中，我已经讲述了quantum中的api-paste.ini文件如何定义了quantum api的处理流程。这里做一个回顾：</p>\n\n<p>对于v2.0之类的API，使用keystone验证的话，会有以下几个过程：</p>\n\n<pre><code>`/v2.0`（urlmap进行区分）---》读取authtoken段的参数---》与keystone进行交互---》增加extension---》APIRouter\n</code></pre>\n\n<p>上面这个流程是什么意思呢？我跳过认证部分讲：</p>\n\n<p>quantum使用的是REST API，这个API的一个特点就是API的路径，有着重要作用，是作为一个参数传递的，比如一个api:</p>\n\n<pre><code>/v2.0/networks/(the uuid of network).json\n</code></pre>\n\n<p>那么，这个networks加上这个HTTP请求的方法（GET/PUT等）就能决定最终是调用quantum plugin中的哪个函数（函数 get_network），而uuid则会作为一个参数传递，.json则会告诉quantum这个API请求的结果需要以什么形式返回。</p>\n\n<!--more-->\n\n<p>上面这个过程我们换算到程序中就有以下这么些东西：</p>\n\n<h2>WSGI&amp;API</h2>\n\n<p><strong>Application</strong></p>\n\n<p>首先，quantum-server这个WSGI服务器需要一个“东西”，用来处理接收到的API，这个应用在代码中的概念就是一个application，那么这个application要处理些啥呢，如何处理？OK，这就是配置文件api-paste.ini所定义的了，你看，其实api-paste.ini中对一个API的处理分为了很多步骤，是由很多的类或者实例或者管道来联合处理的，这些东西合并在一起，就是一个WSGI Application。在Python.Paste中的loadapp()函数读取api-paste.ini这个配置文件，就生成了这么一个application，可以看到这个app准确的来说不是实例化类这种传统方式得到的，这个app主要就是通过调用不同函数不同实例的方法完成一个动作，所以说，他是一个概念，你可以认为这个application只定义了流程，而没有相应的代码。</p>\n\n<p><strong>Routes</strong></p>\n\n<p>在例子API中，我们说到REST API中这个后缀，专业点的说法就是路径path，很是重要。他能决定quantum最终调用的处理方式，那么如何决定这么个事呢，这个时候就需要引入路由这个概念了，与网络中的路由类似，OpenStack中引入Routes这个库就是可以根据REST API中的path信息进行一个调度。</p>\n\n<p><strong>Router</strong></p>\n\n<p>为了完成调度，肯定就需要一个调度器，这个就是Router，正如api-paste.ini中描述的一个API经过application处理以后最后到达APIRouter，这个API Router根据自己生成的路由规则把相应的API内容调度到一个处理它的东西上（controller,如下）。</p>\n\n<p>由于quantum api有核心api和扩展api，所以api-paste.ini中定义的extension其实再载入了相应扩展API定义以后也会生成一个Router，处理扩展API相关，这个下面会讲。</p>\n\n<p><strong>Routes Table：</strong></p>\n\n<p>既然是路由，那么就需要一个路由表了，这个路由表的作用就是让程序能够根据REST API的path信息将相应的操作传递到一个处理它的“东西上”，这个“东西”是什么呢？名字就叫controller：</p>\n\n<p><strong>controller</strong></p>\n\n<p>controller是什么意思？controller就是一个调度器，我们知道，quantum api的操作其实都是plugin来完成的，那么最基本的，肯定是使用plugin中的函数来完成。前面的路由routes，只能根据一定的规则把path路径或者HTTP的body参数路由到一个controller，那么这个controller，要做的就是根据传递过来的信息，plugin中需要执行操作的函数，并调用这个函数，当然，controller也会把body信息(如果有)传递给plugin相关函数。OK，到这里，我必须引入quantum api中的一些基本概念了。</p>\n\n<p><strong>resource</strong></p>\n\n<p>从quantum api中就可以看出来，resource就是一个需要操作的资源，多个resource的集合就是resources,举个例子，quantum中三大概念，network,subnet,port，我们假设API形式为/v2.0/port/XXX /v2.0/network/XXX 这些中的port,network就是resource，那么多个resouce和在一起，就是resources了撒，不过quantum给他换了个名字，叫collection，所以quantum中的REST API都是/v2.0/ports/XXX /v2.0/networks/XXX这种了，因为resource，collection这个词会在代码中出现，所以你明白他是什么意思就OK了！简单一个以quantum中network的总结：</p>\n\n<pre><code>networks = collection\nnetwork = resource\n</code></pre>\n\n<p>我举一个简单的route中添加路由表的例子，仅作举例，不懂的话没关系，以后会深入讲：</p>\n\n<pre><code>from routes import Mapper  \nmap = Mapper()  \nmap.connect(None, \"/error/{action}/{id}, controller=\"error\")  \nmap.connect(\"home\", \"/\", controller=\"main\", action=\"index\")  \n\n# Match a URL, returns a dict or None if no match  \nresult = map.match(''/error/myapp/4'')  \n# result == {''controller'': ''main'', ''action'': ''myapp'', ''id'': ''4''}  \n</code></pre>\n\n<p><strong>action</strong></p>\n\n<p>在routes表中，我们注意有一个action,这个在代码中也会涉及，action是啥意思，我们知道HTTP请求中GET PUT POST等方法，对应需要的操作，那么在quantum代码中，我们不这样叫，我们把HTTP的方法映射到对资源的action（操作上），这个映射关系如下所示，这个图中，collection就是上面的概念resources，而这其实也是一个简单的routes表了，不过目前我们只需要看看action和method的对应。</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/routepath.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/routepath.png\" alt=\"routepath\" width=\"888\" height=\"170\" class=\"aligncenter size-full wp-image-308\" /></a></p>\n\n<h2>API&amp;扩展API</h2>\n\n<p>Quantum是有两类API的，一类是核心API，包括networks,ports,subnets的API，这个API的Router是通过api-paste.ini中的APIRouter来进行的，同时你可以扩展API，相应的扩展都在quantum/extensions目录下，你可以把自己定义的resoucre加入到扩展中，形成扩展API，这一部分后续文章讲，现在只是基础概念。而扩展API的Router其实是在api-paste.ini中调用extension_middleware完成的，所以，整个流程可以如下两个图，这两个图体现了本文全部内容：</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/loadapp.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/loadapp.png\" alt=\"loadapp\" width=\"794\" height=\"547\" class=\"aligncenter size-full wp-image-309\" /></a></p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/http.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/http.png\" alt=\"http\" width=\"687\" height=\"634\" class=\"aligncenter size-full wp-image-310\" /></a></p>\n','Quantum WSGI中代码概念及如何处理API','','inherit','open','open','','303-revision-2','','','2013-04-03 10:38:34','2013-04-03 02:38:34','','303','http://blog.wachang.net/2013/04/303-revision-2/','0','revision','','0');");
E_D("replace into `wp_posts` values('312','1','2013-04-01 16:43:56','2013-04-01 08:43:56','<h1>浅出OpenStack源码系列</h1>\n\n<h2>1.Python基础模块篇</h2>\n\n<p>OpenStack中使用了许多python模块，这一章就先介绍一下主要模块的最用，同时也是后续文章中的一些参考。</p>\n\n<p><a href=\"http://webpython.codepoint.net/wsgi_tutorial\">Python:WSGI介绍</a></p>\n\n<p><a href=\"http://blog.wachang.net/2013/04/python-paste-deploy-1/\">Python.Paste指南之Deploy(1)-概念</a></p>\n\n<p><a href=\"http://blog.wachang.net/2013/04/python-paste-deploy-2/\">Python.Paste指南之Deploy(2)-实践</a></p>\n\n<h2>2.Quantum篇</h2>\n\n<h3>2.1 Quantum Server</h3>\n\n<p><a href=\"http://blog.wachang.net/2013/04/quantum-code-base/\">Quantum 基础知识及服务启动</a></p>\n\n<h3>2.3 OpenvSwitch Plugin</h3>\n\n<p><a href=\"http://blog.wachang.net/2013/03/quantum-ovs-plugin-code-structure/\">Quantum OpenvSwitch Plugin代码架构</a></p>\n\n<p><a href=\"http://blog.wachang.net/2013/03/quantum-ovs-agent-config-file/\">Quantum OpenvSwitch Plugin&amp;Agent读取配置文件</a></p>\n\n<p><a href=\"http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-rpc-1/\">Quantum OpenvSwitch Plugin和Agent的RPC机制（一）</a></p>\n','浅出OpenStack源码','','inherit','open','open','','209-revision-7','','','2013-04-01 16:43:56','2013-04-01 08:43:56','','209','http://blog.wachang.net/2013/04/209-revision-7/','0','revision','','0');");
E_D("replace into `wp_posts` values('313','1','2013-04-07 10:49:53','2013-04-07 02:49:53','<blockquote>\n  <p>浅出OpenStack源码系列</p>\n  \n  <p>Quantum WSGI中代码概念及如何处理API</p>\n</blockquote>\n\n<p>在写WSGI的代码分析的过程中，发现要理解WSGI部分的代码，得先理解WSGI如何处理API的过程，这样理解代码会相当快，于是补上此篇文档。</p>\n\n<p>在我前面的基础篇中，我已经讲述了quantum中的api-paste.ini文件如何定义了quantum api的处理流程。这里做一个回顾：</p>\n\n<p>对于v2.0之类的API，使用keystone验证的话，会有以下几个过程：</p>\n\n<pre><code>`/v2.0`（urlmap进行区分）---》读取authtoken段的参数---》与keystone进行交互---》增加extension---》APIRouter\n</code></pre>\n\n<p>上面这个流程是什么意思呢？我跳过认证部分讲：</p>\n\n<p>quantum使用的是REST API，这个API的一个特点就是API的路径，有着重要作用，是作为一个参数传递的，比如一个api:</p>\n\n<pre><code>/v2.0/networks/(the uuid of network).json\n</code></pre>\n\n<p>那么，这个networks加上这个HTTP请求的方法（GET/PUT等）就能决定最终是调用quantum plugin中的哪个函数（函数 get_network），而uuid则会作为一个参数传递，.json则会告诉quantum这个API请求的结果需要以什么形式返回。</p>\n\n<!--more-->\n\n<p>上面这个过程我们换算到程序中就有以下这么些东西：</p>\n\n<h2>WSGI&amp;API</h2>\n\n<p><strong>Application</strong></p>\n\n<p>首先，quantum-server这个WSGI服务器需要一个“东西”，用来处理接收到的API，这个应用在代码中的概念就是一个application，那么这个application要处理些啥呢，如何处理？OK，这就是配置文件api-paste.ini所定义的了，你看，其实api-paste.ini中对一个API的处理分为了很多步骤，是由很多的类或者实例或者管道来联合处理的，那么，这些类的实例，就是一个application，所以中，api-paste.ini文件中定义了多个application，在Python.Paste中的loadapp()函数读取api-paste.ini这个配置文件，就生成了这么一个抽象的application，可以看到这个app准确的来说不是实例化类这种传统方式得到的，这个app主要就是通过调用不同函数不同实例的方法完成一个动作，所以说，他是一个概念，你可以认为这个application只定义了流程，而没有相应的代码。在api-paste.ini文件中的第一段:</p>\n\n<pre><code>[composite:quantum]\nuse = egg:Paste#urlmap\n/: quantumversions\n/v2.0: quantumapi_v2_0\n</code></pre>\n\n<p>如上，这个application（的名字）就叫做quantum。这个其实是个抽象的application,而后面的一些配置：</p>\n\n<pre><code>[app:quantumversions]\npaste.app_factory = quantum.api.versions:Versions.factory\n</code></pre>\n\n<p>这里也定义了一个app，这个当然就有具体的代码和实例了。当然，你可以认为在api-paste.ini文件中每个段都定义了一个app，loadapp()会把这个app按照一定的规则组合成yige</p>\n\n<p><strong>Routes</strong></p>\n\n<p>在例子API中，我们说到REST API中这个后缀，专业点的说法就是路径path，很是重要。他能决定quantum最终调用的处理方式，那么如何决定这么个事呢，这个时候就需要引入路由这个概念了，与网络中的路由类似，OpenStack中引入Routes这个库就是可以根据REST API中的path信息进行一个调度。</p>\n\n<p><strong>Router</strong></p>\n\n<p>为了完成调度，肯定就需要一个调度器，这个就是Router，正如api-paste.ini中描述的一个API经过application处理以后最后到达APIRouter，这个API Router根据自己生成的路由规则把相应的API内容调度到一个处理它的东西上（controller,如下）。</p>\n\n<p>由于quantum api有核心api和扩展api，所以api-paste.ini中定义的extension其实再载入了相应扩展API定义以后也会生成一个Router，处理扩展API相关，这个下面会讲。</p>\n\n<p><strong>Routes Table：</strong></p>\n\n<p>既然是路由，那么就需要一个路由表了，这个路由表的作用就是让程序能够根据REST API的path信息将相应的操作传递到一个处理它的“东西上”，这个“东西”是什么呢？名字就叫controller：</p>\n\n<p><strong>controller</strong></p>\n\n<p>controller是什么意思？controller就是一个调度器，我们知道，quantum api的操作其实都是plugin来完成的，那么最基本的，肯定是使用plugin中的函数来完成。前面的路由routes，只能根据一定的规则把path路径或者HTTP的body参数路由到一个controller，那么这个controller，要做的就是根据传递过来的信息，plugin中需要执行操作的函数，并调用这个函数，当然，controller也会把body信息(如果有)传递给plugin相关函数。OK，到这里，我必须引入quantum api中的一些基本概念了。</p>\n\n<p><strong>resource</strong></p>\n\n<p>从quantum api中就可以看出来，resource就是一个需要操作的资源，多个resource的集合就是resources,举个例子，quantum中三大概念，network,subnet,port，我们假设API形式为/v2.0/port/XXX /v2.0/network/XXX 这些中的port,network就是resource，那么多个resouce和在一起，就是resources了撒，不过quantum给他换了个名字，叫collection，所以quantum中的REST API都是/v2.0/ports/XXX /v2.0/networks/XXX这种了，因为resource，collection这个词会在代码中出现，所以你明白他是什么意思就OK了！简单一个以quantum中network的总结：</p>\n\n<pre><code>networks = collection\nnetwork = resource\n</code></pre>\n\n<p>我举一个简单的route中添加路由表的例子，仅作举例，不懂的话没关系，以后会深入讲：</p>\n\n<pre><code>from routes import Mapper  \nmap = Mapper()  \nmap.connect(None, \"/error/{action}/{id}, controller=\"error\")  \nmap.connect(\"home\", \"/\", controller=\"main\", action=\"index\")  \n\n# Match a URL, returns a dict or None if no match  \nresult = map.match(''/error/myapp/4'')  \n# result == {''controller'': ''main'', ''action'': ''myapp'', ''id'': ''4''}  \n</code></pre>\n\n<p><strong>action</strong></p>\n\n<p>在routes表中，我们注意有一个action,这个在代码中也会涉及，action是啥意思，我们知道HTTP请求中GET PUT POST等方法，对应需要的操作，那么在quantum代码中，我们不这样叫，我们把HTTP的方法映射到对资源的action（操作上），这个映射关系如下所示，这个图中，collection就是上面的概念resources，而这其实也是一个简单的routes表了，不过目前我们只需要看看action和method的对应。</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/routepath.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/routepath.png\" alt=\"routepath\" width=\"888\" height=\"170\" class=\"aligncenter size-full wp-image-308\" /></a></p>\n\n<p>整个上面所说的其实都是一个<strong>MVC（模型-视图-控制）</strong>框架，这是一个软件开发方式，可以自己学习一下,可以更好的理解OpenStack各个组件的REST API思想（用了python各种库来实现了一个MVC）。</p>\n\n<h2>API&amp;扩展API</h2>\n\n<p>Quantum是有两类API的，一类是核心API，包括networks,ports,subnets的API，这个API的Router是通过api-paste.ini中的APIRouter来进行的，同时你可以扩展API，相应的扩展都在quantum/extensions目录下，你可以把自己定义的resoucre加入到扩展中，形成扩展API，这一部分后续文章讲，现在只是基础概念。而扩展API的Router其实是在api-paste.ini中调用extension_middleware完成的，所以，整个流程可以如下两个图，这两个图体现了本文全部内容：</p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/loadapp.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/loadapp.png\" alt=\"loadapp\" width=\"794\" height=\"547\" class=\"aligncenter size-full wp-image-309\" /></a></p>\n\n<p><a href=\"http://blog.wachang.net/wp-content/uploads/2013/04/http.png\"><img src=\"http://blog.wachang.net/wp-content/uploads/2013/04/http.png\" alt=\"http\" width=\"687\" height=\"634\" class=\"aligncenter size-full wp-image-310\" /></a></p>\n','Quantum WSGI中代码概念及如何处理API','','inherit','open','open','','303-autosave','','','2013-04-07 10:49:53','2013-04-07 02:49:53','','303','http://blog.wachang.net/2013/04/303-autosave/','0','revision','','0');");

require("../../inc/footer.php");
?>