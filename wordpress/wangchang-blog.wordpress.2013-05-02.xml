<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.5.1" created="2013-05-02 07:06" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Wang Chang&#039;s Blog</title>
	<link>http://blog.wachang.net</link>
	<description>Just Be Interested In Internet</description>
	<pubDate>Thu, 02 May 2013 07:06:31 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://blog.wachang.net</wp:base_site_url>
	<wp:base_blog_url>http://blog.wachang.net</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>ati9550128m</wp:author_login><wp:author_email>wangchang365@outlook.com</wp:author_email><wp:author_display_name><![CDATA[ati9550128m]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>37</wp:term_id><wp:category_nicename>coding</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Coding]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>38</wp:term_id><wp:category_nicename>life</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Life]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>22</wp:term_id><wp:category_nicename>openflow</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[OpenFlow]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>23</wp:term_id><wp:category_nicename>openstack</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[OpenStack]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>28</wp:term_id><wp:category_nicename>python</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Python]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>27</wp:term_id><wp:category_nicename>web%e5%bc%80%e5%8f%91</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Web开发]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>17</wp:term_id><wp:category_nicename>%e5%8d%8f%e8%ae%ae%e5%ad%a6%e4%b9%a0</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[协议学习]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[技术学习]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[未分类]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>2</wp:term_id><wp:category_nicename>%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[运维管理]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>amqp</wp:tag_slug><wp:tag_name><![CDATA[amqp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>cgi</wp:tag_slug><wp:tag_name><![CDATA[cgi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>dns</wp:tag_slug><wp:tag_name><![CDATA[dns]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>fastcgi</wp:tag_slug><wp:tag_name><![CDATA[fastcgi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>gre</wp:tag_slug><wp:tag_name><![CDATA[GRE]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>hadoop</wp:tag_slug><wp:tag_name><![CDATA[hadoop]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>ip</wp:tag_slug><wp:tag_name><![CDATA[ip]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>iptables</wp:tag_slug><wp:tag_name><![CDATA[iptables]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>5</wp:term_id><wp:tag_slug>ldap</wp:tag_slug><wp:tag_name><![CDATA[ldap]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4</wp:term_id><wp:tag_slug>letodms</wp:tag_slug><wp:tag_name><![CDATA[letodms]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>3</wp:term_id><wp:tag_slug>letodms-ldap</wp:tag_slug><wp:tag_name><![CDATA[letodms.ldap]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>nvgre</wp:tag_slug><wp:tag_name><![CDATA[NVGRE]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>openstack-2</wp:tag_slug><wp:tag_name><![CDATA[openstack]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>openvpn</wp:tag_slug><wp:tag_name><![CDATA[openvpn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>openvswitch</wp:tag_slug><wp:tag_name><![CDATA[openvswitch]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>paste-deploy</wp:tag_slug><wp:tag_name><![CDATA[paste.deploy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>php</wp:tag_slug><wp:tag_name><![CDATA[php]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>php-cgi</wp:tag_slug><wp:tag_name><![CDATA[php-cgi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>php-fpm</wp:tag_slug><wp:tag_name><![CDATA[php-fpm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>python-2</wp:tag_slug><wp:tag_name><![CDATA[python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>quantum</wp:tag_slug><wp:tag_name><![CDATA[quantum]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>rabbitmq</wp:tag_slug><wp:tag_name><![CDATA[rabbitmq]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>sphinx</wp:tag_slug><wp:tag_name><![CDATA[sphinx]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>tunnel</wp:tag_slug><wp:tag_name><![CDATA[tunnel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>wine</wp:tag_slug><wp:tag_name><![CDATA[wine]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>wordpress</wp:tag_slug><wp:tag_name><![CDATA[wordpress]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>wsgi</wp:tag_slug><wp:tag_name><![CDATA[wsgi]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id>7</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>%e5%af%bc%e8%88%aa%e8%8f%9c%e5%8d%95</wp:term_slug><wp:term_name><![CDATA[导航菜单]]></wp:term_name></wp:term>

	<generator>http://wordpress.org/?v=3.5.1</generator>

	<item>
		<title>logo</title>
		<link>http://blog.wachang.net/?attachment_id=31</link>
		<pubDate>Wed, 27 Feb 2013 10:40:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/logo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2013-02-27 18:40:00</wp:post_date>
		<wp:post_date_gmt>2013-02-27 10:40:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>logo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/logo.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/logo.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:52;s:6:"height";i:52;s:4:"file";s:16:"2013/02/logo.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-intro-1</title>
		<link>http://blog.wachang.net/?attachment_id=41</link>
		<pubDate>Wed, 27 Feb 2013 13:19:47 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2013-02-27 21:19:47</wp:post_date>
		<wp:post_date_gmt>2013-02-27 13:19:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-intro-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-intro-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:712;s:6:"height";i:319;s:4:"file";s:24:"2013/02/amqp-intro-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"amqp-intro-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"amqp-intro-1-300x134.png";s:5:"width";i:300;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-protocol</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/amqp-protocol/</link>
		<pubDate>Thu, 28 Feb 2013 11:54:29 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date>2013-02-28 19:54:29</wp:post_date>
		<wp:post_date_gmt>2013-02-28 11:54:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-protocol</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>54</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-protocol.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:303;s:6:"height";i:355;s:4:"file";s:25:"2013/02/amqp-protocol.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"amqp-protocol-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"amqp-protocol-256x300.png";s:5:"width";i:256;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-protocol-3</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/amqp-protocol-3/</link>
		<pubDate>Thu, 28 Feb 2013 12:00:30 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date>2013-02-28 20:00:30</wp:post_date>
		<wp:post_date_gmt>2013-02-28 12:00:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-protocol-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>54</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol-3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-protocol-3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:714;s:6:"height";i:117;s:4:"file";s:27:"2013/02/amqp-protocol-3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"amqp-protocol-3-150x117.png";s:5:"width";i:150;s:6:"height";i:117;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"amqp-protocol-3-300x49.png";s:5:"width";i:300;s:6:"height";i:49;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-protocol-2</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/amqp-protocol-2/</link>
		<pubDate>Thu, 28 Feb 2013 12:01:26 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date>2013-02-28 20:01:26</wp:post_date>
		<wp:post_date_gmt>2013-02-28 12:01:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-protocol-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>54</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol-2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-protocol-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:571;s:6:"height";i:239;s:4:"file";s:27:"2013/02/amqp-protocol-2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"amqp-protocol-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"amqp-protocol-2-300x125.png";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-intro-1</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/amqp-intro-1-2/</link>
		<pubDate>Thu, 28 Feb 2013 12:02:25 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-11.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2013-02-28 20:02:25</wp:post_date>
		<wp:post_date_gmt>2013-02-28 12:02:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-intro-1-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>54</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-11.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-intro-11.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:712;s:6:"height";i:319;s:4:"file";s:25:"2013/02/amqp-intro-11.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"amqp-intro-11-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"amqp-intro-11-300x134.png";s:5:"width";i:300;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-intro-3-fanout</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/amqp-intro-3-fanout/</link>
		<pubDate>Thu, 28 Feb 2013 12:03:02 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-3-fanout.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date>2013-02-28 20:03:02</wp:post_date>
		<wp:post_date_gmt>2013-02-28 12:03:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-intro-3-fanout</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>54</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-3-fanout.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-intro-3-fanout.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:713;s:6:"height";i:447;s:4:"file";s:31:"2013/02/amqp-intro-3-fanout.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"amqp-intro-3-fanout-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"amqp-intro-3-fanout-300x188.png";s:5:"width";i:300;s:6:"height";i:188;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-intro-2</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/amqp-intro-2/</link>
		<pubDate>Thu, 28 Feb 2013 12:03:29 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2013-02-28 20:03:29</wp:post_date>
		<wp:post_date_gmt>2013-02-28 12:03:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-intro-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>54</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-intro-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:689;s:6:"height";i:511;s:4:"file";s:24:"2013/02/amqp-intro-2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"amqp-intro-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"amqp-intro-2-300x222.png";s:5:"width";i:300;s:6:"height";i:222;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-intro-4-e1</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/amqp-intro-4-e1/</link>
		<pubDate>Thu, 28 Feb 2013 12:04:46 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date>2013-02-28 20:04:46</wp:post_date>
		<wp:post_date_gmt>2013-02-28 12:04:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-intro-4-e1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>54</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-intro-4-e1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:566;s:6:"height";i:160;s:4:"file";s:27:"2013/02/amqp-intro-4-e1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"amqp-intro-4-e1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"amqp-intro-4-e1-300x84.png";s:5:"width";i:300;s:6:"height";i:84;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-intro-4-e2</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/amqp-intro-4-e2/</link>
		<pubDate>Thu, 28 Feb 2013 12:05:20 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2013-02-28 20:05:20</wp:post_date>
		<wp:post_date_gmt>2013-02-28 12:05:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-intro-4-e2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>54</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-intro-4-e2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:574;s:6:"height";i:161;s:4:"file";s:27:"2013/02/amqp-intro-4-e2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"amqp-intro-4-e2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"amqp-intro-4-e2-300x84.png";s:5:"width";i:300;s:6:"height";i:84;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-intro-4-e3</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/amqp-intro-4-e3/</link>
		<pubDate>Thu, 28 Feb 2013 12:05:35 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date>2013-02-28 20:05:35</wp:post_date>
		<wp:post_date_gmt>2013-02-28 12:05:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-intro-4-e3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>54</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-intro-4-e3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:571;s:6:"height";i:156;s:4:"file";s:27:"2013/02/amqp-intro-4-e3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"amqp-intro-4-e3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"amqp-intro-4-e3-300x81.png";s:5:"width";i:300;s:6:"height";i:81;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-intro-4-e4</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/amqp-intro-4-e4/</link>
		<pubDate>Thu, 28 Feb 2013 12:05:44 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2013-02-28 20:05:44</wp:post_date>
		<wp:post_date_gmt>2013-02-28 12:05:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-intro-4-e4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>54</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e4.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-intro-4-e4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:582;s:6:"height";i:161;s:4:"file";s:27:"2013/02/amqp-intro-4-e4.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"amqp-intro-4-e4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"amqp-intro-4-e4-300x82.png";s:5:"width";i:300;s:6:"height";i:82;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>amqp-logo</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/amqp-logo-2/</link>
		<pubDate>Thu, 28 Feb 2013 12:29:23 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/02/amqp-logo1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2013-02-28 20:29:23</wp:post_date>
		<wp:post_date_gmt>2013-02-28 12:29:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>amqp-logo-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>54</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/02/amqp-logo1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/amqp-logo1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:90;s:4:"file";s:22:"2013/02/amqp-logo1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"amqp-logo1-150x90.png";s:5:"width";i:150;s:6:"height";i:90;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"amqp-logo1-300x42.png";s:5:"width";i:300;s:6:"height";i:42;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gre-encap-1</title>
		<link>http://blog.wachang.net/2013/03/gre-study-note/gre-encap-1/</link>
		<pubDate>Tue, 05 Mar 2013 06:30:42 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/gre-encap-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2013-03-05 14:30:42</wp:post_date>
		<wp:post_date_gmt>2013-03-05 06:30:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gre-encap-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>93</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/gre-encap-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/gre-encap-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:579;s:6:"height";i:340;s:4:"file";s:23:"2013/03/gre-encap-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"gre-encap-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"gre-encap-1-300x176.png";s:5:"width";i:300;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gre-decap-1</title>
		<link>http://blog.wachang.net/2013/03/gre-study-note/gre-decap-1/</link>
		<pubDate>Tue, 05 Mar 2013 06:31:21 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/gre-decap-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2013-03-05 14:31:21</wp:post_date>
		<wp:post_date_gmt>2013-03-05 06:31:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gre-decap-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>93</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/gre-decap-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/gre-decap-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:614;s:6:"height";i:328;s:4:"file";s:23:"2013/03/gre-decap-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"gre-decap-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"gre-decap-1-300x160.png";s:5:"width";i:300;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GRE-format</title>
		<link>http://blog.wachang.net/2013/03/gre-study-note/gre-format/</link>
		<pubDate>Tue, 05 Mar 2013 06:34:11 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/GRE-format.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2013-03-05 14:34:11</wp:post_date>
		<wp:post_date_gmt>2013-03-05 06:34:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gre-format</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>93</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/GRE-format.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/GRE-format.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:580;s:6:"height";i:330;s:4:"file";s:22:"2013/03/GRE-format.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"GRE-format-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"GRE-format-300x170.png";s:5:"width";i:300;s:6:"height";i:170;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gre-example</title>
		<link>http://blog.wachang.net/2013/03/gre-study-note/gre-example/</link>
		<pubDate>Tue, 05 Mar 2013 06:42:15 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/gre-example.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date>2013-03-05 14:42:15</wp:post_date>
		<wp:post_date_gmt>2013-03-05 06:42:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gre-example</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>93</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/gre-example.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/gre-example.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:314;s:6:"height";i:83;s:4:"file";s:23:"2013/03/gre-example.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"gre-example-150x83.png";s:5:"width";i:150;s:6:"height";i:83;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"gre-example-300x79.png";s:5:"width";i:300;s:6:"height";i:79;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gre-example-2</title>
		<link>http://blog.wachang.net/2013/03/gre-study-note/gre-example-2/</link>
		<pubDate>Tue, 05 Mar 2013 06:55:27 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/gre-example-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2013-03-05 14:55:27</wp:post_date>
		<wp:post_date_gmt>2013-03-05 06:55:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gre-example-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>93</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/gre-example-2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/gre-example-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:586;s:6:"height";i:348;s:4:"file";s:25:"2013/03/gre-example-2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"gre-example-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"gre-example-2-300x178.png";s:5:"width";i:300;s:6:"height";i:178;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iptables-workflow</title>
		<link>http://blog.wachang.net/2013/03/iptables-useage-ref-1/iptables-workflow/</link>
		<pubDate>Thu, 07 Mar 2013 17:02:13 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/iptables-workflow.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2013-03-08 01:02:13</wp:post_date>
		<wp:post_date_gmt>2013-03-07 17:02:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iptables-workflow</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>112</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/iptables-workflow.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/iptables-workflow.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1032;s:6:"height";i:533;s:4:"file";s:29:"2013/03/iptables-workflow.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"iptables-workflow-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:29:"iptables-workflow-300x154.jpg";s:5:"width";i:300;s:6:"height";i:154;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:30:"iptables-workflow-1024x528.jpg";s:5:"width";i:1024;s:6:"height";i:528;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iptables-example-1</title>
		<link>http://blog.wachang.net/2013/03/iptables-useage-ref-1/iptables-example-1/</link>
		<pubDate>Thu, 07 Mar 2013 17:05:09 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date>2013-03-08 01:05:09</wp:post_date>
		<wp:post_date_gmt>2013-03-07 17:05:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iptables-example-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>112</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/iptables-example-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1389;s:6:"height";i:261;s:4:"file";s:30:"2013/03/iptables-example-1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"iptables-example-1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:29:"iptables-example-1-300x56.jpg";s:5:"width";i:300;s:6:"height";i:56;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:31:"iptables-example-1-1024x192.jpg";s:5:"width";i:1024;s:6:"height";i:192;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iptables-example-2</title>
		<link>http://blog.wachang.net/2013/03/iptables-useage-ref-1/iptables-example-2/</link>
		<pubDate>Thu, 07 Mar 2013 17:06:07 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date>2013-03-08 01:06:07</wp:post_date>
		<wp:post_date_gmt>2013-03-07 17:06:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iptables-example-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>112</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/iptables-example-2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1896;s:6:"height";i:332;s:4:"file";s:30:"2013/03/iptables-example-2.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"iptables-example-2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:29:"iptables-example-2-300x52.jpg";s:5:"width";i:300;s:6:"height";i:52;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:31:"iptables-example-2-1024x179.jpg";s:5:"width";i:1024;s:6:"height";i:179;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iptables-example-3</title>
		<link>http://blog.wachang.net/2013/03/iptables-useage-ref-1/iptables-example-3/</link>
		<pubDate>Thu, 07 Mar 2013 17:06:54 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2013-03-08 01:06:54</wp:post_date>
		<wp:post_date_gmt>2013-03-07 17:06:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iptables-example-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>112</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-3.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/iptables-example-3.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1893;s:6:"height";i:418;s:4:"file";s:30:"2013/03/iptables-example-3.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"iptables-example-3-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:29:"iptables-example-3-300x66.jpg";s:5:"width";i:300;s:6:"height";i:66;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:31:"iptables-example-3-1024x226.jpg";s:5:"width";i:1024;s:6:"height";i:226;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tables_traverse</title>
		<link>http://blog.wachang.net/2013/03/iptables-useage-ref-1/tables_traverse/</link>
		<pubDate>Thu, 07 Mar 2013 17:07:14 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/tables_traverse.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date>2013-03-08 01:07:14</wp:post_date>
		<wp:post_date_gmt>2013-03-07 17:07:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tables_traverse</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>112</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/tables_traverse.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/tables_traverse.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:525;s:6:"height";i:585;s:4:"file";s:27:"2013/03/tables_traverse.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"tables_traverse-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:27:"tables_traverse-269x300.jpg";s:5:"width";i:269;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>openvswitch-gre</title>
		<link>http://blog.wachang.net/2013/03/openvswitch-configure-gre-note-1/openvswitch-gre/</link>
		<pubDate>Wed, 13 Mar 2013 14:52:54 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/openvswitch-gre.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date>2013-03-13 22:52:54</wp:post_date>
		<wp:post_date_gmt>2013-03-13 14:52:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openvswitch-gre</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>138</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/openvswitch-gre.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/openvswitch-gre.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:666;s:6:"height";i:409;s:4:"file";s:27:"2013/03/openvswitch-gre.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"openvswitch-gre-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:27:"openvswitch-gre-300x184.jpg";s:5:"width";i:300;s:6:"height";i:184;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"openvswitch-gre-640x200.jpg";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sit_tunnel1</title>
		<link>http://blog.wachang.net/2013/03/tunnel-techology-note/sit_tunnel1/</link>
		<pubDate>Wed, 13 Mar 2013 15:13:42 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/sit_tunnel1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date>2013-03-13 23:13:42</wp:post_date>
		<wp:post_date_gmt>2013-03-13 15:13:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sit_tunnel1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>151</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/sit_tunnel1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/sit_tunnel1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:794;s:6:"height";i:442;s:4:"file";s:23:"2013/03/sit_tunnel1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"sit_tunnel1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:23:"sit_tunnel1-300x167.jpg";s:5:"width";i:300;s:6:"height";i:167;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"sit_tunnel1-640x200.jpg";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gre_tunnel1</title>
		<link>http://blog.wachang.net/2013/03/tunnel-techology-note/gre_tunnel1/</link>
		<pubDate>Wed, 13 Mar 2013 15:14:52 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/gre_tunnel1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date>2013-03-13 23:14:52</wp:post_date>
		<wp:post_date_gmt>2013-03-13 15:14:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gre_tunnel1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>151</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/gre_tunnel1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/gre_tunnel1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:794;s:6:"height";i:442;s:4:"file";s:23:"2013/03/gre_tunnel1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"gre_tunnel1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:23:"gre_tunnel1-300x167.jpg";s:5:"width";i:300;s:6:"height";i:167;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"gre_tunnel1-640x200.jpg";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gre_tunnel</title>
		<link>http://blog.wachang.net/2013/03/tunnel-techology-note/gre_tunnel/</link>
		<pubDate>Wed, 13 Mar 2013 15:15:32 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/gre_tunnel.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date>2013-03-13 23:15:32</wp:post_date>
		<wp:post_date_gmt>2013-03-13 15:15:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gre_tunnel</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>151</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/gre_tunnel.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/gre_tunnel.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:847;s:6:"height";i:445;s:4:"file";s:22:"2013/03/gre_tunnel.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"gre_tunnel-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:22:"gre_tunnel-300x157.jpg";s:5:"width";i:300;s:6:"height";i:157;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"gre_tunnel-640x200.jpg";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gre_header</title>
		<link>http://blog.wachang.net/2013/03/tunnel-techology-note/gre_header/</link>
		<pubDate>Wed, 13 Mar 2013 15:16:39 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/gre_header.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date>2013-03-13 23:16:39</wp:post_date>
		<wp:post_date_gmt>2013-03-13 15:16:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gre_header</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>151</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/gre_header.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/gre_header.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:479;s:6:"height";i:119;s:4:"file";s:22:"2013/03/gre_header.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"gre_header-150x119.png";s:5:"width";i:150;s:6:"height";i:119;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"gre_header-300x74.png";s:5:"width";i:300;s:6:"height";i:74;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>EHO ARCH</title>
		<link>http://blog.wachang.net/2013/03/mirantis-elastic-hadoop-on-openstack/eho-arch/</link>
		<pubDate>Tue, 19 Mar 2013 14:27:40 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/EHO-ARCH.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date>2013-03-19 22:27:40</wp:post_date>
		<wp:post_date_gmt>2013-03-19 14:27:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>eho-arch</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/EHO-ARCH.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/EHO-ARCH.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:787;s:6:"height";i:453;s:4:"file";s:20:"2013/03/EHO-ARCH.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"EHO-ARCH-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"EHO-ARCH-300x172.jpg";s:5:"width";i:300;s:6:"height";i:172;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"EHO-ARCH-640x200.jpg";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nvgre-cross-subnets</title>
		<link>http://blog.wachang.net/2013/03/nvgre-network-virtualization-using-generic-routing-encapsulation/nvgre-cross-subnets/</link>
		<pubDate>Tue, 19 Mar 2013 15:22:17 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/nvgre-cross-subnets.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2013-03-19 23:22:17</wp:post_date>
		<wp:post_date_gmt>2013-03-19 15:22:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nvgre-cross-subnets</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>172</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/nvgre-cross-subnets.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/nvgre-cross-subnets.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:633;s:6:"height";i:747;s:4:"file";s:31:"2013/03/nvgre-cross-subnets.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"nvgre-cross-subnets-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:31:"nvgre-cross-subnets-254x300.jpg";s:5:"width";i:254;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:31:"nvgre-cross-subnets-633x200.jpg";s:5:"width";i:633;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>vm-ovs-workflow</title>
		<link>http://blog.wachang.net/2013/03/openvswitch-fullbook-2-workflow-2/vm-ovs-workflow/</link>
		<pubDate>Mon, 25 Mar 2013 10:58:09 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/vm-ovs-workflow.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2013-03-25 18:58:09</wp:post_date>
		<wp:post_date_gmt>2013-03-25 10:58:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vm-ovs-workflow</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>205</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/vm-ovs-workflow.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/vm-ovs-workflow.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:752;s:6:"height";i:416;s:4:"file";s:27:"2013/03/vm-ovs-workflow.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"vm-ovs-workflow-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"vm-ovs-workflow-300x165.png";s:5:"width";i:300;s:6:"height";i:165;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"vm-ovs-workflow-640x200.png";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rpcproxy</title>
		<link>http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-rpc-1/rpcproxy/</link>
		<pubDate>Tue, 26 Mar 2013 05:02:48 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/rpcproxy.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2013-03-26 13:02:48</wp:post_date>
		<wp:post_date_gmt>2013-03-26 05:02:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rpcproxy</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>225</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/rpcproxy.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/rpcproxy.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:210;s:6:"height";i:324;s:4:"file";s:20:"2013/03/rpcproxy.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"rpcproxy-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"rpcproxy-194x300.png";s:5:"width";i:194;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"rpcproxy-210x200.png";s:5:"width";i:210;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PluginAgent的交互1</title>
		<link>http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-rpc-1/pluginagent%e7%9a%84%e4%ba%a4%e4%ba%921/</link>
		<pubDate>Tue, 26 Mar 2013 08:53:14 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/PluginAgent的交互1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date>2013-03-26 16:53:14</wp:post_date>
		<wp:post_date_gmt>2013-03-26 08:53:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pluginagent%e7%9a%84%e4%ba%a4%e4%ba%921</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>225</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/PluginAgent的交互1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/PluginAgent的交互1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1259;s:6:"height";i:870;s:4:"file";s:33:"2013/03/PluginAgent的交互1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"PluginAgent的交互1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"PluginAgent的交互1-300x207.png";s:5:"width";i:300;s:6:"height";i:207;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:34:"PluginAgent的交互1-1024x707.png";s:5:"width";i:1024;s:6:"height";i:707;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:33:"PluginAgent的交互1-640x200.png";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PluginAgent的交互2</title>
		<link>http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-rpc-1/pluginagent%e7%9a%84%e4%ba%a4%e4%ba%922/</link>
		<pubDate>Tue, 26 Mar 2013 08:59:46 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/PluginAgent的交互2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date>2013-03-26 16:59:46</wp:post_date>
		<wp:post_date_gmt>2013-03-26 08:59:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pluginagent%e7%9a%84%e4%ba%a4%e4%ba%922</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>225</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/PluginAgent的交互2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/PluginAgent的交互2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:570;s:6:"height";i:621;s:4:"file";s:33:"2013/03/PluginAgent的交互2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"PluginAgent的交互2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"PluginAgent的交互2-275x300.png";s:5:"width";i:275;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:33:"PluginAgent的交互2-570x200.png";s:5:"width";i:570;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RPC源码流程</title>
		<link>http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-rpc-1/rpc%e6%ba%90%e7%a0%81%e6%b5%81%e7%a8%8b/</link>
		<pubDate>Tue, 26 Mar 2013 13:53:48 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/RPC源码流程.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2013-03-26 21:53:48</wp:post_date>
		<wp:post_date_gmt>2013-03-26 13:53:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rpc%e6%ba%90%e7%a0%81%e6%b5%81%e7%a8%8b</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>225</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/RPC源码流程.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/RPC源码流程.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:855;s:6:"height";i:400;s:4:"file";s:27:"2013/03/RPC源码流程.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"RPC源码流程-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:27:"RPC源码流程-300x140.jpg";s:5:"width";i:300;s:6:"height";i:140;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"RPC源码流程-640x200.jpg";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>quantum ovs plugin代码目录</title>
		<link>http://blog.wachang.net/2013/03/quantum-ovs-plugin-code-structure/quantum-ovs-plugin%e4%bb%a3%e7%a0%81%e7%9b%ae%e5%bd%95/</link>
		<pubDate>Tue, 26 Mar 2013 16:15:09 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/quantum-ovs-plugin代码目录.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date>2013-03-27 00:15:09</wp:post_date>
		<wp:post_date_gmt>2013-03-26 16:15:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quantum-ovs-plugin%e4%bb%a3%e7%a0%81%e7%9b%ae%e5%bd%95</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/quantum-ovs-plugin代码目录.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/quantum-ovs-plugin代码目录.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:315;s:6:"height";i:405;s:4:"file";s:42:"2013/03/quantum-ovs-plugin代码目录.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:42:"quantum-ovs-plugin代码目录-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:42:"quantum-ovs-plugin代码目录-233x300.jpg";s:5:"width";i:233;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:42:"quantum-ovs-plugin代码目录-315x200.jpg";s:5:"width";i:315;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ovs_plugin_uml</title>
		<link>http://blog.wachang.net/2013/03/quantum-ovs-plugin-code-structure/ovs_plugin_uml/</link>
		<pubDate>Tue, 26 Mar 2013 16:28:52 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/ovs_plugin_uml.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date>2013-03-27 00:28:52</wp:post_date>
		<wp:post_date_gmt>2013-03-26 16:28:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ovs_plugin_uml</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/ovs_plugin_uml.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/ovs_plugin_uml.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1619;s:6:"height";i:919;s:4:"file";s:26:"2013/03/ovs_plugin_uml.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"ovs_plugin_uml-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"ovs_plugin_uml-300x170.jpg";s:5:"width";i:300;s:6:"height";i:170;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:27:"ovs_plugin_uml-1024x581.jpg";s:5:"width";i:1024;s:6:"height";i:581;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"ovs_plugin_uml-640x200.jpg";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ovs_agent_uml</title>
		<link>http://blog.wachang.net/2013/03/quantum-ovs-plugin-code-structure/ovs_agent_uml/</link>
		<pubDate>Tue, 26 Mar 2013 16:43:01 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/ovs_agent_uml.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date>2013-03-27 00:43:01</wp:post_date>
		<wp:post_date_gmt>2013-03-26 16:43:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ovs_agent_uml</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>238</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/ovs_agent_uml.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/ovs_agent_uml.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:897;s:6:"height";i:917;s:4:"file";s:25:"2013/03/ovs_agent_uml.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"ovs_agent_uml-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:25:"ovs_agent_uml-293x300.jpg";s:5:"width";i:293;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:25:"ovs_agent_uml-640x200.jpg";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sphinx-example</title>
		<link>http://blog.wachang.net/2013/03/introduce-to-sphinx/sphinx-example/</link>
		<pubDate>Fri, 29 Mar 2013 18:44:03 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/03/sphinx-example.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date>2013-03-30 02:44:03</wp:post_date>
		<wp:post_date_gmt>2013-03-29 18:44:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sphinx-example</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/03/sphinx-example.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/sphinx-example.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:649;s:6:"height";i:416;s:4:"file";s:26:"2013/03/sphinx-example.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"sphinx-example-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"sphinx-example-300x192.jpg";s:5:"width";i:300;s:6:"height";i:192;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"sphinx-example-640x200.jpg";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>quantum-bin</title>
		<link>http://blog.wachang.net/2013/04/quantum-code-base/quantum-bin/</link>
		<pubDate>Mon, 01 Apr 2013 08:01:54 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date>2013-04-01 16:01:54</wp:post_date>
		<wp:post_date_gmt>2013-04-01 08:01:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quantum-bin</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>281</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/quantum-bin.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:289;s:6:"height";i:458;s:4:"file";s:23:"2013/04/quantum-bin.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"quantum-bin-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"quantum-bin-189x300.png";s:5:"width";i:189;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"quantum-bin-289x200.png";s:5:"width";i:289;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/2013/03/121/</link>
		<pubDate>Fri, 08 Mar 2013 08:38:47 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2013-03-08 16:38:47</wp:post_date>
		<wp:post_date_gmt>2013-03-08 08:38:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>121</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e5%af%bc%e8%88%aa%e8%8f%9c%e5%8d%95"><![CDATA[导航菜单]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>微博</title>
		<link>http://blog.wachang.net/2013/03/%e5%be%ae%e5%8d%9a%e6%88%91/</link>
		<pubDate>Sat, 09 Mar 2013 15:59:08 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2013-03-09 23:59:08</wp:post_date>
		<wp:post_date_gmt>2013-03-09 15:59:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%be%ae%e5%8d%9a%e6%88%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e5%af%bc%e8%88%aa%e8%8f%9c%e5%8d%95"><![CDATA[导航菜单]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[136]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://weibo.com/clusky]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/2013/03/208/</link>
		<pubDate>Mon, 25 Mar 2013 08:47:37 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/2013/03/208/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2013-03-25 16:47:37</wp:post_date>
		<wp:post_date_gmt>2013-03-25 08:47:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>208</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e5%af%bc%e8%88%aa%e8%8f%9c%e5%8d%95"><![CDATA[导航菜单]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[206]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/2013/03/211/</link>
		<pubDate>Mon, 25 Mar 2013 08:50:09 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/2013/03/211/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date>2013-03-25 16:50:09</wp:post_date>
		<wp:post_date_gmt>2013-03-25 08:50:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>211</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e5%af%bc%e8%88%aa%e8%8f%9c%e5%8d%95"><![CDATA[导航菜单]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[209]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wsgi.py</title>
		<link>http://blog.wachang.net/2013/04/quantum-wsgi-base/wsgi-py/</link>
		<pubDate>Tue, 02 Apr 2013 17:30:52 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/wsgi.py_.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2013-04-03 01:30:52</wp:post_date>
		<wp:post_date_gmt>2013-04-02 17:30:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wsgi-py</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>297</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/wsgi.py_.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/wsgi.py_.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1894;s:6:"height";i:854;s:4:"file";s:20:"2013/04/wsgi.py_.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"wsgi.py_-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"wsgi.py_-300x135.png";s:5:"width";i:300;s:6:"height";i:135;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"wsgi.py_-1024x461.png";s:5:"width";i:1024;s:6:"height";i:461;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"wsgi.py_-640x200.png";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>routepath</title>
		<link>http://blog.wachang.net/2013/04/quantum-wsgi-define-and-how-to-handle-api/routepath/</link>
		<pubDate>Wed, 03 Apr 2013 02:27:59 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/routepath.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date>2013-04-03 10:27:59</wp:post_date>
		<wp:post_date_gmt>2013-04-03 02:27:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>routepath</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>303</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/routepath.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/routepath.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:888;s:6:"height";i:170;s:4:"file";s:21:"2013/04/routepath.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"routepath-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"routepath-300x57.png";s:5:"width";i:300;s:6:"height";i:57;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"routepath-640x170.png";s:5:"width";i:640;s:6:"height";i:170;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>loadapp</title>
		<link>http://blog.wachang.net/2013/04/quantum-wsgi-define-and-how-to-handle-api/loadapp/</link>
		<pubDate>Wed, 03 Apr 2013 02:36:56 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/loadapp.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date>2013-04-03 10:36:56</wp:post_date>
		<wp:post_date_gmt>2013-04-03 02:36:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>loadapp</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>303</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/loadapp.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/loadapp.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:794;s:6:"height";i:547;s:4:"file";s:19:"2013/04/loadapp.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"loadapp-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"loadapp-300x206.png";s:5:"width";i:300;s:6:"height";i:206;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"loadapp-640x200.png";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>http</title>
		<link>http://blog.wachang.net/2013/04/quantum-wsgi-define-and-how-to-handle-api/http/</link>
		<pubDate>Wed, 03 Apr 2013 02:37:14 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/http.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date>2013-04-03 10:37:14</wp:post_date>
		<wp:post_date_gmt>2013-04-03 02:37:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>http</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>303</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/http.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/http.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:687;s:6:"height";i:634;s:4:"file";s:16:"2013/04/http.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"http-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"http-300x276.png";s:5:"width";i:300;s:6:"height";i:276;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:16:"http-640x200.png";s:5:"width";i:640;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>courier</title>
		<link>http://blog.wachang.net/2013/04/coding-fonts/courier/</link>
		<pubDate>Wed, 03 Apr 2013 07:12:03 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/courier.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date>2013-04-03 15:12:03</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:12:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>courier</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/courier.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/courier.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:518;s:6:"height";i:221;s:4:"file";s:19:"2013/04/courier.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"courier-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"courier-300x127.png";s:5:"width";i:300;s:6:"height";i:127;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"courier-518x200.png";s:5:"width";i:518;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>andale</title>
		<link>http://blog.wachang.net/2013/04/coding-fonts/andale/</link>
		<pubDate>Wed, 03 Apr 2013 07:13:16 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/andale.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date>2013-04-03 15:13:16</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:13:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>andale</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/andale.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/andale.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:458;s:6:"height";i:206;s:4:"file";s:18:"2013/04/andale.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"andale-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"andale-300x134.png";s:5:"width";i:300;s:6:"height";i:134;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"andale-458x200.png";s:5:"width";i:458;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>monaco</title>
		<link>http://blog.wachang.net/2013/04/coding-fonts/monaco/</link>
		<pubDate>Wed, 03 Apr 2013 07:14:24 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/monaco.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date>2013-04-03 15:14:24</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:14:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monaco</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/monaco.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/monaco.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:436;s:6:"height";i:238;s:4:"file";s:18:"2013/04/monaco.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"monaco-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"monaco-300x163.png";s:5:"width";i:300;s:6:"height";i:163;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"monaco-436x200.png";s:5:"width";i:436;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>profont</title>
		<link>http://blog.wachang.net/2013/04/coding-fonts/profont/</link>
		<pubDate>Wed, 03 Apr 2013 07:15:10 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/profont.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>319</wp:post_id>
		<wp:post_date>2013-04-03 15:15:10</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:15:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>profont</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/profont.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/profont.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:336;s:6:"height";i:153;s:4:"file";s:19:"2013/04/profont.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"profont-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"profont-300x136.png";s:5:"width";i:300;s:6:"height";i:136;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>monofur</title>
		<link>http://blog.wachang.net/2013/04/coding-fonts/monofur/</link>
		<pubDate>Wed, 03 Apr 2013 07:15:48 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/monofur.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date>2013-04-03 15:15:48</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:15:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>monofur</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/monofur.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/monofur.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:393;s:6:"height";i:184;s:4:"file";s:19:"2013/04/monofur.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"monofur-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"monofur-300x140.png";s:5:"width";i:300;s:6:"height";i:140;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>proggy</title>
		<link>http://blog.wachang.net/2013/04/coding-fonts/proggy/</link>
		<pubDate>Wed, 03 Apr 2013 07:16:34 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/proggy.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>321</wp:post_id>
		<wp:post_date>2013-04-03 15:16:34</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:16:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>proggy</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/proggy.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/proggy.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:361;s:6:"height";i:157;s:4:"file";s:18:"2013/04/proggy.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"proggy-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"proggy-300x130.png";s:5:"width";i:300;s:6:"height";i:130;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>droid sans</title>
		<link>http://blog.wachang.net/2013/04/coding-fonts/droid-sans/</link>
		<pubDate>Wed, 03 Apr 2013 07:17:25 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/droid-sans.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date>2013-04-03 15:17:25</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:17:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>droid-sans</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/droid-sans.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/droid-sans.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:440;s:6:"height";i:213;s:4:"file";s:22:"2013/04/droid-sans.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"droid-sans-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"droid-sans-300x145.png";s:5:"width";i:300;s:6:"height";i:145;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"droid-sans-440x200.png";s:5:"width";i:440;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>deja vu sans</title>
		<link>http://blog.wachang.net/2013/04/coding-fonts/deja-vu-sans/</link>
		<pubDate>Wed, 03 Apr 2013 07:18:22 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/deja-vu-sans.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>323</wp:post_id>
		<wp:post_date>2013-04-03 15:18:22</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:18:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deja-vu-sans</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/deja-vu-sans.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/deja-vu-sans.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:461;s:6:"height";i:214;s:4:"file";s:24:"2013/04/deja-vu-sans.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"deja-vu-sans-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"deja-vu-sans-300x139.png";s:5:"width";i:300;s:6:"height";i:139;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"deja-vu-sans-461x200.png";s:5:"width";i:461;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>consolas</title>
		<link>http://blog.wachang.net/2013/04/coding-fonts/consolas/</link>
		<pubDate>Wed, 03 Apr 2013 07:19:04 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/consolas.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>324</wp:post_id>
		<wp:post_date>2013-04-03 15:19:04</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:19:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>consolas</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/consolas.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/consolas.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:478;s:6:"height";i:201;s:4:"file";s:20:"2013/04/consolas.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"consolas-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"consolas-300x126.png";s:5:"width";i:300;s:6:"height";i:126;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"consolas-478x200.png";s:5:"width";i:478;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>inconsolata</title>
		<link>http://blog.wachang.net/2013/04/coding-fonts/inconsolata/</link>
		<pubDate>Wed, 03 Apr 2013 07:20:36 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/inconsolata.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date>2013-04-03 15:20:36</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:20:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>inconsolata</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/inconsolata.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/inconsolata.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:462;s:6:"height";i:195;s:4:"file";s:23:"2013/04/inconsolata.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"inconsolata-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"inconsolata-300x126.png";s:5:"width";i:300;s:6:"height";i:126;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>编程字体</title>
		<link>http://blog.wachang.net/?attachment_id=326</link>
		<pubDate>Wed, 03 Apr 2013 07:23:50 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/wp-content/uploads/2013/04/编程字体.rar</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>326</wp:post_id>
		<wp:post_date>2013-04-03 15:23:50</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:23:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%bc%96%e7%a8%8b%e5%ad%97%e4%bd%93</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.wachang.net/wp-content/uploads/2013/04/编程字体.rar</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/编程字体.rar]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>首页</title>
		<link>http://blog.wachang.net/2013/04/%e9%a6%96%e9%a1%b5/</link>
		<pubDate>Tue, 23 Apr 2013 04:20:50 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=341</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date>2013-04-23 12:20:50</wp:post_date>
		<wp:post_date_gmt>2013-04-23 04:20:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%a6%96%e9%a1%b5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e5%af%bc%e8%88%aa%e8%8f%9c%e5%8d%95"><![CDATA[导航菜单]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[341]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://blog.wachang.net]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于我</title>
		<link>http://blog.wachang.net/about/</link>
		<pubDate>Wed, 27 Feb 2013 06:32:01 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?page_id=10</guid>
		<description></description>
		<content:encoded><![CDATA[##等待编辑]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2013-02-27 14:32:01</wp:post_date>
		<wp:post_date_gmt>2013-02-27 06:32:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[hierarchy]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LetoDMS文档管理系统配置LDAP认证</title>
		<link>http://blog.wachang.net/2013/02/configure-letodms-with-ldap/</link>
		<pubDate>Wed, 27 Feb 2013 11:52:41 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=33</guid>
		<description></description>
		<content:encoded><![CDATA[<p>LetoDMS(http://www.letodms.com/)是一个免费开源的文档管理系统，适合小型企业或者组织用来做整个的文档管理。因为是我们实验室需要相应的文档管理服务，所以在Opendocman和LetoDMS中都适用了一下，总的来看，有一下特点：</p>

<ul>
<li>Opendocman:界面清爽，中文支持较好，不支持LDAP，使用上不太友好。</li>
<li>LetoDMS:界面不是很好看，但是使用很上手，最重要的，支持LDAP。</li>
</ul>

<p>LetoDMS虽说支持LDAP，但是官网上木有配置文档，网上也没多少资料，自己折腾了好久，然后对着代码一步步Debug,才终于搞定，下面做一个记录。</p>

<!--more-->

<h2>LetoDMS中LDAP验证过程</h2>

<p>在LetoDMS中，配置了LDAP以后，会用登陆的uid和密码去匹配LDAP服务器中DN下的uid和密码，成功后再与LetoDMS本地用户数据库进行匹配：1）如果本地LetoDMS中木有相应的用户信息，则根据CN名字信息和UID等创建用户，但不设置密码；2）如果已经有相应的用户信息，则允许登陆，相应的LDAP认证代码在<strong>/op/op.Login.php</strong>中。</p>

<h2>LetoDMS中LDAP验证配置</h2>

<p>在conf/settings.xml中配置LDAP信息，有两个地方:</p>

<pre><code>&lt;authentication enableGuestLogin="false" enablePasswordForgotten="false" restricted="false" enableUserImage="false" disableSelfEdit="false" passwordStrength="0" passwordExpiration="0" passwordHistory="0" passwordStrengthAlgorithm="simple" loginFailure="0" encryptionKey="88401c30b26bdf44f0facbf62849cf1e"&gt;  
</code></pre>

<p>这里的restricted一定要设置为false。当然，这一个也可以通过admin登陆以后，在全局settings里设置。随后，设置LDAP信息：</p>

<pre><code>&lt;connector enable="enable" type="ldap" host="ldap.oinlab.com" port="389" baseDN="ou=People,dc=oinlab"&gt;
</code></pre>

<p>如果此时没效果，别急，编辑<code>inc/inc.ClassSettings.php</code>，再找到如下变量并设置好：</p>

<pre><code>// LDAP
var $_ldapHost = "ldap.oinlab.com"; // URIs are supported, e.g.: ldaps://ldap.host.com
var $_ldapPort = 389; // Optional.
var $_ldapBaseDN = "ou=People,dc=oinlab";
var $_ldapAccountDomainName = "oinlab";
var $_ldapType = 0; // 0 = ldap; 1 = AD
var $_converters = array(); // list of commands used to convert files to text for Indexer
</code></pre>

<p>注意，实际上这个inc中的才是最基本的，这里面的变量值是通过读取<code>conf/setting.xml</code>中的值来的，当然，改了这里面的值得话settings.xml文件也无效了。最后，LetoDMS中相应的LDAP登陆代码位于<code>op/op.Login.php</code>中，有问题的话可以根据这里的代码做一些DEBUG.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date>2013-02-27 19:52:41</wp:post_date>
		<wp:post_date_gmt>2013-02-27 11:52:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configure-letodms-with-ldap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ldap"><![CDATA[ldap]]></category>
		<category domain="post_tag" nicename="letodms"><![CDATA[letodms]]></category>
		<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86"><![CDATA[运维管理]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[hierarchy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[letodms%e6%96%87%e6%a1%a3%e7%ae%a1%e7%90%86%e7%b3%bb%e7%bb%9f%e9%85%8d%e7%bd%aeldap%e8%ae%a4%e8%af%81]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[letodms,ldap]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[LetoDMS文档管理系统配置LDAP认证]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[LetoDMS文档管理系统配置LDAP认证]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[ati9550128m]]></wp:comment_author>
			<wp:comment_author_email>wangchang365@outlook.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>120.94.192.33</wp:comment_author_IP>
			<wp:comment_date>2013-03-03 15:06:29</wp:comment_date>
			<wp:comment_date_gmt>2013-03-03 07:06:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<p>可以评论么？</p>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>也说OpenVPN性能优化加速</title>
		<link>http://blog.wachang.net/?p=105</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=105</guid>
		<description></description>
		<content:encoded><![CDATA[<p>http://digest.definite.name/a-hands-to-write-an-openvpn-wrapper-to-optimize-the-openvpn-performance.html</p>

<p>关于openvpn文章目录
http://blog.csdn.net/dog250/article/details/6990814</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date>2013-03-05 18:11:46</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[hierarchy]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenVPN配置解释</title>
		<link>http://blog.wachang.net/?p=110</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=110</guid>
		<description></description>
		<content:encoded><![CDATA[<p>local 222.197.180.135
port 1194
proto udp</p>

<p>ca /etc/openvpn/ca.crt
cert /etc/openvpn/myservername.crt
key /etc/openvpn/myservername.key</p>

<p>dh /etc/openvpn/dh1024.pem 哈弗曼参数</p>

<p>server 10.8.0.0 255.255.255.0 。1作为自己使用
ifconfig-pool-persist /var/log/openvpn/ipp.txt 记录用户IP的
push "route 192.168.1.0 255.255.255.0"
push "redirect-gateway def1 bypass-dhcp bypass-dns" 客户端所有流量走VPN</p>

<p>push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"推送DNS
client-to-client
duplicate-cn
keepalive 10 120盘算死没死
comp-lzo压缩</p>

<p>http://blog.sina.com.cn/s/blog_54bf138001000800.html
http://blog.sina.com.cn/s/blog_54bf138001000801.html</p>

<p>Nginx&amp;&amp;PHP-FPM配置及优化指南（上）
http://blog.csdn.net/uuleaf/article/details/7739538</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2013-03-07 22:02:21</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[hierarchy]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OVS使用</title>
		<link>http://blog.wachang.net/?p=143</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=143</guid>
		<description></description>
		<content:encoded><![CDATA[<p>http://blog.csdn.net/yahohi/article/details/6631934</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date>2013-03-13 10:35:19</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenStack Folsom Quantum GRE模式工作流程</title>
		<link>http://blog.wachang.net/?p=145</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=145</guid>
		<description></description>
		<content:encoded><![CDATA[<p>https://wiki.openstack.org/wiki/ConfigureOpenvswitch</p>

<p>https://wiki.openstack.org/wiki/Quantum</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date>2013-03-13 15:39:27</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>UML Tools For Python</title>
		<link>http://blog.wachang.net/?p=161</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=161</guid>
		<description></description>
		<content:encoded><![CDATA[<p>有时候看代码需要总结，这个类之间的关系很复杂，懒得有手写，就想用一点工具来自动生成。于是就找了找Python的UML工具，至于什么是UML，随便一查就知道了。具体需求正如以下这哥们所说：</p>

<blockquote>
  <p>随着项目进展，类越来越多，原来做总体设计的时候没有想到有这么复杂的情况:(。现在我想画出uml图来反映各个类之间的关系。</p>
</blockquote>

<p>于是找了下，有这么些工具：</p>

<h2>1 Ecplise插件pyuml</h2>

<p>因为我不用ecplise，所以不知道了。</p>

<h2>2 Python UML Tool</h2>

<p>在http://sourceforge.net/projects/pyut/上找到的，版不过版本确实比较老了，最后更新是09年的。使用起来还是很方便的，比较麻烦的就是对于类神马的必须手动输入成员和方法，<strong>不支持撤销操作</strong>。</p>

<h2>3 Pynsource</h2>

<p><a href="http://www.andypatterns.com/index.php/products/pynsource/">项目主页</a></p>

<p><a href="https://code.google.com/p/pynsource/downloads/list">下载</a></p>

<p>使用上比较方便，导入python文件后就可以自动生成相应的类关系，特别是支持把关系转换成asic表，这个我就喜欢！<strong>用于生成单个Python文件UML就非常好，但是要手动指定类的继承关系之类的很麻烦，不支持撤销操作。</strong></p>

<h2>4 Gaphor</h2>

<p>&lt;sourceforge.net/projects/gaphor/></p>

<p>我找到的版本比较老，python2.5的，安装也很复杂，算了吧。</p>

<h2>Dia</h2>

<p>Dia是基于GTK的图形绘制程序，适用于Linux, Unix和Window DIA软件启动界面 s，以 GPL 许可发布。通俗的说，一个10MB量级的免费软件，代替visio基本没问题，被收入了“最好的300款免费软件”。也有些用户认为Dia很多地方不太好用，但无论如何，它是综合性能最高的免费解决方案。</p>

<h2>参考文章</h2>

<p>http://imtx.me/archives/155.html</p>

<p>http://www.cnblogs.com/dkblog/archive/2011/05/06/2039124.html</p>

<p>http://www.blogjava.net/xiaohuzi2008/archive/2012/12/25/393463.html</p>

<p>http://blog.chinaunix.net/uid-20446794-id-1677395.html</p>

<p>http://tgic.me/2010/02/05/%E8%A7%A3%E5%86%B3-gaphor-uml-%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E7%9A%84%E9%97%AE%E9%A2%98/</p>

<p>https://cacoo.com</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date>2013-03-26 22:03:34</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uml-tools-for-python</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenvSwitch完全使用手册</title>
		<link>http://blog.wachang.net/openvswitch-fullbook/</link>
		<pubDate>Mon, 25 Mar 2013 08:47:37 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?page_id=206</guid>
		<description></description>
		<content:encoded><![CDATA[<a title="OpenvSwitch完全使用手册(一)-总览Overview" href="http://blog.wachang.net/2013/03/openvswitch-fullbook-1-overview/" target="_blank">OpenvSwitch完全使用手册(一)-总览Overview</a>

<a title="OpenvSwitch完全使用手册(二)-概念及工作流程1" href="http://blog.wachang.net/2013/03/openvswitch-fullbook-2-workflow-1/" target="_blank">OpenvSwitch完全使用手册(二)-概念及工作流程1</a>

<a href="http://blog.wachang.net/2013/03/openvswitch-fullbook-2-workflow-2/">OpenvSwitch完全使用手册(二)-概念及工作流程2</a>

OpenvSwitch完全使用手册(三)-基本安装和使用

OpenvSwitch完全使用手册(四)-OVS的数据库

OpenvSwitch完全使用手册()-OpenFlow

OpenvSwitch完全使用手册()-VLAN

OpenvSwitch完全使用手册()-sFlow

OpenvSwitch完全使用手册()-GRE

OpenvSwitch完全使用手册()-VXLAN

OpenvSwitch完全使用手册()-...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date>2013-03-25 16:47:37</wp:post_date>
		<wp:post_date_gmt>2013-03-25 08:47:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openvswitch-fullbook</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>浅出OpenStack源码</title>
		<link>http://blog.wachang.net/openstack-src-insight/</link>
		<pubDate>Mon, 25 Mar 2013 08:50:09 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?page_id=209</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>浅出OpenStack源码系列</h1>

<h2>1.Python基础模块篇</h2>

<p>OpenStack中使用了许多python模块，这一章就先介绍一下主要模块的最用，同时也是后续文章中的一些参考。</p>

<p><a href="http://webpython.codepoint.net/wsgi_tutorial">Python:WSGI介绍</a></p>

<p><a href="http://blog.wachang.net/2013/04/python-paste-deploy-1/">Python.Paste指南之Deploy(1)-概念</a></p>

<p><a href="http://blog.wachang.net/2013/04/python-paste-deploy-2/">Python.Paste指南之Deploy(2)-实践</a></p>

<h2>2.Quantum篇</h2>

<h3>2.1 Quantum Server</h3>

<p><a href="http://blog.wachang.net/2013/04/quantum-code-base/">Quantum 基础知识及服务启动</a></p>

<p><a href="http://blog.wachang.net/2013/04/quantum-wsgi-define-and-how-to-handle-api/">Quantum WSGI中代码概念及如何处理API</a></p>

<p><a href="http://blog.wachang.net/2013/04/quantum-wsgi-base/">Quantum WSGI服务基础</a></p>

<h3>2.3 OpenvSwitch Plugin</h3>

<p><a href="http://blog.wachang.net/2013/03/quantum-ovs-plugin-code-structure/">Quantum OpenvSwitch Plugin代码架构</a></p>

<p><a href="http://blog.wachang.net/2013/03/quantum-ovs-agent-config-file/">Quantum OpenvSwitch Plugin&amp;Agent读取配置文件</a></p>

<p><a href="http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-rpc-1/">Quantum OpenvSwitch Plugin和Agent的RPC机制（一）</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date>2013-03-25 16:50:09</wp:post_date>
		<wp:post_date_gmt>2013-03-25 08:50:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openstack-src-insight</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenvSwitch完全使用手册(四)-OVS的数据库</title>
		<link>http://blog.wachang.net/?p=223</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=223</guid>
		<description></description>
		<content:encoded><![CDATA[<p>之前说到，OVS有一个数据库，主要是用于ovs-vswitchd这个进程读取配置，然后控制行为。
大多数的OVSDB中的Table都有两个列项other_config和external_ids,
other_config:字符串形式的键值对，主要保存一些不常用的信息。
external_ids：字符串形式的键值对，主要用于保存一些和OVS集成的架构的信息。
在OVSDB中，主要有以下表项Table:</p>

<pre><code>表项Table    |         描述
--------------------------------------------------
Open_vSwitch | 保存Open vSwitch 基本配置
Bridge       | 保存Bridge的基本配置
Port         | 保存所有Port的信息
Interface    | 保存一个port所对应的实际物理网络设备的信息
Flow_Table   | OpenFlow流表信息
QoS          | QoS配置信息
Queue        | QoS输出队列信息
Mirror       | 保存Port mirroring镜像信息
Controller   | OpenFlow controller配置信息
Manager      | OVSDB management connection.管理连接信息
NetFlow      | NetFlow相应配置
SSL          | SSL配置信息
sFlow        | sFlow配置
</code></pre>

<p>下图是各个表之间的关系：其中，每个节点表示一张表，粗剪头表示很有很强的引用关系，每个剪头上面的英文，表示的是当前表中的某一列项的名字，（对于的是哪一张表），后面的符号？表示0个或者1个，*表示0个或者多个，+表示一个或者多个（至少一个）。</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date>2013-03-25 21:55:53</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lumpy:Python中的UML工具</title>
		<link>http://blog.wachang.net/?p=247</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[<p>apt-get install python-tk</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2013-03-27 15:27:08</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>在Windows 7下构建Python环境</title>
		<link>http://blog.wachang.net/?p=249</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=249</guid>
		<description></description>
		<content:encoded><![CDATA[<p>因为自己使用的Linux都没图形界面，想用UML工具的话还有点麻烦，于是就只好换到windows下，顺带就把windows环境下使用python的一些准备工作做一个总结。</p>

<p>修改PATH变量</p>

<p>cmd--》python -V</p>

<p>Microsoft Windows [版本 6.1.7601] 版权所有 (c) 2009 Microsoft Corporation。保留所有权利。</p>

<p>C:>python Python 2.7.3 (default, Apr 10 2012, 23:24:47) [MSC v.1500 64 bit (AMD64)] on win 32 Type "help", "copyright", "credits" or "license" for more information.</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>help('print') no documentation found for 'print'</p>
      
      <p>quit()</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>安装相应setuptools https://pypi.python.org/pypi/setuptools#downloads</p>

<p>64为下载 ez_setup.py 文件</p>

<p>然后cmd中python执行</p>

<p>把python2.7\scripts加入到PATH路径</p>

<p>安装帮助文件：就可以使用help()方法查看帮助文档： http://docs.python.org/2/download.html 下载html 然后就没有拉人</p>

<hr />

<p>如何使Python解释器能直接import默认安装路径以外的第三方模块？</p>

<p>为了能import默认安装路径以外的第三方的模块（如自己写的模块），需要新建PYTHONPATH环境变量，值为这个模块所在的目录。 http://www.cnblogs.com/zhuyp1015/archive/2012/07/17/2596495.html http://www.cnblogs.com/qiyeshublog/archive/2012/01/24/2329162.html 安装piphttp://blog.csdn.net/lab2013/article/details/6876967 https://pypi.python.org/pypi/pip</p>

<p>http://www.jb51.net/softjc/34898.html</p>

<p>TMD还是装avtive python暗一点！</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date>2013-03-27 16:25:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenStack中的配置解析Oslo(cfg)模块</title>
		<link>http://blog.wachang.net/?p=259</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=259</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>浅出OpenStack源码系列</p>
  
  <p>OpenStack中的配置解析Oslo(cfg)模块</p>
</blockquote>

<p>OpenStack中原来有个cfg模块，主要是做<code>命令行参数解析以及各个组件的配置文件读取解析</code>的，最新的OpenStack对cfg进行了一个整合，统一开发出了oslo模块，这样在各个组件中都通用使用这一个模块。下面我们就进行相关的学习。</p>

<p>首先所有的配置，不管是命令行参数还是配置文件中的参数，都叫做一个Option,OpenStack中定义了一个最基本的类：class Option()</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date>2013-03-30 14:33:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum源码树</title>
		<link>http://blog.wachang.net/?p=287</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=287</guid>
		<description></description>
		<content:encoded><![CDATA[<p>以下是我git clone的Quantum的源代码，我简单做一下注释。</p>

<pre><code>root@Compute2:~/quantum# tree
.
├── bin #各个组件的启动脚本
│   ├── quantum-check-nvp-config
│   ├── quantum-db-manage
│   ├── quantum-debug
│   ├── quantum-dhcp-agent
│   ├── quantum-dhcp-agent-dnsmasq-lease-update
│   ├── quantum-hyperv-agent
│   ├── quantum-l3-agent
│   ├── quantum-lbaas-agent
│   ├── quantum-linuxbridge-agent
│   ├── quantum-metadata-agent
│   ├── quantum-nec-agent
│   ├── quantum-netns-cleanup
│   ├── quantum-ns-metadata-proxy
│   ├── quantum-openvswitch-agent
│   ├── quantum-ovs-cleanup
│   ├── quantum-rootwrap
│   ├── quantum-rpc-zmq-receiver
│   ├── quantum-ryu-agent
│   ├── quantum-server
│   └── quantum-usage-audit
├── contrib
│   └── redhat-eventlet.patch
├── doc#文档目录，已删除，可以用sphix编译
├── etc#这是Quantum中所有的配置文件例子
│   ├── api-paste.ini #配置WSGI应用，用于REST API处理
│   ├── dhcp_agent.ini
│   ├── init.d
│   │   └── quantum-server #配置服务脚本，service quantum xxx
│   ├── l3_agent.ini
│   ├── lbaas_agent.ini
│   ├── metadata_agent.ini
│   ├── policy.json
│   ├── quantum
│   │   ├── plugins #都是插件的配置
│   │   │   ├── bigswitch
│   │   │   │   └── restproxy.ini
│   │   │   ├── brocade
│   │   │   │   └── brocade.ini
│   │   │   ├── cisco
│   │   │   │   ├── cisco_plugins.ini
│   │   │   │   ├── credentials.ini
│   │   │   │   ├── db_conn.ini
│   │   │   │   ├── l2network_plugin.ini
│   │   │   │   └── nexus.ini
│   │   │   ├── hyperv
│   │   │   │   └── hyperv_quantum_plugin.ini
│   │   │   ├── linuxbridge
│   │   │   │   └── linuxbridge_conf.ini
│   │   │   ├── metaplugin
│   │   │   │   └── metaplugin.ini
│   │   │   ├── midonet
│   │   │   │   └── midonet.ini
│   │   │   ├── nec
│   │   │   │   └── nec.ini
│   │   │   ├── nicira
│   │   │   │   └── nvp.ini
│   │   │   ├── openvswitch
│   │   │   │   └── ovs_quantum_plugin.ini
│   │   │   ├── plumgrid
│   │   │   │   └── plumgrid.ini
│   │   │   └── ryu
│   │   │       └── ryu.ini
│   │   └── rootwrap.d
│   │       ├── debug.filters
│   │       ├── dhcp.filters
│   │       ├── iptables-firewall.filters
│   │       ├── l3.filters
│   │       ├── lbaas-haproxy.filters
│   │       ├── linuxbridge-plugin.filters
│   │       ├── nec-plugin.filters
│   │       ├── openvswitch-plugin.filters
│   │       └── ryu-plugin.filters
│   ├── quantum.conf #quantum配置文件
│   └── rootwrap.conf
├── HACKING.rst
├── LICENSE
├── MANIFEST.in
├── openstack-common.conf
├── quantum
│   ├── agent
│   │   ├── common
│   │   │   ├── config.py#注册agent通用的选项，主要是agent_state的选项
│   │   │   └── __init__.py
│   │   ├── dhcp_agent.py
│   │   ├── firewall.py
│   │   ├── __init__.py
│   │   ├── l3_agent.py
│   │   ├── linux#涉及linux操作的库，比如设置iptables，获得MAC地址等
│   │   │   ├── daemon.py
│   │   │   ├── dhcp.py
│   │   │   ├── external_process.py
│   │   │   ├── __init__.py
│   │   │   ├── interface.py
│   │   │   ├── ip_lib.py
│   │   │   ├── iptables_firewall.py
│   │   │   ├── iptables_manager.py
│   │   │   ├── ovs_lib.py
│   │   │   └── utils.py
│   │   ├── metadata
│   │   │   ├── agent.py
│   │   │   ├── __init__.py
│   │   │   └── namespace_proxy.py
│   │   ├── netns_cleanup_util.py
│   │   ├── ovs_cleanup_util.py
│   │   ├── rpc.py#Agent端通过RPC向Plugin通信的实现
│   │   └── securitygroups_rpc.py
│   ├── api
│   │   ├── api_common.py
│   │   ├── extensions.py
│   │   ├── __init__.py
│   │   ├── rpc
│   │   │   ├── agentnotifiers
│   │   │   │   ├── dhcp_rpc_agent_api.py
│   │   │   │   ├── __init__.py
│   │   │   │   └── l3_rpc_agent_api.py
│   │   │   └── __init__.py
│   │   ├── v2
│   │   │   ├── attributes.py
│   │   │   ├── base.py
│   │   │   ├── __init__.py
│   │   │   ├── resource.py
│   │   │   └── router.py
│   │   ├── versions.py
│   │   └── views
│   │       ├── __init__.py
│   │       └── versions.py
│   ├── auth.py
│   ├── common
│   │   ├── config.py
│   │   ├── constants.py
│   │   ├── exceptions.py
│   │   ├── __init__.py
│   │   ├── rpc.py
│   │   ├── test_lib.py
│   │   ├── topics.py
│   │   └── utils.py
│   ├── context.py
│   ├── db
│   │   ├── agentschedulers_db.py
│   │   ├── agents_db.py
│   │   ├── api.py
│   │   ├── db_base_plugin_v2.py
│   │   ├── dhcp_rpc_base.py
│   │   ├── extraroute_db.py
│   │   ├── __init__.py
│   │   ├── l3_db.py
│   │   ├── l3_rpc_base.py
│   │   ├── loadbalancer
│   │   │   ├── __init__.py
│   │   │   └── loadbalancer_db.py
│   │   ├── migration
│   │   │   ├── alembic.ini
│   │   │   ├── alembic_migrations
│   │   │   │   ├── common_ext_ops.py
│   │   │   │   ├── env.py
│   │   │   │   ├── __init__.py
│   │   │   │   ├── script.py.mako
│   │   │   │   └── versions
│   │   │   │       ├── 1149d7de0cfa_port_security.py
│   │   │   │       ├── 1341ed32cc1e_nvp_netbinding_update.py
│   │   │   │       ├── 1b693c095aa3_quota_ext_db_grizzly.py
│   │   │   │       ├── 1c33fa3cd1a1_extra_route_config.py
│   │   │   │       ├── 1d76643bcec4_nvp_netbinding.py
│   │   │   │       ├── 2a6d0b51f4bb_cisco_plugin_cleanup.py
│   │   │   │       ├── 2c4af419145b_l3_support.py
│   │   │   │       ├── 363468ac592c_nvp_network_gw.py
│   │   │   │       ├── 38335592a0dc_nvp_portmap.py
│   │   │   │       ├── 3b54bf9e29f7_nec_plugin_sharednet.py
│   │   │   │       ├── 3cb5d900c5de_security_groups.py
│   │   │   │       ├── 45680af419f9_nvp_qos.py
│   │   │   │       ├── 4692d074d587_agent_scheduler.py
│   │   │   │       ├── 48b6f43f7471_service_type.py
│   │   │   │       ├── 49332180ca96_ryu_plugin_update.py
│   │   │   │       ├── 511471cc46b_agent_ext_model_supp.py
│   │   │   │       ├── 54c2c487e913_lbaas.py
│   │   │   │       ├── 5a875d0e5c_ryu.py
│   │   │   │       ├── folsom_initial.py
│   │   │   │       ├── grizzly_release.py
│   │   │   │       └── README
│   │   │   ├── cli.py
│   │   │   ├── __init__.py
│   │   │   └── README
│   │   ├── model_base.py
│   │   ├── models_v2.py
│   │   ├── portsecurity_db.py
│   │   ├── quota_db.py
│   │   ├── routedserviceinsertion_db.py
│   │   ├── routerservicetype_db.py
│   │   ├── securitygroups_db.py
│   │   ├── securitygroups_rpc_base.py
│   │   ├── servicetype_db.py
│   │   └── sqlalchemyutils.py
│   ├── debug
│   │   ├── commands.py
│   │   ├── debug_agent.py
│   │   ├── __init__.py
│   │   ├── README
│   │   └── shell.py
│   ├── extensions
│   │   ├── agent.py
│   │   ├── agentscheduler.py
│   │   ├── extraroute.py
│   │   ├── flavor.py
│   │   ├── __init__.py
│   │   ├── l3.py
│   │   ├── loadbalancer.py
│   │   ├── portbindings.py
│   │   ├── portsecurity.py
│   │   ├── providernet.py
│   │   ├── quotasv2.py
│   │   ├── routedserviceinsertion.py
│   │   ├── routerservicetype.py
│   │   ├── securitygroup.py
│   │   └── servicetype.py
│   ├── __init__.py
│   ├── locale
│   │   ├── ja
│   │   │   └── LC_MESSAGES
│   │   │       └── quantum.po
│   │   └── quantum.pot
│   ├── manager.py
│   ├── openstack
│   │   ├── common
│   │   │   ├── context.py
│   │   │   ├── eventlet_backdoor.py
│   │   │   ├── exception.py
│   │   │   ├── excutils.py
│   │   │   ├── fileutils.py
│   │   │   ├── gettextutils.py
│   │   │   ├── importutils.py
│   │   │   ├── __init__.py
│   │   │   ├── jsonutils.py
│   │   │   ├── local.py
│   │   │   ├── lockutils.py
│   │   │   ├── log.py
│   │   │   ├── loopingcall.py
│   │   │   ├── network_utils.py
│   │   │   ├── notifier
│   │   │   │   ├── api.py
│   │   │   │   ├── __init__.py
│   │   │   │   ├── log_notifier.py
│   │   │   │   ├── no_op_notifier.py
│   │   │   │   ├── rabbit_notifier.py
│   │   │   │   ├── rpc_notifier2.py
│   │   │   │   ├── rpc_notifier.py
│   │   │   │   └── test_notifier.py
│   │   │   ├── periodic_task.py
│   │   │   ├── policy.py
│   │   │   ├── processutils.py
│   │   │   ├── rpc
│   │   │   │   ├── amqp.py
│   │   │   │   ├── common.py
│   │   │   │   ├── dispatcher.py
│   │   │   │   ├── impl_fake.py
│   │   │   │   ├── impl_kombu.py
│   │   │   │   ├── impl_qpid.py
│   │   │   │   ├── impl_zmq.py
│   │   │   │   ├── __init__.py
│   │   │   │   ├── matchmaker.py
│   │   │   │   ├── matchmaker_redis.py
│   │   │   │   ├── proxy.py
│   │   │   │   └── service.py
│   │   │   ├── service.py
│   │   │   ├── setup.py
│   │   │   ├── threadgroup.py
│   │   │   ├── timeutils.py
│   │   │   ├── uuidutils.py
│   │   │   └── version.py
│   │   └── __init__.py
│   ├── plugins
│   │   ├── bigswitch
│   │   │   ├── __init__.py
│   │   │   ├── plugin.py
│   │   │   ├── README
│   │   │   ├── tests
│   │   │   │   ├── __init__.py
│   │   │   │   └── test_server.py
│   │   │   ├── vcsversion.py
│   │   │   └── version.py
│   │   ├── brocade
│   │   │   ├── db
│   │   │   │   ├── __init__.py
│   │   │   │   └── models.py
│   │   │   ├── __init__.py
│   │   │   ├── nos
│   │   │   │   ├── fake_nosdriver.py
│   │   │   │   ├── __init__.py
│   │   │   │   ├── nctemplates.py
│   │   │   │   └── nosdriver.py
│   │   │   ├── QuantumPlugin.py
│   │   │   ├── README.md
│   │   │   ├── tests
│   │   │   │   ├── noscli.py
│   │   │   │   ├── nostest.py
│   │   │   │   └── README
│   │   │   └── vlanbm.py
│   │   ├── cisco
│   │   │   ├── common
│   │   │   │   ├── cisco_configparser.py
│   │   │   │   ├── cisco_constants.py
│   │   │   │   ├── cisco_credentials_v2.py
│   │   │   │   ├── cisco_exceptions.py
│   │   │   │   ├── cisco_faults.py
│   │   │   │   ├── cisco_utils.py
│   │   │   │   └── __init__.py
│   │   │   ├── db
│   │   │   │   ├── api.py
│   │   │   │   ├── __init__.py
│   │   │   │   ├── l2network_db.py
│   │   │   │   ├── l2network_models.py
│   │   │   │   ├── models.py
│   │   │   │   ├── network_db_v2.py
│   │   │   │   ├── network_models_v2.py
│   │   │   │   ├── nexus_db_v2.py
│   │   │   │   └── nexus_models_v2.py
│   │   │   ├── extensions
│   │   │   │   ├── credential.py
│   │   │   │   ├── _credential_view.py
│   │   │   │   ├── __init__.py
│   │   │   │   ├── qos.py
│   │   │   │   └── _qos_view.py
│   │   │   ├── __init__.py
│   │   │   ├── l2device_plugin_base.py
│   │   │   ├── l2network_plugin_configuration.py
│   │   │   ├── models
│   │   │   │   ├── __init__.py
│   │   │   │   └── virt_phy_sw_v2.py
│   │   │   ├── network_plugin.py
│   │   │   ├── nexus
│   │   │   │   ├── cisco_nexus_configuration.py
│   │   │   │   ├── cisco_nexus_network_driver_v2.py
│   │   │   │   ├── cisco_nexus_plugin_v2.py
│   │   │   │   ├── cisco_nexus_snippets.py
│   │   │   │   └── __init__.py
│   │   │   ├── README
│   │   │   ├── run_tests.py
│   │   │   └── tests
│   │   │       ├── __init__.py
│   │   │       └── unit
│   │   │           ├── api-paste.ini.cisco.test
│   │   │           ├── __init__.py
│   │   │           ├── quantum.conf.cisco.test
│   │   │           ├── test_cisco_extension.py
│   │   │           ├── test_database.py
│   │   │           └── v2
│   │   │               ├── api-paste.ini.cisco.test
│   │   │               ├── __init__.py
│   │   │               ├── nexus
│   │   │               │   ├── fake_nexus_driver.py
│   │   │               │   └── __init__.py
│   │   │               ├── quantumv2.conf.cisco.test
│   │   │               └── test_api_v2.py
│   │   ├── common
│   │   │   ├── constants.py
│   │   │   └── __init__.py
│   │   ├── hyperv
│   │   │   ├── agent
│   │   │   │   ├── hyperv_quantum_agent.py
│   │   │   │   ├── __init__.py
│   │   │   │   └── utils.py
│   │   │   ├── agent_notifier_api.py
│   │   │   ├── common
│   │   │   │   ├── constants.py
│   │   │   │   └── __init__.py
│   │   │   ├── db.py
│   │   │   ├── hyperv_quantum_plugin.py
│   │   │   ├── __init__.py
│   │   │   ├── model.py
│   │   │   └── rpc_callbacks.py
│   │   ├── __init__.py
│   │   ├── linuxbridge
│   │   │   ├── agent
│   │   │   │   ├── __init__.py
│   │   │   │   └── linuxbridge_quantum_agent.py
│   │   │   ├── common
│   │   │   │   ├── config.py
│   │   │   │   ├── constants.py
│   │   │   │   └── __init__.py
│   │   │   ├── db
│   │   │   │   ├── __init__.py
│   │   │   │   ├── l2network_db_v2.py
│   │   │   │   └── l2network_models_v2.py
│   │   │   ├── __init__.py
│   │   │   ├── lb_quantum_plugin.py
│   │   │   └── README
│   │   ├── metaplugin
│   │   │   ├── common
│   │   │   │   ├── config.py
│   │   │   │   └── __init__.py
│   │   │   ├── __init__.py
│   │   │   ├── meta_db_v2.py
│   │   │   ├── meta_models_v2.py
│   │   │   ├── meta_quantum_plugin.py
│   │   │   ├── proxy_quantum_plugin.py
│   │   │   ├── README
│   │   │   └── run_tests.py
│   │   ├── midonet
│   │   │   ├── config.py
│   │   │   ├── __init__.py
│   │   │   ├── midonet_lib.py
│   │   │   └── plugin.py
│   │   ├── nec
│   │   │   ├── agent
│   │   │   │   ├── __init__.py
│   │   │   │   └── nec_quantum_agent.py
│   │   │   ├── common
│   │   │   │   ├── config.py
│   │   │   │   ├── exceptions.py
│   │   │   │   ├── __init__.py
│   │   │   │   └── ofc_client.py
│   │   │   ├── db
│   │   │   │   ├── api.py
│   │   │   │   ├── __init__.py
│   │   │   │   ├── models.py
│   │   │   │   └── nec_plugin_base.py
│   │   │   ├── drivers
│   │   │   │   ├── __init__.py
│   │   │   │   ├── pfc.py
│   │   │   │   └── trema.py
│   │   │   ├── extensions
│   │   │   │   ├── __init__.py
│   │   │   │   └── packetfilter.py
│   │   │   ├── __init__.py
│   │   │   ├── nec_plugin.py
│   │   │   ├── ofc_driver_base.py
│   │   │   ├── ofc_manager.py
│   │   │   └── README
│   │   ├── nicira
│   │   │   ├── __init__.py
│   │   │   └── nicira_nvp_plugin
│   │   │       ├── api_client
│   │   │       │   ├── client_eventlet.py
│   │   │       │   ├── client.py
│   │   │       │   ├── common.py
│   │   │       │   ├── __init__.py
│   │   │       │   ├── request_eventlet.py
│   │   │       │   └── request.py
│   │   │       ├── check_nvp_config.py
│   │   │       ├── common
│   │   │       │   ├── config.py
│   │   │       │   ├── exceptions.py
│   │   │       │   ├── __init__.py
│   │   │       │   ├── metadata_access.py
│   │   │       │   └── securitygroups.py
│   │   │       ├── extensions
│   │   │       │   ├── __init__.py
│   │   │       │   ├── nvp_networkgw.py
│   │   │       │   └── nvp_qos.py
│   │   │       ├── __init__.py
│   │   │       ├── nicira_db.py
│   │   │       ├── nicira_models.py
│   │   │       ├── nicira_networkgw_db.py
│   │   │       ├── nicira_qos_db.py
│   │   │       ├── NvpApiClient.py
│   │   │       ├── nvp_cluster.py
│   │   │       ├── nvplib.py
│   │   │       ├── nvp_plugin_version.py
│   │   │       ├── QuantumPlugin.py
│   │   │       └── README
│   │   ├── openvswitch
│   │   │   ├── agent
│   │   │   │   ├── __init__.py
│   │   │   │   ├── ovs_quantum_agent.py#agent主文件
│   │   │   │   ├── ovs-quantum-agent-xs_xcp.spec
│   │   │   │   └── xenserver_install.sh
│   │   │   ├── common
│   │   │   │   ├── config.py#ovs插件注册选项，用于读取配置文件
│   │   │   │   ├── constants.py#一些常量
│   │   │   │   └── __init__.py
│   │   │   ├── __init__.py
│   │   │   ├── Makefile
│   │   │   ├── ovs_db_v2.py
│   │   │   ├── ovs_models_v2.py#数据库表定义与sqlalchemy的类的映射
│   │   │   ├── ovs_quantum_plugin.py#插件部分主程序
│   │   │   └── README
│   │   ├── plumgrid
│   │   │   ├── common
│   │   │   │   ├── exceptions.py
│   │   │   │   └── __init__.py
│   │   │   ├── __init__.py
│   │   │   ├── plumgrid_nos_plugin
│   │   │   │   ├── __init__.py
│   │   │   │   ├── plugin_ver.py
│   │   │   │   ├── plumgrid_nos_snippets.py
│   │   │   │   ├── plumgrid_plugin.py
│   │   │   │   └── rest_connection.py
│   │   │   └── README
│   │   ├── ryu
│   │   │   ├── agent
│   │   │   │   ├── __init__.py
│   │   │   │   └── ryu_quantum_agent.py
│   │   │   ├── common
│   │   │   │   ├── config.py
│   │   │   │   └── __init__.py
│   │   │   ├── db
│   │   │   │   ├── api_v2.py
│   │   │   │   ├── __init__.py
│   │   │   │   └── models_v2.py
│   │   │   ├── __init__.py
│   │   │   ├── README
│   │   │   └── ryu_quantum_plugin.py
│   │   └── services
│   │       ├── agent_loadbalancer
│   │       │   ├── agent
│   │       │   │   ├── api.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── manager.py
│   │       │   ├── constants.py
│   │       │   ├── drivers
│   │       │   │   ├── haproxy
│   │       │   │   │   ├── cfg.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── namespace_driver.py
│   │       │   │   └── __init__.py
│   │       │   ├── __init__.py
│   │       │   └── plugin.py
│   │       ├── __init__.py
│   │       └── service_base.py
│   ├── policy.py
│   ├── quantum_plugin_base_v2.py
│   ├── quota.py
│   ├── rootwrap
│   │   ├── filters.py
│   │   ├── __init__.py
│   │   └── wrapper.py
│   ├── scheduler
│   │   ├── dhcp_agent_scheduler.py
│   │   ├── __init__.py
│   │   └── l3_agent_scheduler.py
│   ├── server
│   │   └── __init__.py
│   ├── service.py
│   ├── tests
│   │   ├── base.py
│   │   ├── etc
│   │   │   ├── api-paste.ini.test
│   │   │   ├── quantum.conf.test
│   │   │   └── rootwrap.d
│   │   │       └── quantum.test.filters
│   │   ├── __init__.py
│   │   ├── unit
│   │   │   ├── bigswitch
│   │   │   │   ├── etc
│   │   │   │   │   └── restproxy.ini.test
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_restproxy_plugin.py
│   │   │   │   └── test_router_db.py
│   │   │   ├── brocade
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_brocade_db.py
│   │   │   │   ├── test_brocade_plugin.py
│   │   │   │   └── test_brocade_vlan.py
│   │   │   ├── cisco
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_network_plugin.py
│   │   │   │   └── test_nexus_plugin.py
│   │   │   ├── database_stubs.py
│   │   │   ├── db
│   │   │   │   ├── __init__.py
│   │   │   │   └── loadbalancer
│   │   │   │       ├── __init__.py
│   │   │   │       └── test_db_loadbalancer.py
│   │   │   ├── dummy_plugin.py
│   │   │   ├── extensions
│   │   │   │   ├── extendedattribute.py
│   │   │   │   ├── extensionattribute.py
│   │   │   │   ├── foxinsocks.py
│   │   │   │   ├── __init__.py
│   │   │   │   └── v2attributes.py
│   │   │   ├── extension_stubs.py
│   │   │   ├── hyperv
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_hyperv_quantum_agent.py
│   │   │   │   ├── test_hyperv_quantum_plugin.py
│   │   │   │   └── test_hyperv_rpcapi.py
│   │   │   ├── __init__.py
│   │   │   ├── linuxbridge
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_agent_scheduler.py
│   │   │   │   ├── test_defaults.py
│   │   │   │   ├── test_lb_db.py
│   │   │   │   ├── test_lb_quantum_agent.py
│   │   │   │   ├── test_lb_security_group.py
│   │   │   │   ├── test_linuxbridge_plugin.py
│   │   │   │   └── test_rpcapi.py
│   │   │   ├── metaplugin
│   │   │   │   ├── fake_plugin.py
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_basic.py
│   │   │   │   └── test_metaplugin.py
│   │   │   ├── midonet
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_midonet_lib.py
│   │   │   │   └── test_midonet_plugin.py
│   │   │   ├── nec
│   │   │   │   ├── __init__.py
│   │   │   │   ├── stub_ofc_driver.py
│   │   │   │   ├── test_agent_scheduler.py
│   │   │   │   ├── test_config.py
│   │   │   │   ├── test_db.py
│   │   │   │   ├── test_nec_plugin.py
│   │   │   │   ├── test_ofc_manager.py
│   │   │   │   ├── test_pfc_driver.py
│   │   │   │   ├── test_security_group.py
│   │   │   │   └── test_trema_driver.py
│   │   │   ├── nicira
│   │   │   │   ├── etc
│   │   │   │   │   ├── fake_get_gwservice.json
│   │   │   │   │   ├── fake_get_lrouter.json
│   │   │   │   │   ├── fake_get_lrouter_lport_att.json
│   │   │   │   │   ├── fake_get_lrouter_lport.json
│   │   │   │   │   ├── fake_get_lrouter_nat.json
│   │   │   │   │   ├── fake_get_lswitch.json
│   │   │   │   │   ├── fake_get_lswitch_lport_att.json
│   │   │   │   │   ├── fake_get_lswitch_lport.json
│   │   │   │   │   ├── fake_get_lswitch_lport_status.json
│   │   │   │   │   ├── fake_post_gwservice.json
│   │   │   │   │   ├── fake_post_lqueue.json
│   │   │   │   │   ├── fake_post_lrouter.json
│   │   │   │   │   ├── fake_post_lrouter_lport.json
│   │   │   │   │   ├── fake_post_lrouter_nat.json
│   │   │   │   │   ├── fake_post_lswitch.json
│   │   │   │   │   ├── fake_post_lswitch_lport.json
│   │   │   │   │   ├── fake_post_security_profile.json
│   │   │   │   │   ├── fake_put_lrouter_lport_att.json
│   │   │   │   │   ├── fake_put_lswitch_lport_att.json
│   │   │   │   │   └── nvp.ini.test
│   │   │   │   ├── fake_nvpapiclient.py
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_defaults.py
│   │   │   │   ├── test_networkgw.py
│   │   │   │   ├── test_nicira_plugin.py
│   │   │   │   ├── test_nvp_api_common.py
│   │   │   │   ├── test_nvp_api_request_eventlet.py
│   │   │   │   ├── test_nvp_api_request.py
│   │   │   │   └── test_nvplib.py
│   │   │   ├── openvswitch
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_agent_scheduler.py
│   │   │   │   ├── test_openvswitch_plugin.py
│   │   │   │   ├── test_ovs_db.py
│   │   │   │   ├── test_ovs_defaults.py
│   │   │   │   ├── test_ovs_lib.py
│   │   │   │   ├── test_ovs_quantum_agent.py
│   │   │   │   ├── test_ovs_rpcapi.py
│   │   │   │   ├── test_ovs_security_group.py
│   │   │   │   └── test_ovs_tunnel.py
│   │   │   ├── plumgrid
│   │   │   │   ├── __init__.py
│   │   │   │   └── test_plumgrid_plugin.py
│   │   │   ├── ryu
│   │   │   │   ├── fake_ryu.py
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_defaults.py
│   │   │   │   ├── test_ryu_agent.py
│   │   │   │   ├── test_ryu_db.py
│   │   │   │   ├── test_ryu_plugin.py
│   │   │   │   └── test_ryu_security_group.py
│   │   │   ├── services
│   │   │   │   ├── agent_loadbalancer
│   │   │   │   │   ├── agent
│   │   │   │   │   │   ├── __init__.py
│   │   │   │   │   │   ├── test_api.py
│   │   │   │   │   │   ├── test_init.py
│   │   │   │   │   │   └── test_manager.py
│   │   │   │   │   ├── driver
│   │   │   │   │   │   ├── haproxy
│   │   │   │   │   │   │   ├── __init__.py
│   │   │   │   │   │   │   ├── test_cfg.py
│   │   │   │   │   │   │   └── test_namespace_driver.py
│   │   │   │   │   │   └── __init__.py
│   │   │   │   │   ├── __init__.py
│   │   │   │   │   └── test_plugin.py
│   │   │   │   └── __init__.py
│   │   │   ├── test_agent_config.py
│   │   │   ├── test_agent_ext_plugin.py
│   │   │   ├── test_agent_linux_utils.py
│   │   │   ├── test_agent_netns_cleanup.py
│   │   │   ├── test_agent_ovs_cleanup.py
│   │   │   ├── test_agent_rpc.py
│   │   │   ├── test_api_api_common.py
│   │   │   ├── test_api_v2.py
│   │   │   ├── test_api_v2_resource.py
│   │   │   ├── test_attributes.py
│   │   │   ├── test_auth.py
│   │   │   ├── test_common_utils.py
│   │   │   ├── test_config.py
│   │   │   ├── test_db_migration.py
│   │   │   ├── test_db_plugin.py
│   │   │   ├── test_db.py
│   │   │   ├── test_db_rpc_base.py
│   │   │   ├── test_debug_commands.py
│   │   │   ├── test_dhcp_agent.py
│   │   │   ├── test_extension_extended_attribute.py
│   │   │   ├── test_extension_extraroute.py
│   │   │   ├── _test_extension_portbindings.py
│   │   │   ├── test_extension_portsecurity.py
│   │   │   ├── test_extension_security_group.py
│   │   │   ├── test_extensions.py
│   │   │   ├── test_iptables_firewall.py
│   │   │   ├── test_iptables_manager.py
│   │   │   ├── test_l3_agent.py
│   │   │   ├── test_l3_plugin.py
│   │   │   ├── testlib_api.py
│   │   │   ├── test_linux_daemon.py
│   │   │   ├── test_linux_dhcp.py
│   │   │   ├── test_linux_external_process.py
│   │   │   ├── test_linux_interface.py
│   │   │   ├── test_linux_ip_lib.py
│   │   │   ├── test_loadbalancer_plugin.py
│   │   │   ├── test_metadata_agent.py
│   │   │   ├── test_metadata_namespace_proxy.py
│   │   │   ├── test_policy.py
│   │   │   ├── test_quantum_context.py
│   │   │   ├── test_quantum_manager.py
│   │   │   ├── test_quota_ext.py
│   │   │   ├── _test_rootwrap_exec.py
│   │   │   ├── test_rootwrap.py
│   │   │   ├── test_routerserviceinsertion.py
│   │   │   ├── test_security_groups_rpc.py
│   │   │   ├── test_servicetype.py
│   │   │   └── test_wsgi.py
│   │   └── var
│   │       ├── ca.crt
│   │       ├── certificate.crt
│   │       └── privatekey.key
│   ├── version.py
│   └── wsgi.py
├── README
├── run_tests.py
├── run_tests.sh
├── setup.cfg
├── setup.py
├── TESTING
├── tools
│   ├── build_debs.sh
│   ├── check_i18n.py
│   ├── check_i18n_test_case.txt
│   ├── clean.sh
│   ├── i18n_cfg.py
│   ├── install_venv_common.py
│   ├── install_venv.py
│   ├── patch_tox_venv.py
│   ├── pip-requires
│   ├── test-requires
│   └── with_venv.sh
└── tox.ini
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date>2013-04-28 15:37:39</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quantum-code-tree-analyse</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/?p=333</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=333</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code>quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务
quantum_service.wait()#启动WSGI服务
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date>2013-04-07 15:03:37</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum API Server</title>
		<link>http://blog.wachang.net/?p=338</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=338</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code>quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务
quantum_service.wait()#启动WSGI服务
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>338</wp:post_id>
		<wp:post_date>2013-04-07 19:51:10</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/?p=340</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=340</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code>def _model_query(self, context, model):
    query = context.session.query(model)
    # define basic filter condition for model query
    # NOTE(jkoelker) non-admin queries are scoped to their tenant_id
    # NOTE(salvatore-orlando): unless the model allows for shared objects
    query_filter = None
    if not context.is_admin and hasattr(model, 'tenant_id'):
        if hasattr(model, 'shared'):
            query_filter = ((model.tenant_id == context.tenant_id) |
                            (model.shared))
        else:
            query_filter = (model.tenant_id == context.tenant_id)
    # Execute query hooks registered from mixins and plugins
    for _name, hooks in self._model_query_hooks.get(model,
                                                    {}).iteritems():
        query_hook = hooks.get('query')
        filter_hook = hooks.get('filter')
        if query_hook:
            query = query_hook(self, context, model, query)
        if filter_hook:
            query_filter = filter_hook(self, context, model, query_filter)

    # NOTE(salvatore-orlando): 'if query_filter' will try to evaluate the
    # condition, raising an exception
    if query_filter is not None:
        query = query.filter(query_filter)
    return query
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date>2013-04-22 21:26:23</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/?p=343</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=343</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code>   def create_vc(self, context, vc,**kwargs):
        ret = super(HuaWeiQuantumPlugin,self).create_vc(context,vc,**kwargs)
        return ret
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date>2013-04-23 21:38:34</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/?p=345</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=345</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code>def _send_xml_to_controller(xml_serializer, data, is_create=False):
    #===========================================================================
    #  2012-12-04 add code
    #===========================================================================
    if not data:
        raise webob.exc.HTTPNotFound()
    cmd=data['document']['cmd']
    xmldata = xml_serializer(data)
    print '[driver] send xmldata = ',xmldata
    xmldata1,xmldata2=xmldata.split('&lt;cmd&gt;',1)
    xmldata3,xmldata4=xmldata2.split('&lt;/cmd&gt;',1)
    xmldata5,xmldata6=xmldata1.split('&lt;document&gt;',1)
    cmd='&lt;document&gt;&lt;cmd&gt;%s&lt;/cmd&gt;' % cmd
    xmldata="%s%s%s" % (cmd,xmldata6,xmldata4)
    print '[driver] send xmldata =',xmldata

    _socket_plugin = eventlet.connect(_huawei_controller_addr)
    _socket_plugin.send(xmldata+'\n')
    xmldata = _socket_plugin.recv(10240)
    print '[driver] recv xmldata = ',xmldata
    data=_recv_xml_from_controller(xmldata)
    print '[driver]controller return =',data

    result=data['document'].get('result', '-1')
    if result =='-1':
        return False
    if is_create:
        id = data['document'].get('vnid','')
        if id:
            print "(vnid) = ",id
            return remove_gang(id)
        else:
            id = data['document'].get('vcid','')
            if id:
                print "(vcid) = ",id
                return remove_gang(id)
        return False
    return True
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date>2013-04-24 02:05:05</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/?p=346</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=346</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code>import sys
from oslo.config import cfg #创建一个配置管理器cfg.CONF
from Quantum.common import config #向cfg.CONF注册核心选项core_opts,指明需要读取哪些选项或者哪些CLI参数
from Quantum import service

def main():
    # the configuration will be read into the cfg.CONF global data structure
    config.parse(sys.argv[1:]) #解析配置文件，即是quantum.conf,把相应的配置信息写入到cfg.CONF中。

    try:
        Quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务
        Quantum_service.wait()#启动WSGI服务

if __name__ == "__main__":
    main()
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date>2013-04-24 02:48:27</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>AMQP&amp;RabbitMQ协议及模型入门介绍</title>
		<link>http://blog.wachang.net/2013/02/introduce-to-amqp-rabbitmq/</link>
		<pubDate>Thu, 28 Feb 2013 11:58:38 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=54</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>1本文主要是翻译加总结，通过资料的查询，对AMQP有一定了解; 2 RabbitMQ使用的就是AMQP 0-9-1模型，所以本文其实也是在讲RabbitMQ中的一些原理; 3 文末会列出原文地址</p>
</blockquote>

<h2>1 What is AMQP?</h2>

<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，一个网络应用层协议的开放标准，为面向消息的中间件设计。</p>

<p>说白了，这就是一个消费者生产者模型，生产者生产出一个消息，发送到一个队列Queue，消费者(也叫做worker)从队列里面取出这个消息。但是AMQP中，这个消息一般来说是一个任务，生产者消费者一般不在同一台机器上，所以，更好的解释就是，一个程序发送一个任务消息给一个队列，然后消费者程序从队列中拿出这个任务信息，进行执行，可能还需要返回结果。</p>

<p>而RabbitMQ，就是实现了这么一个模型的软件，独立的开源实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、 Ruby、.NET、Java、JMS、C、PHP、 ActionScript、XMPP、STOMP等，支持AJAX。RabbitMQ就是一个服务器，实现了队列的管理，一个程序连接这个服务器，把任务发送给服务器（也即是进入了队列），消费者连接服务器，从队列中取出任务消息，然后执行。</p>

<p>中英文对照： Messaging broker:消息协商器,它在TCP/IP等端口监听AMQ消息，其实就是AMQP的实现，比如RabbitMQ等。 producers：应用程序，产生消息，并publish到消息队列中，下文简称P。 consumers：应用程序，接收消息，然后进行处理，下文简称C。 AMQP client：AMQP客户端，指与AMQP broker连接的P或者C。</p>

<h2>2 AMQP协议</h2>

<h3>2.1 协议概述</h3>

<p>从整体来看，AMQP协议可划分为三层： <a href="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol-2.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol-256x300.png" alt="amqp-protocol" width="256" height="300" class="alignnone size-medium wp-image-55" /></a> AMQP定义了合适的服务器端域模型，用于规范服务器的行为(AMQP服务器端可称为broker)。在这里Model层决定这些基本域模型所产生的行为，这种行为在AMQP中用”command”表示，在后文中会着重来分析这些域模型。Session层定义客户端与broker之间的通信(通信双方都是一个peer，可互称做partner)，为command的可靠传输提供保障。Transport层专注于数据传送，并与Session保持交互，接受上层的数据，组装成二进制流，传送到receiver后再解析数据，交付给Session层。Session层需要Transport层完成网络异常情况的汇报，顺序传送command等工作。</p>

<h3>2.2 协议模型</h3>

<p>AMQP broker主要功能是消息的路由(Routing)和缓存(Buffering)，如下图： <a href="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol-2.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol-2.png" alt="amqp-protocol-2" width="571" height="239" class="alignnone size-full wp-image-59" /></a> Exchange接收消息生产者(Producer)发送的消息根据不同的路由算法将消息发送往Message queue。Message queue会在消息不能被正常消费时缓存这些消息，具体的缓存策略由实现者决定，当message queue与消息消费者(Message consumer)之间的连接通畅时，Message queue有将消息转发到consumer的责任。</p>

<p>Message是当前模型中所操纵的基本单位,基本结构有两部分: Header和Body(playload),Header是由Producer添加上的各种属性的集合，这些属性有控制Message是否可被缓存，接收的queue是哪个，优先级是多少等。Body是真正需要传送的数据，它是对Broker不可见的二进制数据流，在传输过程中不应该受到影响。</p>

<p>一个broker中会存在多个Message queue，Exchange通过binding知道要把消息发送到哪个Message queue,在创建Message queue后需要确定它来接收并保存哪个Exchange路由的结果。Binding是用来关联Exchange与Message queue的域模型,通过关键字bindinds_key。</p>

<p>在与多个Message queue关联后，Exchange中就会存在一个路由表，这个表中存储着每个Message queue所需要消息的限制条件。Exchange就会检查它接受到的每个Message的Header及Body信息，来决定将Message路由到哪个queue中去。Message的Header中应该有个属性叫Routing Key，它由Message发送者产生，提供给Exchange路由这条Message的标准。Exchange根据不同路由算法有不同有Exchange Type。比如有Direct类似，需要Binding key 等于Routing key；也有Binding key与Routing key符合一个模式关系；也有根据Message包含的某些属性来判断。一些基础的路由算法由AMQP所提供，client application也可以自定义各种自己的扩展路由算法。 <a href="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol-3.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-protocol-3.png" alt="amqp-protocol-3" width="714" height="117" class="alignnone size-full wp-image-58" /></a> 对于，上图，有一些具体的概念，下面会详细讨论。</p>

<h3>2.3 AMQP 0-9-1 Model流程</h3>

<p>AMQP 0-9-1 Model可以简单的总结如下:P产生消息，然后publish(发布)到exchange(交换机，类比成邮政的邮筒吧)，exchange根据一个规则(bindinds)把消息发送到队列(queue)中，消息协商器要么把消息传递给等待(订阅subdcribe)在某一队列上的的消费者(consumers)，要么消费者就从队列中根据自己的需要取消息。如下图： <a href="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-11.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-11.png" alt="amqp-intro-1" width="712" height="319" class="alignnone size-full wp-image-60" /></a></p>

<p>当publish消息的时候，P可能还会指定消息的属性（meta-data），可能一些meta会被broker使用，而其余的都是由C来使用的。</p>

<p>因为网络不可靠，应用可能处理消息的时候就挂掉了，所以就有一个<code>消息确认机制message acknowledgements</code>:当消息传递给C的时候需要通知broker。当使用消息确认机制的时候，一个broker只有在收到C对于此消息已经被接收的通知后才会删除消息。</p>

<p>某些场景，消息发不到合适的C的时候，消息可能会被返回给P，丢弃，或者说放进一个“死亡队列”，由P来决定如何操作。</p>

<p>队列，交换机，绑定作为AMQP中协作的三个元素。（Queues, exchanges and bindings are collectively referred to as AMQP entities.）</p>

<h2>3 Exchanges and Exchange Types交换机和交换类型</h2>

<p>交换机可以理解成具有路由表的路由程序，仅此而已。每个消息都有一个称为路由键（routing key）的属性，就是一个简单的字符串。交换机当中有一系列的绑定（binding），即路由规则（routes），例如，指明具有路由键 “X” 的消息要到名为timbuku的队列当中去。</p>

<p>交换机从P中接收到一个消息，然后路由(route)发送到一个或者多个队列，AMQP 0-9-1 brokers提供了四种交换类型。</p>

<pre><code>交换类型                默认名字
Direct exchange      空字符串或者amq.direct
Fanout exchange      amq.Fanout
Topic exchange       amq.Topic
Headers exchange     amq.match (and amq.headers in RabbitMQ)
</code></pre>

<p>除了交换类型以后，定义交换机的时候还有其他的属性，最重要的几个是：</p>

<ul>
<li>Name</li>
<li>Durability（当broker重启后交换机是否能继续工作）</li>
<li>Auto-delete（所有队列都适用完以后，交换机就被删除）</li>
<li>Arguments（根据broker的选择而定）</li>
</ul>

<p>exchanges交换机有两种模式(交换模式与交换类型概念不一样)，Durability表示在broker重启的时候能够恢复之前的工作，而transient模式下则会丢失之前的数据。</p>

<h3>3.1 默认交换exchange</h3>

<p>默认的交换机是一个已经预定义了的没有名字的Direct交换模式，他有一个简单的特性：每创建一个队列，都会通过一个routing&#95;key与exchange绑定，而这个routing&#95;key是和队列名字一样的。</p>

<h3>3.2 直接交换Direct exchange</h3>

<p>处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “dog”，则只有被标记为“dog”的消息才被转发，不会转发dog.puppy，也不会转发dog.guard，只会转发dog。</p>

<ul>
<li>一个队列通过routing_key K与一个exchange绑定。</li>
<li>当一个携带routing_key K的消息到达exchange的时候，exchange将消息路由给队列。</li>
</ul>

<p>直接交换主要用来在多个C，或者说worker（相同的程序实例）之间通过轮训方式分发任务，但是要记住，在AMQP 0-9-1中，消息时在C之间进行负载均衡而不是队列之间进行的。直接交换可以看看下图： <a href="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-2.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-2.png" alt="amqp-intro-2" width="689" height="511" class="alignnone size-full wp-image-62" /></a></p>

<h3>3.3 fanout Exchange</h3>

<p>fanout模式将消息发送给所有与之绑定的队列，不处理路由键。你只需要简单的将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout交换机转发消息是最快的。如下图： <a href="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-3-fanout.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-3-fanout.png" alt="amqp-intro-3-fanout" width="713" height="447" class="alignnone size-full wp-image-61" /></a></p>

<h3>3.4 Topic exchange</h3>

<p>根据消息的routing_key以及队列和交换机绑定的类型，Topic Exchange把消息传递给一个或者多个队列。这就是一个多播的概念。当场景中需要多个C，并且C是有根据的获得消息的时候，Topic Exchange就应该被考虑。具体来说，就是将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。符号“#”匹配一个或多个词，符号“<em>”匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.</em>” 只会匹配到“audit.irs”。</p>

<h3>3.5 Headers Exchange</h3>

<p>如果不适应routing&#95;key，而是根据消息的多个属性（表现为消息头的形式）的交换就是Headers Exchange，Headers Exchange会忽略routing&#95;key值，相反，用来路由的信息实行消息的头属性中获得的。</p>

<h2>5 队列Queue</h2>

<p>在AMQP中队列就是一个消息的管道，存储C需要的消息，队列知道exchange的一些属性，同时增加了一些自己的属性：</p>

<ul>
<li>名字</li>
<li>持续性（Durability），队列在broker重启后恢复</li>
<li>Exclusive，单个连接中使用，连接断掉后队列被删除</li>
<li>auto-delete：当C不在获得消息的时候队列被删除</li>
<li>Arguments：一些broker自己实现的附加功能</li>
</ul>

<p>在队列使用之前必须被申明（declare），当队列不存在的时候申明队列会创建一个队列，如果队列已经存在，申明队列就不会进行其他操作，但是可以完成对队列存在与否的确认。</p>

<h3>5.1 Queue Names</h3>

<p>应用需要提供队列名，这样broker才能产生一个相应的队列。UTF-8格式，最多255字节，提供一个空字符作为队列名的话，broker会产生一个唯一的队列，同样的方式在C端也可以保证C取得的是P端产生的对应序列，因为P,C都是在一个channel下，而channel是能够记住上一次服务器产生的队列名的。</p>

<p>队列名以"amq."开头的是用于broker内部使用的队列。</p>

<h3>5.2 Queue Durability</h3>

<p>持续当broker重启的时候队列能够恢复，不具有持续性的队列就叫做transient。但是，<code>这里队列的持续性只是当broker重启的时候会自动重新申明队列，而要保证消息不丢失，还需要设置消息为永久性的（消息就存于磁盘而不是内存中）。</code></p>

<h3>5.3 Bindings</h3>

<p>bindings就是一些规则，用来决定消息要路由到哪个队列中去，比如，需要一个交换机E路由一个消息到队列Q，则Q需要先和E进行绑定。Bindings可能需要一些可选的routing&#95;key，routing&#95;key的作用就是选择被publish的特定信息到相应绑定的队列，换句话说，routing_key有点像是一个过滤器。举个例子:</p>

<ul>
<li>你住在纽约，队列就相当于你的目的地</li>
<li>交换机就相当于XXX航空</li>
<li>bindinds就XXX航空到你的住址的线路，可能没得，也可能有多条</li>
</ul>

<p>如果消息无法送到相应的队列，那么就会丢弃或者返回给P,这些就看相应的机制是怎么样的了。</p>

<h3>5.6 Consumers</h3>

<p>在队列中存储的消息一定要被C所使用。在AMQP 0-9-1模型中，应用程序有两种处理消息的模式：</p>

<ul>
<li>队列主动把消息传递给C应用(push API)</li>
<li>C从队列中抓取自己需要的消息(pull API)</li>
</ul>

<p>在push模式下，应用C需要指明对哪个序列的哪类消息感兴趣，我们称此时队列注册了一个C，或者C订阅了一个队列。一个队列可以有多个C。</p>

<p>每个C都有一个标示符叫做consumer tag，可以用来取消(unsubscribe)对队列消息的订阅，这个tag是一个字符串。</p>

<h2>6 Message消息</h2>

<h3>6.1 Message Acknowledgements 消息确认机制</h3>

<p>Consumer applications-取得消息并且处理消息的应用，有时候可能会因为各种问题挂掉，于是乎就有，AMQP broker如何知道这个消息已经被C接收，是可以删除掉了？AMQP标准中给出了两个选择：</p>

<ul>
<li>在broker向C应用发送了一个消息后，消息可以被删除(使用basic.deliver or basic.get-ok AMQP方法)</li>
<li>在C应用返回了一个确认ACK消息以后，消息可以被删除(使用basic.ack AMQP方法)</li>
</ul>

<p>前一种被叫做自动确认模型(automatic acknowledgement model)，后一种被叫做严格确认模型?(explicit acknowledgement model),在严格模式下C可以选择何时返回这个ACK信息。可以在接收消息的时候就返回，或者处理完消息携带的任务信息以后再返回。</p>

<p>如果C挂掉，并且没有返回ACK信息，那么AMQP broker就会把消息传递给其他的C，如果当前没有可用的C存在，broker就等待，知道有新的C加入进来。</p>

<h3>6.2 Rejecting Messages拒绝消息</h3>

<p>当C取得了消息，但是处理过程中可能不成功，此时C就需要通过拒绝消息机制告诉broker这个消息处理失败，当拒绝消息的时候，C可以要求broker忽略或者从新把消息入队。</p>

<h3>6.3 Negative acknowledgements</h3>

<p>通过<code>basic.reject AMQP</code>方法消息就会被拒绝，但是这个方法有个限制：没办法拒绝一连串的多个消息，但是在RabbitMQ中，有一个解决方案，RabbitMQ提出了一种negative acknowledgements(nacks)机制，更多请参考RabbitMQ手册。</p>

<h3>6.4 Prefetching Messages</h3>

<p>在多个C存在的时候，最好有一种机制指定每个C在返回ACK之前最多能接收多少个消息，这个就有点像负载均衡的思想了。</p>

<h3>6.5 Message Attributes and Payload</h3>

<p>在AMQP中的消息时可以附带属性值(attributes)的，一些常见的属性有：</p>

<ul>
<li>Content type</li>
<li>Content encoding</li>
<li>Routing key</li>
<li>Delivery mode (persistent or not)</li>
<li>Message priority</li>
<li>Message publishing timestamp</li>
<li>Expiration period</li>
<li>Producer application id</li>
</ul>

<p>一些属性可以被选作是消息的头信息。类似HTTP中的X-headers。AMQP消息也有一个负载段（playload），承载相应的数据。broker不会检测和修改负载，当消息被设置成persistent的时候，AMQP broker就会把消息存在磁盘中而不会丢失了。</p>

<h3>6.6 Message acknowledgements</h3>

<h2>7 AMQP 0-9-1 Methods</h2>

<p>AMQP 0-9-1 被组织成各种各样的方法Methods,方法就是某些操作，类似HTTP Method但是和面向对象语言中的方法没有一点关系。AMQP方法被组织成各种类classes,类Class就是方法的集合。比如我们看看exchange class，就有一下操作：</p>

<p>exchange.declare exchange.declare-ok exchange.delete exchange.delete-ok</p>

<p>举例如下： 一个客户端请求broker申明一个新的交换机，使用exchange.declare方法，当然，申明中需要一些参数： 如果成功，broker就会使用exchange.declare-ok方法返回一个成功的标示。 <a href="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e1.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e1.png" alt="amqp-intro-4-e1" width="566" height="160" class="alignnone size-full wp-image-63" /></a> <a href="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e2.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e2.png" alt="amqp-intro-4-e2" width="574" height="161" class="alignnone size-full wp-image-64" /></a></p>

<p>同样道理，对于队列类，也有这么一些方法： <a href="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e3.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e3.png" alt="amqp-intro-4-e3" width="571" height="156" class="alignnone size-full wp-image-65" /></a> <a href="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e4.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/02/amqp-intro-4-e4.png" alt="amqp-intro-4-e4" width="582" height="161" class="alignnone size-full wp-image-66" /></a></p>

<h3>7.1 Connections</h3>

<p>AMQP的连接是长期的，AMQP是一个应用层，使用TCP来完成可靠的消息传递。AMQP的连接使用了认证并且可以使用TLS等加密协议。当一个应用不再需要与AMQP broker连接的时候，他需要友好的断开连接。</p>

<h3>7.2 Channels</h3>

<p>一些应用程序需要与AMQP broker建立多个连接，但是，同时保持多个TCP连接会消耗大量资源。AMQP 0-9-1提出了Channels的概念，Channels可以被认为是<code>在一个TCP连接中多个轻量级的连接</code>。</p>

<p>对于多线程/进程应用，很常见的做法就是一个线程/进程打开一个channel，并且channel之间不共享。</p>

<p>一个channel上的通信与另外一个channel间的通信时完全独立的，所以每个AMQP方法都会携带一个channel号，通过channel号，应用就知道这个方法是出于哪个channel上的。</p>

<h2>7.3 Virtual Hosts</h2>

<p>一个AMQP broler可以产生多个独立的"环境"，这就是vhost的概念。就类似于apache等的vhost一样，AMQP客户可以通过协商选择与哪个vhost进行连接。</p>

<h2>参考资料:</h2>

<p><a href="http://www.rabbitmq.com/tutorials/amqp-concepts.html">http://www.rabbitmq.com/tutorials/amqp-concepts.html</a> <a href="http://langyu.iteye.com/blog/759663/">http://langyu.iteye.com/blog/759663/</a> <a href="http://pythoner.net/wiki/110/">http://pythoner.net/wiki/110/</a> <a href="http://blog.csdn.net/zhangxinrun/article/details/6546479">http://blog.csdn.net/zhangxinrun/article/details/6546479</a> <a href="http://sunjun041640.blog.163.com/blog/static/25626832201032990829/">http://sunjun041640.blog.163.com/blog/static/25626832201032990829/</a> <a href="http://www.oschina.net/question/12_9192">http://www.oschina.net/question/12_9192</a> book:RabbitMQ in Action</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date>2013-02-28 19:58:38</wp:post_date>
		<wp:post_date_gmt>2013-02-28 11:58:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introduce-to-amqp-rabbitmq</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amqp"><![CDATA[amqp]]></category>
		<category domain="post_tag" nicename="rabbitmq"><![CDATA[rabbitmq]]></category>
		<category domain="category" nicename="%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0"><![CDATA[技术学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[single]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[74]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[amqp,rabbitmq]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[AMQP&RabbitMQ协议及模型入门介绍
主要介绍了AMQP中的相关概念原理，并针对RabbitMQ进行了一些介绍，以便读者能很好的了解AMQP，同时，也为熟悉RabbitMQ开发做了基础储备。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[AMQP&RabbitMQ协议及模型入门介绍]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>68</wp:comment_id>
			<wp:comment_author><![CDATA[Inwatstut]]></wp:comment_author>
			<wp:comment_author_email>ekselmoksel@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://archive.org/details/rahimburch</wp:comment_author_url>
			<wp:comment_author_IP>94.27.82.152</wp:comment_author_IP>
			<wp:comment_date>2013-04-25 04:30:28</wp:comment_date>
			<wp:comment_date_gmt>2013-04-24 20:30:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Zyprexa Long Acting Injection  Seroquel Time Tardive Dyskinesia . Ultracet Acetaminophen Narcotic Doryx Long Term Female  <a href="http://archive.org/details/urielreilly" rel="nofollow">Prices Buy Vytorin</a> Cephalexin 250 Mg For Sinus Infection Yasmin Pill Positives Breakthrough Bleeding Effexor Starting Dosage Selective Serotonin Reuptake Inhibitors Prilosec Gout H Pylori . Diet Reviews Acai Berry Pills Nitrofurantoin 100mg Ingredients Missing A Amount Of Lexapro <a href="http://archive.org/details/rahimburch" rel="nofollow">List Soma%27s Online No Prescription</a>. No Rx Buying Symmetrel Avelox Treatment For Cellulitis Urine Testing Oxycodone Coffee Skin Allergies .
]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1366944072]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>CGI/FastCGI学习及实践-1-概念</title>
		<link>http://blog.wachang.net/2013/03/cgi-fastcgi-study-1/</link>
		<pubDate>Fri, 01 Mar 2013 08:40:07 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=76</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>本文主要罗列了CGI,FASTCGI,PHP-CGI,Spawn-FCGI,PHP-FPM的一些概念，后续做了一些相应的上机演示，主要是以php为例子说明，顺带提到了nginx中PHP环境的构建问题。</p>
</blockquote>

<h2>1 CGI</h2>

<p>CGI全称是“公共网关接口”(Common Gateway Interface)，HTTP服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php,perl,tcl等。<code>CGI是一种模型规范</code>，然后我们可以编写一个CGI程序来实现CGI模型中定义的功能。</p>

<p>最常见的例子，服务器S上有一个Web服务W，这个服务W是用php写的，客户C请求服务W，S拿到请求以后就需要执行服务W中的代码，这个时候CGI程序就调用服务W的程序，得到结果后返回给服务器S，S再封装返回信息返回给客户C,或者说CGI直接把结果返回给客户C。</p>

<p>所以CGI你可以认识是一个程序，得到一个请求以后就开启一个线程用来执行php/python/asp脚本用，得到结果后返回给服务器S的程序。</p>

<p>传统CGI接口方式的主要缺点是性能很差，因为每次HTTP服务器遇到动态程序时都需要重新启动脚本解析器来执行解析，然后结果被返回给HTTP服务器。这在处理高并发访问时，几乎是不可用的。另外传统的CGI接口方式安全性也很差，现在已经很少被使用了。</p>

<h2>2 FastCGI</h2>

<p>FastCGI是从CGI发展改进而来的,FastCGI是一个可伸缩地、高速地在HTTP server和动态脚本语言间通信的接口。多数流行的HTTP server都支持FastCGI，包括Apache、Nginx和lighttpd等，同时，FastCGI也被许多脚本语言所支持。</p>

<p>FastCGI接口方式采用C/S结构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者多个脚本解析守护进程。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程来执行，然后将得到的结果返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。</p>

<p>更具体来讲，之前的CGI是遇到动态语言就启动一下CGI进程，而FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次。所以说，<code>fasc-cgi也更像是一种模型规范</code>。</p>

<h2>3 Cgi/Fast-cgi工作原理</h2>

<p>我们以php文件举例，原理同样适合python,asp等。</p>

<h3>3.1 CGI模式下php-cgi</h3>

<p>当请求一个php页面，比如index.php以后，服务器得到请求，这是一个php脚本，服务器看不懂，于是他就启动一个程序php-cgi程序，这个程序就是一个php语言的解释器，类推就还有(python-cgi等等)，这个php-cgi就执行index.php中的代码，得到结构以后返回给客户或者先给服务器再由服务器传递给客户，然后这个php-cgi程序就退出。</p>

<p>所以，php-cgi就是一个程序，用来解释php的。可以如下安装：</p>

<pre><code>apt-get install php-cgi
</code></pre>

<h3>3.2 Fast-CGI模式</h3>

<p>因为fast-cgi模式就是一个进程不退出，有请求到来时就产生或者调用一个新的进程处理，处理完了相应的处理程序就关闭，而fast-cgi程序又继续等待。<code>所以fast-cgi程序更像是一个管理器，用来管理cgi进程的。</code>结合3.1中所讲，更详细的解释是：</p>

<ul>
<li>fast-cgi管理进程初始化，启动多个cgi解释进程，比如php环境下就启动多个php-cgi进程。然后就等待服务器的连接。可以使用TCP或者socket方式连接（这是与服务器的连接）。</li>
<li>当相应的请求到达web服务器的时候，服务器发送到fast-cgi管理程序，fast-cgi管理程序就激活一个cgi进程然后把相关的环境变量（CGI环境变量）和参数发送给这个cgi进程，php中就会发送到php-cgi。</li>
<li>cgi进程一般都是一个动态语言解释器，所以他执行，php中php-cgi就执行代码，执行完成以后结果返回给fast-cgi，fast-cgi再递交给服务器或者直接给用户，而此时cgi进程就应该退出或者休眠了，在php中，php-cgi此时就关闭了。</li>
</ul>

<h2>4 总结</h2>

<p>从上面可以总结如下：</p>

<ul>
<li>CGI就是一个解释动态语言的程序，解释php的一般是php-cgi</li>
<li>fast-cgi就是一个管理CGI的程序，php中环境有php-fpm，spwan-fcgi等。</li>
</ul>

<p>但是，php-cgi虽然我们一般认为是一个cgi程序，其实他也是一个fast-cgi程序，通过一些配置也可以完成fast-cgi的功能。具体的实际，我们下一节中说明。</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2013-03-01 16:40:07</wp:post_date>
		<wp:post_date_gmt>2013-03-01 08:40:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cgi-fastcgi-study-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cgi"><![CDATA[cgi]]></category>
		<category domain="post_tag" nicename="fastcgi"><![CDATA[fastcgi]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="php-cgi"><![CDATA[php-cgi]]></category>
		<category domain="post_tag" nicename="php-fpm"><![CDATA[php-fpm]]></category>
		<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86"><![CDATA[运维管理]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[hierarchy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[cgi-fastcgi-stud-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[cgi,fastcgi,nginx,php]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[本文主要罗列了CGI,FASTCGI,PHP-CGI,Spawn-FCGI,PHP-FPM的一些概念，后续做了一些相应的上机演示，主要是以php为例子说明，顺带提到了nginx中PHP环境的构建问题。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[CGI/FastCGI学习及实践-(1)-概念]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nginx+PHP环境上传文件配置 </title>
		<link>http://blog.wachang.net/2013/03/nginx-php-configure-fileupload/</link>
		<pubDate>Fri, 01 Mar 2013 09:07:21 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[<p>因为实验室环境需要提高上传文件大小限制，做个记录，如何在Nginx+PHP环境中配置文件上传相关的内容。</p>

<h2>PHP配置:</h2>

<pre><code>root@kb310-node10:/etc/php5# ls
cgi  cli  conf.d  fpm
</code></pre>

<p>根据使用的具体方式，更改相应文件夹下<code>php.ini</code>文件中的选项：</p>

<pre><code>1 max_execution_time
</code></pre>

<p>变量max&#95;execution&#95;time设置了在强制终止脚本前PHP等待脚本执行完毕的时间，此时间以秒计算。当脚本进入了一个无限循环状态 时此变量非常有用。然而，当存在一个需要很长时间完成的合法活动时（例如上传大型文件），这项功能也会导致操作失败。在这样的情况下必须考虑将此变量值增 加，以避免PHP在脚本正在执行某些重要过程的时候将脚本关闭。允许大文件上传就设置大一点。</p>

<pre><code>2 file_uploads = on
</code></pre>

<p>是否允许文件上传。</p>

<pre><code>3 upload_max_filesize =2M
</code></pre>

<p>允许上传文件大小</p>

<pre><code>4 post_max_size
</code></pre>

<p>同表单提交相关的一个变量是post&#95;max&#95;size，它将控制在采用POST方法进行一次表单提交中PHP所能够接收的最大数据量。需要将默认的8 MB改得更大。相反，应当适当将其降到更为实际的数值。但如果希望使用PHP文件上传功能，则需要将此值改为比upload&#95;max&#95;filesize还要大。</p>

<pre><code>5 max_input_time
</code></pre>

<p>此变量可以以秒为单位对通过POST、GET以及PUT方式接收数据时间进行限制。如果应用程序所运行环境处在低速链路上，则需要增加此值以适应接收数据所需的更多时间.</p>

<pre><code>6 memory_limit =10M
</code></pre>

<p>为了避免正在运行的脚本大量使用系统可用内存，PHP允许定义内存使用限额。通过memory&#95;limit变量来指定单个脚本程序可以使用的最大内存容量，变量memory&#95;limit的值(不要超出服务器内寸最大值)</p>

<h2>Nginx配置</h2>

<p>貌似不需要进行设置。</p>

<h2>参考资料：</h2>

<p><a href="http://bbs.php100.com/read-htm-tid-297084.html">http://bbs.php100.com/read-htm-tid-297084.html</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2013-03-01 17:07:21</wp:post_date>
		<wp:post_date_gmt>2013-03-01 09:07:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nginx-php-configure-fileupload</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86"><![CDATA[运维管理]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[hierarchy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[nginx-php-configure-fileuploa]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[php,upload]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[因为实验室环境需要提高上传文件大小限制，做个记录，如何在Nginx+PHP环境中配置文件上传相关的内容。涉及配置:
max_execution_time,file_uploads,upload_max_filesize 
post_max_size,max_input_time等
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[Nginx+PHP环境上传文件配置 ]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CGI/FastCGI学习及实践-2-实践</title>
		<link>http://blog.wachang.net/2013/03/cgi-fastcgi-study-2/</link>
		<pubDate>Sat, 02 Mar 2013 12:40:23 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=81</guid>
		<description></description>
		<content:encoded><![CDATA[<p>在上一节中，将到了Fastcgi中的一些概念，这一节就实例展示下。以php环境为例：</p>

<p>从上节中，我们明白了，php-cgi就是一个php的解释器，当服务器接收到一个php文件的时候，就会连接Fastcgi管理程序，连接的方式可以通过TCP连接（fastcgi管理程序监听一个端口）或者unix sock（通过文件读写的方式交互）两种方式，这个管理程序会执行php-cgi这个php解释器，从而得到结果。而这个fastcgi管理程序，就有php-fpm以及spawn-fcgi两个。</p>

<!--more-->

<h2>Php-cgi</h2>

<p>实际上，php-cgi也可以作为一个fast-cgi管理程序，有如下参数：</p>

<pre><code> sudo -u www-data PHP_FCGI_CHILDREN=5 PHP_FCGI_MAX_REQUESTS=125 /usr/bin/php-cgi -q -b 127.0.0.1:9000 &amp;
</code></pre>

<p>以上就表示启动了5个php-cgi进程，监听地址127.0.0.1:9000，服务器需要把php请求发到这个地址上。此时可以查看进程：</p>

<pre><code>root@kb310-node10:~# ps -e|grep php-cgi
3527 ?        00:00:00 php-cgi
3529 ?        00:00:00 php-cgi
3530 ?        00:00:00 php-cgi
3531 ?        00:00:00 php-cgi
3532 ?        00:00:00 php-cgi
3533 ?        00:00:00 php-cgi
</code></pre>

<p>而相应的nginx关于php的配置就为：</p>

<pre><code>location ~ .php$ 
    { 
      fastcgi_pass 127.0.0.1:9000; 
      fastcgi_index index.php; 
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; 
      include fastcgi_params; 
    }
</code></pre>

<p>php-cgi的缺点：</p>

<ul>
<li>php-cgi变更php.ini配置后需重启php-cgi才能让新的php-ini生效，不可以平滑重启</li>
<li>直接杀死php-cgi进程,php就不能运行了。(PHP-FPM和Spawn-FCGI就没有这个问题,守护进程会平滑从新生成新的子进程。）</li>
</ul>

<h2>Php-FPM http://php-fpm.org/</h2>

<p>php-fpm作为一个fasc-cgi管理程序，在CPU和内存方面的控制都比较好,用他来管理php-cgi，有很高的稳定性，如下安装：</p>

<pre><code>apt-get install php5-fpm
</code></pre>

<p>然后在<code>/etc/php5/fpm</code>中进行配置，php-fpm.conf配置php-fpm的基本信息，这里可以更改<code>采用TCP或者UNIX SOCK</code>以及监视进程数的多少，<code>php.ini</code>是更改php配置，<code>pool.d</code>里面的东西是更改FPM的线程管理机制，一般用epoll，性能好。我自己采用的是UNIX SOCK监听：</p>

<pre><code>##in php-fpm.ini
[global]
; Pid file
; Note: the default prefix is /var
; Default Value: none
;pid = run/php-fpm.pid
pid = /var/run/php5-fpm.pid
</code></pre>

<p>启动并查看服务：</p>

<pre><code>service php5-fpm restart
root@kb310-node10:/etc/php5/fpm# ps -e|grep php
1738 ?        00:00:01 php5-fpm
1739 ?        00:00:28 php5-fpm
1740 ?        00:00:31 php5-fpm
1741 ?        00:00:32 php5-fpm
</code></pre>

<p>相应nginx中就需要把<code>fastcgi_pass</code>参数更改为：</p>

<pre><code>fastcgi_pass    unix:/var/run/php5-fpm.sock;
</code></pre>

<p>更多使用说明：</p>

<pre><code>service php5-fpm {start|stop|quit|restart|reload|logrotate}
--start 启动php的fastcgi进程
--stop 强制终止php的fastcgi进程
--quit 平滑终止php的fastcgi进程
--restart 重启php的fastcgi进程
--reload 重新平滑加载php的php.ini
--logrotate 重新启用log文件
</code></pre>

<h2>Spawn-fcgi http://redmine.lighttpd.net/projects/spawn-fcgi</h2>

<p>和PHP-FPM功能一样，要问他和php-fpm有什么区别，请看<a href="http://php-fpm.org/about/">http://php-fpm.org/about/</a>，使用上：</p>

<pre><code>spawn-fcgi -a 127.0.0.1 -p 9000 -C 10 -u www-data -f /usr/bin/php-cgi
-f 指定调用FastCGI的进程的执行程序位置，根据系统上所装的PHP的情况具体设置
-a 绑定到地址addr
-p 绑定到端口port
-s 绑定到unix socket的路径path
-C 指定产生的FastCGI的进程数，默认为5(仅用于PHP)
-P 指定产生的进程的PID文件路径
-u和-g FastCGI使用什么身份(-u 用户 -g 用户组)运行，Ubuntu下可以使用www-data，其他的根据情况配置，如nobody、apache等
</code></pre>

<h2>参考文章：</h2>

<p><a href="http://www.fastcgi.com/drupal/node/2">FAST-CGI主页</a></p>

<p><a href="http://www.mike.org.cn/articles/what-is-cgi-fastcgi-php-fpm-spawn-fcgi/">http://www.mike.org.cn/articles/what-is-cgi-fastcgi-php-fpm-spawn-fcgi/</a></p>

<p><a href="http://www.myhack58.com/Article/sort099/sort0102/2012/33364.htm">http://www.myhack58.com/Article/sort099/sort0102/2012/33364.htm</a></p>

<p><a href="http://wenku.baidu.com/view/1215375e3b3567ec102d8a67.html">http://wenku.baidu.com/view/1215375e3b3567ec102d8a67.html</a></p>

<p><a href="http://www.ayuelee.cn/fastcgi-spawn-fcgi-init-script.html">http://www.ayuelee.cn/fastcgi-spawn-fcgi-init-script.html</a></p>

<p><a href="http://hi.baidu.com/winsyk/item/7958e1313dbccdbd633aff8e">http://hi.baidu.com/winsyk/item/7958e1313dbccdbd633aff8e</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2013-03-02 20:40:23</wp:post_date>
		<wp:post_date_gmt>2013-03-02 12:40:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cgi-fastcgi-study-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fastcgi"><![CDATA[fastcgi]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="php-cgi"><![CDATA[php-cgi]]></category>
		<category domain="post_tag" nicename="php-fpm"><![CDATA[php-fpm]]></category>
		<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86"><![CDATA[运维管理]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[hierarchy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[php,fastcgi,php-fpm,php-cgi]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[主要讲解了fastcgi中spawn-fcgi，php-fpm，php-cgi中一些使用方法，通过php环境中具体例子更好的阐述了cgi，fastcgi的相关概念。顺便归纳了以上软件的使用方法。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[CGI/FastCGI学习及实践-2-实践]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_disable</wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenVPN配置LDAP认证</title>
		<link>http://blog.wachang.net/2013/03/openvpn-configure-ldap/</link>
		<pubDate>Mon, 04 Mar 2013 10:34:07 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[<p>原来这个不是OpenVPN官方自带的内容，还要自己折腾一下啊，找了些资料，这里提供两种方案，总结如下：</p>

<h2>openvpn-auth-ldap</h2>

<p><a href="https://code.google.com/p/openvpn-auth-ldap/">OpenVPN-AUTH-LDAP</a>这是最常见的方案，不过现在一般Ubuntu现在都已经有编译好的包了，所以不用进行复杂的源码编译了。</p>

<pre><code>apt-get install openvpn-auth-ldap
</code></pre>

<p>然后，先是配置LDAP认证相关内容：</p>

<pre><code>mkdir /etc/openvpn/auth
cp /usr/share/doc/openvpn-auth-ldap/examples/auth-ldap.conf /etc/openvpn/auth
</code></pre>

<p><!--more-->
编辑文件<code>/etc/openvpn/auth/auth-ldap.conf</code>:</p>

<pre><code>&lt;LDAP&gt;
# LDAP server URL
URL     ldap://X.X.X.X

# Bind DN (If your LDAP server doesn't support anonymous binds)
# BindDN        uid=Manager,ou=People,dc=example,dc=com

# Bind Password
# Password  SecretPassword

# Network timeout (in seconds)
Timeout     15

# Enable Start TLS
TLSEnable   no ##这里要注意

# Follow LDAP Referrals (anonymously)
FollowReferrals yes

# TLS CA Certificate File
TLSCACertFile   /usr/local/etc/ssl/ca.pem

# TLS CA Certificate Directory
TLSCACertDir    /etc/ssl/certs

# Client Certificate and key
# If TLS client authentication is required
TLSCertFile /usr/local/etc/ssl/client-cert.pem
TLSKeyFile  /usr/local/etc/ssl/client-key.pem

# Cipher Suite
# The defaults are usually fine here
# TLSCipherSuite    ALL:!ADH:@STRENGTH
&lt;/LDAP&gt;

&lt;Authorization&gt;
# Base DN
BaseDN      "ou=People,dc=oinlab"

# User Search Filter
SearchFilter    "(uid=%u)" ##这里要注意

# Require Group Membership
RequireGroup    false ##是否开启组验证

# Add non-group members to a PF table (disabled)
#PFTable    ips_vpn_users

&lt;Group&gt;
    BaseDN      "ou=People,dc=oinlab"
    SearchFilter    "(|(cn=developers)(cn=artists))"
    MemberAttribute uniqueMember
    # Add group members to a PF table (disabled)
    #PFTable    ips_vpn_eng
&lt;/Group&gt;
&lt;/Authorization&gt;
</code></pre>

<p>完了以后在配置OpenVPN中<code>server.conf</code>文件，加入如下：</p>

<pre><code>plugin /usr/lib/openvpn/openvpn-auth-ldap.so /etc/openvpn/auth/auth-ldap.conf
client-cert-not-required ##有了LDAP就不需要证书认证了嘛
</code></pre>

<p>最后就是配置一下客户端了：</p>

<p>客户端的配置简单，去掉<code>cert xxx.crt</code>以及<code>key xxx.key</code>部分，再加上<code>auth-user-pass</code>就OK。如下就是一个简单的例子：</p>

<pre><code>client
dev tun
proto udp
remote X.X.X.X 1194
resolv-retry infinite
nobind
user nobody
group nobody
persist-key
persist-tun
ca ca.crt
;cert wangchang.crt
;key wangchang.key
comp-lzo
verb 3
auth-user-pass
</code></pre>

<p>参考资料(需要飞过Wall)：</p>

<p><a href="http://cheaster.blogspot.com/2009/11/openvpn-auth-over-ldap.html">http://cheaster.blogspot.com/2009/11/openvpn-auth-over-ldap.html</a></p>

<p><a href="http://www.howtoforge.com/setting-up-an-openvpn-server-with-authentication-against-openldap-on-ubuntu-10.04-lts">http://www.howtoforge.com/setting-up-an-openvpn-server-with-authentication-against-openldap-on-ubuntu-10.04-lts</a></p>

<h2>脚本方式</h2>

<p>有人就是把插件的功能用一个脚本来实现，相对来说，配置没那么复杂，我没测试过，应该可行。下附链接：</p>

<p><a href="http://down.51cto.com/data/573688">CSDN上的一个下载</a></p>

<p><a href="http://redmine.debuntu.org/projects/openvpn-ldap-auth/wiki">http://redmine.debuntu.org/projects/openvpn-ldap-auth/wiki</a></p>

<p><a href="http://backreference.org/2012/09/14/openvpn-ldap-authentication/">http://backreference.org/2012/09/14/openvpn-ldap-authentication/</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2013-03-04 18:34:07</wp:post_date>
		<wp:post_date_gmt>2013-03-04 10:34:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openvpn-configure-ldap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ldap"><![CDATA[ldap]]></category>
		<category domain="post_tag" nicename="openvpn"><![CDATA[openvpn]]></category>
		<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86"><![CDATA[运维管理]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[hierarchy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_disable</wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GRE通用路由封装协议学习笔记</title>
		<link>http://blog.wachang.net/2013/03/gre-study-note/</link>
		<pubDate>Tue, 05 Mar 2013 06:59:29 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=93</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>1 背景</h2>

<p>一种技术（协议）或者策略的两个或多个子网穿过另一种技术（协议）或者策略的网络实现互联，称之为overlay topology，这一技术是电信技术的永恒主题之一。</p>

<p>电信技术在发展，多种网络技术并存，一种技术的网络孤岛可能需要穿过另一种技术的网络实现互联，这种情况如果发生在高层协议的PDU封装于低层协议PDU中时通常称之为复用，特别地三层PDU穿过二层网络地技术称为租用链路或虚电路；而如果穿越发生在一种协议PDU封装在同一层协议的PDU中，或者封装在高层协议的PDU中时，人们通常称之为隧道。</p>

<p>隧道提供了一种某一特定网络技术的PDU穿过不具备该技术转发能力的网络的手段，如组播数据包穿过不支持组播的网络；另一种情况是有时因为管理策略的原因，一个管理者（策略）的子网不能通过和另一个管理者（策略）的网络互联而连接，而是要穿过另一个管理者（策略）的网络实现连接，这就是所谓的VPN（Virtual Private Networks），不管是L2 VPN还是L3 VPN都需要利用隧道技术实现。因此隧道某种意义上可以概括为穿越不同的网络的技术，不同既可以是技术方面的，也可以是管理策略方面的。 隧道可以作为一个虚拟接口来实现。隧道接口并不指定特定的“乘客”或“传输”协议连接，而是一种结构，可以实现任何标准点到点封装的服务。由于隧道是点到点连接，因此对每个连接必须配置一个单独的隧道。</p>

<p>GRE是一种应用较为广泛的一种网络层协议PDU封装于任一种网络层协议PDU中的技术，经常被用来构造GRE隧道穿越各种三层网络，并得到了大多数电信设备厂商的支持。</p>

<!--more-->

<h2>2 GRE</h2>

<h3>2.1 简介</h3>

<p>GRE(通用路由协议封装）是由Cisco和Net-smiths等公司于1994年提交给IETF的，标号为RFC1701和RFC1702。目前有多数厂商的网络设备均支持GRE隧道协议。GRE 规定了如何用一种网络协议去封装另一种网络协议的方法。GRE的隧道由两端的源IP地址和目的IP地址来定义，允许用户使用IP包封装IP、IPX、 AppleTalk包，并支持全部的路由协议（如RIP2、OSPF等）。通过GRE，用户可以利用公共IP网络连接IPX网络、AppleTalk网 络，还可以使用保留地址进行网络互连，或者对公网隐藏企业网的IP地址。总结来说：</p>

<ul>
<li>GRE是三层协议，用一种协议来封装另一种协议，使用了隧道tunnel技术</li>
<li>隧道是虚拟的点对点连接，所以GRE的使用过程中肯定会出现一个虚拟的隧道接口</li>
</ul>

<h3>2.2 例子</h3>

<p>GRE进行IP封装：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/gre-encap-1.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/gre-encap-1-300x176.png" alt="gre-encap-1" width="300" height="176" class="aligncenter size-medium wp-image-94" /></a></p>

<p>GRE解封装</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/gre-decap-1.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/gre-decap-1-300x160.png" alt="gre-decap-1" width="300" height="160" class="aligncenter size-medium wp-image-95" /></a></p>

<p>上面注意封装后新的<code>协议号是47</code>，这样对端就能发觉这是一个GRE报文，接着递交给GRE相关模块进行解封。GRE报文格式如下：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/GRE-format.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/GRE-format-300x170.png" alt="GRE-format" width="300" height="170" class="aligncenter size-medium wp-image-96" /></a></p>

<p>GRE在包头中包含了协议类型-47，这用于标明乘客协议的类型；校验和包括了GRE的包头和完整的乘客协议与数据；密钥用于接收端验证接收的数据；序列号用于接收端数据包的排序和差错控制；路由用于本数据包的路由。</p>

<h3>2.3 应用</h3>

<p>下面这个例子就很好的说明了GRE的使用。</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/gre-example.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/gre-example-300x79.png" alt="gre-example" width="300" height="79" class="aligncenter size-medium wp-image-97" /></a></p>

<p>如果，在路由器AB之间（中间隔着其他网络）我想使用GRE，第一步需要配置GER的隧道接口，指明源目地址,这一步<code>需要在隧道的两段都进行配置</code>：</p>

<pre><code>##路由器A
interface T0
ip address 100.1.1.1 255.255.255.0
tunnel source 1.1.1.1
tunnel dst 1.1.1.2
##路由器B
interface T0
ip address 100.1.1.2 255.255.255.0
tunnel source 1.1.1.2
tunnel dst 1.1.1.1 （注意是反向的，一个隧道是双向的）
</code></pre>

<p>下面我们来解释以上配置的作用:</p>

<ul>
<li>当A上的LO接口的数据（10.1.1.1）希望走GRE隧道到达B上L0接口(20.1.1.1)</li>
<li>此时在路由A上指定这种数据包走网关是A上T0的地址100.1.1.1（走这里才会进行GRE封装，也就是为什么GRE需要设置两段隧道接口的地址！）</li>
<li>随后，这个数据包进行GRE封装，封装完成以后，变成一个新包，源地址是1.1.1.1目的地址是1.1.1.2(这就是GRE中设置隧道源目地址的作用，因为数据包肯定是从实际接口发出的，所以这里需要指明隧道两端的实际接口)</li>
<li>数据包到达路由器B的1.1.1.2口，显示<code>src=1.1.1.1</code>,<code>dst=1.1.1.2</code>，<code>协议号47</code>于是B知道了，这个是GRE报文，然后交给GRE模块处理，GRE模块解封GRE头，得到原来的信息，源地址10.1.1.1目的地址20.1.1.1，交给协议栈处理，作用到达应用处。</li>
</ul>

<p>最后是路由器A上数据包走向的一个截图，可以参考一下:</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/gre-example-2.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/gre-example-2-300x178.png" alt="gre-example-2" width="300" height="178" class="aligncenter size-medium wp-image-98" /></a></p>

<h2>3 参考资料</h2>

<p><a href="http://blog.sina.com.cn/s/blog_4fad46a801015wto.html">http://blog.sina.com.cn/s/blog_4fad46a801015wto.html</a></p>

<p><a href="http://wenku.baidu.com/view/b88e564ff7ec4afe04a1df4b.html">http://wenku.baidu.com/view/b88e564ff7ec4afe04a1df4b.html</a></p>

<p><a href="http://wenku.baidu.com/view/699d9749cf84b9d528ea7a82.html">http://wenku.baidu.com/view/699d9749cf84b9d528ea7a82.html</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date>2013-03-05 14:59:29</wp:post_date>
		<wp:post_date_gmt>2013-03-05 06:59:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gre-study-note</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gre"><![CDATA[GRE]]></category>
		<category domain="post_tag" nicename="tunnel"><![CDATA[tunnel]]></category>
		<category domain="category" nicename="%e5%8d%8f%e8%ae%ae%e5%ad%a6%e4%b9%a0"><![CDATA[协议学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[hierarchy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[gre,tunnel]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[GRE是一种应用较为广泛的一种网络层协议PDU封装于任一种网络层协议PDU中的技术，经常被用来构造GRE隧道穿越各种三层网络，并得到了大多数电信设备厂商的支持。本文是我自己的GRE通用路由封装学习笔记，详细介绍了网上的几个例子，应该能对GRE有一个大致的了解。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[GRE通用路由封装协议学习笔记]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[Todd]]></wp:comment_author>
			<wp:comment_author_email>yourmail@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://groups.tianya.cn/tribe/showArticle.jsp?groupId=551332&amp;articleId=266950558dc367c343e1c71bf07db5d3</wp:comment_author_url>
			<wp:comment_author_IP>222.94.139.247</wp:comment_author_IP>
			<wp:comment_date>2013-04-09 05:15:40</wp:comment_date>
			<wp:comment_date_gmt>2013-04-08 21:15:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[十分感谢！
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Iptables使用参考手册(一)</title>
		<link>http://blog.wachang.net/2013/03/iptables-useage-ref-1/</link>
		<pubDate>Thu, 07 Mar 2013 17:13:18 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[<p>主要是自己的学习笔记以及网上资料的参考，按照自己的口味总结，以后稍微参考一下就能熟练上手，本系列暂定写4章：</p>

<p>第一章：<a href="http://blog.wachang.net/2013/03/iptables-usage-ref-1/">流程介绍</a></p>

<p>第二章：如何使用</p>

<p>第三章：深入理解</p>

<p>第四章：高级用法</p>

<h2>1 几句话介绍iptables</h2>

<p>Linux内核中有一个联网子系统netfilter，提供了有状态和无状态的分组过滤，同时提供了NAT和IP伪装服务。<strong>这个系统可以通过工具iptables来进行控制</strong>。</p>

<!--more-->

<h2>2 规则，链，表</h2>

<p>既然是用来处理过滤数据包神马的，那么最基本的肯定就是规则了，一个规则就定义了对一个满足某些条件的数据包应该肿么做，这是最基本的了。我们又看，对于数据包，最终处理它的是规则，那么处理的时机又可以是进入系统的时候或者出系统的时候，所以我们又提出链，一个链包含了一些规则。最后，那么多的规则，又不好管理，于是又来了一个表，iptables以表的形式来管理规则，而且表这个东西又和应用挂钩，比如与NAT有关的链，规则我就放到一个NAT表中。于是乎，概念就解释完了，下面列出iptables里面的链和表：</p>

<p>iptables里面：</p>

<p><strong>规则：</strong>有很多个，你自己定义。</p>

<p><strong>链：</strong>包含了一些规则，主要有以下的链（主要是根据处理时机划分的）</p>

<ul>
<li>INPUT链：包含处理入站数据包的一些规则</li>
<li>OUTPUT：包含处理出站数据包的一些规则</li>
<li>FORWARD：包含处理转发数据包的一些规则，转发数据包：就是不进入本机应用程序，而是从本机转发出去的包。</li>
<li>POSTROUTING链：在进行路由选择后处理数据包</li>
<li>PREROUTING链：在进行路由选择前处理数据包，无论数据包是否进入代理服务器内部，还是直接转发，都要先进行这条链的匹配。</li>
</ul>

<p><strong>默认的表：</strong></p>

<ul>
<li>raw表：debug测试，确认是否对该数据包进行状态跟踪</li>
<li>mangle表：为数据包设置标记,主要是改变包的TOS,TTL,MARK属性，一般不操作。包含了PREROUTING,POSTROUTING,FORWARD,INPUT,OUTPUT链。</li>
<li>nat表：主要做SNAT,DNAT，MASQUERADE的，包含INPUT OUTPUT PREROUTING POSTROUTING四条链</li>
<li>filer表：对数据包进行过滤，准许什么数据包通过accept，不许什么数据包通过drop，并且这个规则表也是默认的</li>
</ul>

<p>最后补充一点，iptables中，表是唯一的，也就是不存在两个NAT表，而链则不是唯一的，比如NAT表和MANGLE表都有一个INPUT链，他们的INPUT链中的规则是不一样的。而链中的具体规则，也不是唯一的，INPUT链和OUTPUT链中都可以存在一个一样的规则。</p>

<h2>3 数据包流程</h2>

<p>总结一句话概括就是 当数据包到达防火墙时，如果MAC地址符合，就会由内核里相应的驱动程序接收，当数据包经过某个表的某个链时，iptables对比数据包和设定的规则，进行处理，决定是发送给本地的程序，还是转发给其他机子，还是其他的什么。</p>

<p>我们来细细说：</p>

<p>首先看下面这张图：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/iptables-workflow.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/iptables-workflow-1024x528.jpg" alt="iptables-workflow" width="1024" height="528" class="aligncenter size-large wp-image-113" /></a></p>

<p>然后我们来加深理解：</p>

<p><strong>对于收到的数据包，表是有优先级的哦</strong></p>

<p>raw->mangle->nat(转换)->filter(过滤),每一步的处理根据上图中的优先级顺序来的哦。</p>

<p>规则链间的匹配顺序</p>

<p>　　入站数据：PREROUTING、INPUT</p>

<p>　　出站数据：OUTPUT、POSTROUTING</p>

<p>　　转发数据：PREROUTING、FORWARD、POSTROUTING</p>

<p>按顺序依次进行检查，找到相匹配的规则即停止(LOG策略会有例外)</p>

<p>检测下看懂木有，以下是三个图，请对比上面的流程图理解，会恍然大悟的。</p>

<p><strong>1 以本地为目标（就是我们自己的机子了）的包</strong></p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-1.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-1-1024x192.jpg" alt="iptables-example-1" width="1024" height="192" class="aligncenter size-large wp-image-114" /></a></p>

<p><strong>2 以本地为源的包</strong></p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-2.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-2-1024x179.jpg" alt="iptables-example-2" width="1024" height="179" class="aligncenter size-large wp-image-115" /></a></p>

<p><strong>3 被转发的包</strong></p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-3.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/iptables-example-3-1024x226.jpg" alt="iptables-example-3" width="1024" height="226" class="aligncenter size-large wp-image-116" /></a></p>

<p>最后再来一张差不多的图。</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/tables_traverse.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/tables_traverse.jpg" alt="tables_traverse" width="525" height="585" class="aligncenter size-full wp-image-117" /></a></p>

<p>在第一个路由判断处，不是发往本地的包，我们会发送它穿过 FORWARD链。若包的目的地是本地监听的IP地址，我们就会发送这个包穿过INPUT链，最后到达本地。</p>

<p>值得注意的是，在做NAT的过程中，发往本机的包的目的地址可能会在PREROUTING链里被改变。这个操作发生在第一次路由之前，所以在地址被改变之后，才能对包进行路由。注意，所有的包都会经过上图中的某 一条路径。如果你把一个包DNAT回它原来的网络，这个包会继续走完相应路径上剩下的链，直到它被发送回原来的网络。 这一节就到这里，了解了数据包的流程，下一节我们就讲讲怎么使用iptables了。</p>

<h2>4 参考文章</h2>

<p><a href="http://linux.ccidnet.com/art/737/20060705/596545_1.html">http://linux.ccidnet.com/art/737/20060705/596545_1.html</a></p>

<p><a href="http://man.chinaunix.net/network/iptables-tutorial-cn-1.1.19.html">http://man.chinaunix.net/network/iptables-tutorial-cn-1.1.19.html</a></p>

<p><a href="http://linux.ccidnet.com/pub/html/tech/iptables/index.htm">http://linux.ccidnet.com/pub/html/tech/iptables/index.htm</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date>2013-03-08 01:13:18</wp:post_date>
		<wp:post_date_gmt>2013-03-07 17:13:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iptables-useage-ref-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="iptables"><![CDATA[iptables]]></category>
		<category domain="category" nicename="%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0"><![CDATA[技术学习]]></category>
		<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86"><![CDATA[运维管理]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[hierarchy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_disable</wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>70</wp:comment_id>
			<wp:comment_author><![CDATA[inifuffepsy]]></wp:comment_author>
			<wp:comment_author_email>gdfgdfgdg@mail.ua</wp:comment_author_email>
			<wp:comment_author_url>http://www.maps.google.com</wp:comment_author_url>
			<wp:comment_author_IP>178.137.163.241</wp:comment_author_IP>
			<wp:comment_date>2013-04-26 05:26:34</wp:comment_date>
			<wp:comment_date_gmt>2013-04-25 21:26:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://www.maps.google.com/ -  http://www.wikipedia.org/ - wiki 
<a href="http://mail.ru/" / rel="nofollow">mail</a>
]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1366944077]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Iptables使用参考手册(二)</title>
		<link>http://blog.wachang.net/2013/03/iptables-useage-ref-2/</link>
		<pubDate>Sat, 09 Mar 2013 15:53:40 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=133</guid>
		<description></description>
		<content:encoded><![CDATA[<p>上一节说到了，iptables的一些基本概念以及工作流程，下面我们来看看iptables具体该如何使用。</p>

<p>本系列文章索引：</p>

<p>第一章：<a href="http://blog.wachang.net/2013/03/iptables-usage-ref-1/">流程介绍</a></p>

<p>第二章：<a href="http://blog.wachang.net/2013/03/iptables-useage-ref-2/">如何使用</a></p>

<p>第三章：深入理解</p>

<p>第四章：高级用法</p>

<h2>1 规则语法：</h2>

<h3>1.1 查看规则</h3>

<pre><code>iptables [-t 表名] &lt;-L&gt; [链名]
</code></pre>

<p>注：不指定表名的话默认查看filter表</p>

<h3>1.2 增加(追加，append)、插入、替换规则</h3>

<pre><code>iptables [-t 表名] &lt;-A(追加) | -I(插入)&gt; | -D(删除) | -R(替换)&gt; &lt;链名&gt; [规则编号] [-i|o 进入或流出网卡名称] [-p 协议类型] [-s 源IP地址|源子网] [--sport 源端口号] [-d 目标ip地址|目标子网] [--dport 目标端口号] &lt;-j 动作(accept|drop|nat等)&gt; 
</code></pre>

<p><!--more-->
注：不指定表名的话默认使用filter表</p>

<p><strong><code>-I</code>插入规则如果不指明规则标号，则在第一条规则前插入（置顶）</strong></p>

<p><strong><code>-R</code>替换规则一定要指明规则编号，替换后不会改变规则顺序。</strong></p>

<p><strong><code>-p</code>可是是ssh、tcp、icmp等,如下几个针对协议的匹配都是OK的</strong></p>

<pre><code>-p icmp --icmp-type 类型
-p --tcp-flags SYN,ACK,FIN,PSH,RST,URG
</code></pre>

<p><strong>关于<code>port</code>，以下都是可以的：</strong></p>

<pre><code>--sport 1000:3000 匹配源端口是 1000-3000 的数据包(含1000、3000)
--dport :3000 匹配目标端口是 3000 以下的数据包(含 3000)
--dport 1000: 匹配目标端口是 1000 以上的数据包(含 1000
--sport 和 --dport 必须配合 -p 参数使用，指定是神马协议
</code></pre>

<p><strong>关于动作，有以下一些动作：</strong></p>

<ul>
<li><p>ACCEPT 将封包放行，进行完此处理动作后，将不再比对其它规则，直接跳往下一个规则链（natostrouting）。</p></li>
<li><p>DROP 丢弃封包不予处理，进行完此处理动作后，将不再比对其它规则，直接中断过滤程序。</p></li>
<li><p>REJECT 拦阻该封包，并传送封包通知对方，可以传送的封包有几个选择：ICMP port-unreachable、ICMP echo-reply 或是 tcp-reset（这个封包会要求对方关闭联机），进行完此处理动作后，将不再比对其它规则，直接中断过滤程序。</p>

<p>iptables -A FORWARD -p TCP --dport 22 -j REJECT --reject-with tcp-reset</p></li>
<li><p>SNAT 改写封包来源 IP 为某特定 IP 或 IP 范围，可以指定 port 对应的范围，进行完此处理动作后，将直接跳往下一个规则（mangleostrouting）。</p>

<p>iptables -t nat -A POSTROUTING -p tcp-o eth0 -j SNAT --to-source 194.236.50.155-194.236.50.160:1024-32000</p></li>
<li><p>DNAT 改写封包目的地 IP 为某特定 IP 或 IP 范围，可以指定 port 对应的范围，进行完此处理动作后，将会直接跳往下一个规炼（filter:input 或 filter:forward）。</p>

<p>iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80 -j DNAT --to-destination 192.168.1.1-192.168.1.10:80-100</p></li>
<li><p>MASQUERADE 改写封包来源 IP 为防火墙 NIC IP，可以指定 port 对应的范围，进行完此处理动作后，直接跳往下一个规则（mangleostrouting）。这个功能与 SNAT 略有不同，当进行 IP 伪装时，不需指定要伪装成哪个 IP，IP 会从网卡直接读，当使用拨接连线时，IP 通常是由 ISP 公司的 DHCP 服务器指派的，这个时候 MASQUERADE 特别有用。</p>

<p>iptables -t nat -A POSTROUTING -p TCP -j MASQUERADE --to-ports 1024-31000</p></li>
<li><p>REDIRECT 将封包重新导向到另一个端口（PNAT），进行完此处理动作后，将会继续比对其它规则。</p>

<p>iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</p></li>
<li><p>MIRROR 镜射封包，也就是将来源 IP 与目的地 IP 对调后，将封包送回，进行完此处理动作后，将会中断过滤程序。</p></li>
<li><p>QUEUE 中断过滤程序，将封包放入队列，交给其它程序处理。透过自行开发的处理程序，可以进行其它应用，</p></li>
<li><p>MARK 将封包标上某个代号，以便提供作为后续过滤的条件判断依据，进行完此处理动作后，将会继续比对其它规则。</p>

<p>iptables -t mangle -A PREROUTING -p tcp --dport 22 -j MARK --set-mark 2</p></li>
<li><p>RETURN结束在目前规则炼中的过滤程序，返回主规则炼继续过滤，如果把自订规则炼看成是一个子程序，那么这个动作，就相当提早结束子程序并返回到主程序中。</p></li>
<li><p>LOG 将封包相关讯息纪录在 /var/log 中，详细位置请查阅 /etc/syslog.conf 组态档，进行完此处理动作后，将会继续比对其规则。</p>

<p>iptables -A INPUT -p tcp -j LOG --log-prefix "INPUT packets"</p></li>
</ul>

<p>关于动作的使用，继续往下来:)！</p>

<p>然后还有一点，一般我们都会考虑到，当数据包没有规则匹配是应该肿么办，是的，这个时候还有一个默认规则，通常叫做默认策略，<code>当数据包不被任何规则匹配时，会采用默认规则</code></p>

<pre><code>iptables [-t 表名] &lt;-P&gt; &lt;链名&gt; &lt;动作&gt;
</code></pre>

<p>这里动作就不加-j了，因为-j表示匹配到以后执行的动作。</p>

<p>然后，我们再继续一点，当规则很多的时候，我们不可能一条一条的删除呗，所以还有以下：</p>

<pre><code>iptables [-t 表名] [链名] &lt;-F|Z&gt;
</code></pre>

<p>还是一样，不指定表名默认操作filter表，这里Z表示计数器和流量归0，现在我们暂时不管他。关于删除，还得多说一点：</p>

<ul>
<li><p>1 <code>-F 仅仅是清空链中规则，并不影响 -P 设置的默认规则</code></p></li>
<li><p>2 -P(默认策略)设置了 DROP 后，使用 -F 一定要小心，不然你网络就断了。</p></li>
<li><p>3 如果不写链名，默认清空某表里所有链里的所有规则</p></li>
</ul>

<p>iptables的规则在重启后就会失效，所以还需要保存和载入：</p>

<pre><code>iptables-save &gt; /xx/iptables.save
iptables-restore &lt; /xx/iptables.save
</code></pre>

<h2>2 iptables的应用</h2>

<p>iptables的动作设置，其实就属于iptables的应用了。我们来看看：</p>

<h3>2.1 增加安全性</h3>

<pre><code>iptables -P INPUT DROP
iptables -p OUTPUT DROP
</code></pre>

<p>体会一下默认策略的作用，你就懂了。</p>

<h3>2.2 NAT</h3>

<p>做SNAT，允许内部的机器访问外部网络，这需要在出去的时候操作POSTROUTING链，SNAT 支持转换为单 IP，也支持转换到 IP 地址池。</p>

<pre><code>-j SNAT --to IP[-IP][:端口-端口]
iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eht0 -j SNAT --to 1.1.1.1
iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j SNAT --to 1.1.1.1-1.1.1.1
</code></pre>

<p>做DNAT，主要是使外部的流量能够访问到内部的网络，类似DMZ功能，这需要在数据包进入的时候操作PREROUTING链目的地址转换，DNAT 支持转换为单 IP，也支持转换到 IP 地址池</p>

<pre><code>-j DNAT --to IP[-IP][:端口-端口]
iptables -t nat -A PREROUTING -i ppp0 -p tcp --dport 80 -j DNAT --to 192.168.0.1:80
iptables -t nat -A PREROUTING -i ppp0 -p tcp --dport 80 -j DNAT --to 192.168.0.1-192.168.0.10
</code></pre>

<h3>2.3 MASQUERADE</h3>

<p>地址转换，动态源地址转换(动态 IP 的情况下使用)，主要还是NAT上使用</p>

<pre><code>iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE
</code></pre>

<p>将源地址是 192.168.0.0/24 的数据包进行地址伪装,这是一个SNAT。</p>

<h3>2.4 防火墙</h3>

<p>防火墙嘛，主要就是过滤，当然是用到filter表了。</p>

<pre><code>iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A OUTPUT -p udp --sport 22 -j ACCEPT
</code></pre>

<h3>2.5 转发</h3>

<p>如果机器具有网关的作用，那么就一定要能转发数据包，可以通过FPRWARD控制分组转发到LAN上的哪些地方，比如一个机器，两个网卡，eth0接外部网络，eth1接内部网络，并且网关作用，就要允许eth1上转发</p>

<pre><code>iptables -A FORWARD -i eth1 -j ACCEPT
iptables -A FORWARD -o eth1 -j ACCEPT
</code></pre>

<p>经过以上学习，常用的iptables的功能都差不多了，其实看到这里，也就可以勒，如果你还想玩的炫一点，那就接着看下一篇。</p>

<h2>3 参考资料</h2>

<p><a href="http://man.chinaunix.net/network/iptables-tutorial-cn-1.1.19.html">http://man.chinaunix.net/network/iptables-tutorial-cn-1.1.19.html</a></p>

<p><a href="http://www.lampbo.org/linux-xuexi/linux-advance/iptables-options.html">http://www.lampbo.org/linux-xuexi/linux-advance/iptables-options.html</a></p>

<p><a href="http://tech.anquan365.com/application/other/201201/167224.html">http://tech.anquan365.com/application/other/201201/167224.html</a></p>

<p>推荐<a href="http://www.cnblogs.com/diyunpeng/archive/2012/05/10/2493749.html">http://www.cnblogs.com/diyunpeng/archive/2012/05/10/2493749.html</a></p>

<p>推荐<a href="http://blog.163.com/xychenbaihu@yeah/blog/static/132229655201212705752493/">http://blog.163.com/xychenbaihu@yeah/blog/static/132229655201212705752493/</a></p>

<p>一个实战经验，我没看：<a href="http://blog.sina.com.cn/s/blog_67a6c6f10100k3yx.html">http://blog.sina.com.cn/s/blog_67a6c6f10100k3yx.html</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date>2013-03-09 23:53:40</wp:post_date>
		<wp:post_date_gmt>2013-03-09 15:53:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iptables-useage-ref-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="iptables"><![CDATA[iptables]]></category>
		<category domain="category" nicename="%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0"><![CDATA[技术学习]]></category>
		<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86"><![CDATA[运维管理]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[详细解释了iptables的使用iptables [-t 表名] <-A(追加) | -I(插入)> | -D(删除) | -R(替换)> <链名> [规则编号] [-i|o 进入或流出网卡名称] [-p 协议类型] [-s 源IP地址|源子网] [--sport 源端口号] [-d 目标ip地址|目标子网] [--dport 目标端口号] <-j 动作(accept|drop|nat等)> ，并且给出了实际应用的例子。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[Iptables使用参考手册(二)]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>也谈OpenvSwitch配置GRE隧道（一）</title>
		<link>http://blog.wachang.net/2013/03/openvswitch-configure-gre-note-1/</link>
		<pubDate>Mon, 11 Mar 2013 13:48:05 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>1 OpenvSwitch in Kernel</h2>

<p>从3.3的内核开始，OpenvSwitch（简称OVS）集成到Linux内核中去了，也就是说以后源码安装OVS的时候就不需要编译内核模块了，但是目前内核中的OVS还不支持配置GRE隧道。于是王聪的文章说了在这种情况下如何给OVS配置GRE。</p>

<p>王聪：<a href="http://wangcong.org/blog/archives/2163">在 openvswitch 上配置 GRE tunnel</a></p>

<p>以下是相关的一些笔记：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/openvswitch-gre.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/openvswitch-gre.jpg" alt="openvswitch-gre" width="666" height="409" class="aligncenter size-full wp-image-149" /></a></p>

<blockquote>
  <p>创建一个普通的 GRE tunnel，然后把它添加到 openvswitch bridge 中去就可以了。如下图：</p>
  
  <p>目标是让 HOST1 上面的两个 VM 和 HOST2 上面的两个 VM 通过 GRE tunnel 实现通信，在这个环境中，一个很可能的错误是把 HOST2 上的 uplink，即 eth0 也加入到 openvswitch 的 bridge 中，这是不对的，需要加入仅仅的是 GRE tunnel 设备，即 gre1 （你当然也可以把它命名为其它名字）。</p>
</blockquote>

<!--more-->

<p><code>注意，此时的gre设备不是在OVS中创建的，是在系统中创建的。</code></p>

<p>至于为什么会这样，可以参考我之前的学习笔记，大概的原理就是让VM的数据包的路由通过GRE设备，这样就可以进行GRE封装，封装后的数据源目地址就成了10.16.43.xx，这样再走eth0实际网卡出去，就能到达对端。</p>

<blockquote>
  <p>剩下的一个最重要的问题是，GRE tunnel 是无法回应 ARP 的，因为它是一个 point to point 的设备（ip addr add 192.168.2.1/24 peer 192.168.1.1/24 dev gre1），所以很明显设置了 NOARP。这个问题是这里的关键。因为这个的缘故，即使你在 VM1 上也无法 ping HOST2 上的 gre1。所以这里需要一个技巧，就是要给 bridge 本身配置一个 IP 地址，然后让 bridge 做一个 ARP proxy！</p>
</blockquote>

<p>首先要明白这个环境中为什么需要ARP。首先，<code>OVS与VM连接，VM的VNIC是有一个MAC地址的</code>。其次，这个GRE隧道是OVS和OVS之间的，所以，VM间的通信是二层MAC针的形式，在到达交互的时候MAC帧应该是<code>[dmac][smac][dip][sip][data]</code>这种形式，所以H1的VM ping H2的VM的时候，一定需要先由ARP请求得到VM的MAC地址（实际上是OVS的port的MAC地址）。那么按此推断，此时GRE封装的应该是二层数据。看看最后H2主机（不是VM）的设置：</p>

<pre><code>[root@host2 ~]# ip tunnel show
gre0: gre/ip  remote any  local any  ttl inherit  nopmtudisc
gre1: gre/ip  remote 10.16.43.214  local 10.16.43.215  ttl inherit #首先H2是有一个gre设备

[root@host2 ~]# ip r s
192.168.2.0/24 dev ovsbr0  proto kernel  scope link  src 192.168.2.4
192.168.1.0/24 dev gre1  scope link
##上面一条路由相当重要，后面有解释
192.168.122.0/24 dev virbr0  proto kernel  scope link  src 192.168.122.1
10.16.40.0/21 dev eth0  proto kernel  scope link  src 10.16.43.215
169.254.0.0/16 dev eth0  scope link  metric 1005
default via 10.16.47.254 dev eth0
</code></pre>

<p>首先，VM通信的时候经过OVS，那么到达内核的数据就是二层的了。这个时候路由表示目的地址为192.168.1.0需要做GRE封装，于是这个二层帧被GRE封装，又根据设备gre1的性质，这个数据再三成上被封装为：</p>

<pre><code>[remote_ip:10.16.43.214][local_ip:10.16.43.215][原始L2 DATA]
</code></pre>

<p>这个数据包从路由来看，又是该走eth0出去，于是再包裹一个二层：</p>

<pre><code>[dmac(H1 eth0 MAC)][smac(H2 eth0 MAC)][remote_ip:10.16.43.214][local_ip:10.16.43.215][原始L2 DATA]
</code></pre>

<p>于是数据到达H1了。H1经过解封到达OVS，再到达VM。</p>

<blockquote>
  <p>HOST2 上面的 VM1 只需添加一个路由即可，配置如下：</p>
</blockquote>

<pre><code>[root@localhost ~]# ip r s
192.168.2.0/24 dev eth1  proto kernel  scope link  src 192.168.2.2
192.168.1.0/24 dev eth1  scope link  src 192.168.2.2
[root@localhost ~]# ping 192.168.1.2
PING 192.168.1.2 (192.168.1.2) 56(84) bytes of data.
64 bytes from 192.168.1.2: icmp_seq=1 ttl=62 time=561 ms
64 bytes from 192.168.1.2: icmp_seq=2 ttl=62 time=0.731 ms
</code></pre>

<p>VM上还需要配置路由，这个我不是很懂，再琢磨一下先。</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2013-03-11 21:48:05</wp:post_date>
		<wp:post_date_gmt>2013-03-11 13:48:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openvswitch-configure-gre-note-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gre"><![CDATA[GRE]]></category>
		<category domain="post_tag" nicename="openvswitch"><![CDATA[openvswitch]]></category>
		<category domain="category" nicename="%e5%8d%8f%e8%ae%ae%e5%ad%a6%e4%b9%a0"><![CDATA[协议学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[openvswitch-configure-gre-note]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[gre,tunnel,openvswitch]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[从3.3的内核开始，OpenvSwitch（简称OVS）集成到Linux内核中去了，也就是说以后源码安装OVS的时候就不需要编译内核模块了，但是目前内核中的OVS还不支持配置GRE隧道。于是王聪的文章说了在这种情况下如何给OVS配置GRE。我做了一个简单的总结和注释，以便与理解！]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[也谈OpenvSwitch配置GRE隧道（一）]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>67</wp:comment_id>
			<wp:comment_author><![CDATA[Boutique Angleterre]]></wp:comment_author>
			<wp:comment_author_email>axhxwuun@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://maillots2013.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP>202.105.60.238</wp:comment_author_IP>
			<wp:comment_date>2013-04-25 04:10:12</wp:comment_date>
			<wp:comment_date_gmt>2013-04-24 20:10:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would like this!!! Boutique Angleterre http://maillots2013.wordpress.com/
]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1366944071]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[maillot psg 2013]]></wp:comment_author>
			<wp:comment_author_email>teukyyxlj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.maillotpsg2013.info/</wp:comment_author_url>
			<wp:comment_author_IP>202.105.89.157</wp:comment_author_IP>
			<wp:comment_date>2013-04-25 16:16:09</wp:comment_date>
			<wp:comment_date_gmt>2013-04-25 08:16:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I loved your post.Thanks Again. Really Great. maillot psg 2013 http://www.maillotpsg2013.info/
]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1366944073]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>隧道技术GRE/PPTP/SSH等学习笔记</title>
		<link>http://blog.wachang.net/2013/03/tunnel-techology-note/</link>
		<pubDate>Wed, 13 Mar 2013 15:18:51 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=151</guid>
		<description></description>
		<content:encoded><![CDATA[<p>又看了王聪大神的两篇文章，感觉对于隧道技术有新的理解了。</p>

<p>文章1：王聪：<a href="http://wangcong.org/blog/archives/1683">各种 tunnel</a></p>

<p>还是罗列一下我的学习笔记：</p>

<blockquote>
  <p>概括地讲，所谓 tunnel 就是把下一层（比如IPv4层）的包封装到上一层（比如 SSH，HTTP）或者同一层（比如IPv6层）的协议中进行传输，从而实现网络之间的穿透。很明显，这种实现有个前提，那就是，发送端和接收端必须各有一个解析这种包的程序或者内核模块才能实现正常通信。</p>
</blockquote>

<p><strong>之前我知道GRE是三层协议，以为就是封装网络层的数据，从这么看的话，不是的，GRE应该是可以封装2层和三层的！！！</strong></p>

<!--more-->

<blockquote>
  <p>内核中可以支持四种隧道：ipip、gre、sit、isatap</p>
  
  <p>ipip 是把 IP 层封装到 IP 层的一个 tunnel，看起来似乎是浪费，实则不然。它的作用其实基本上就相当于一个基于IP层的网桥！我们知道，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。ipip 的源代码在内核 net/ipv4/ipip.c 中可以找到。</p>
  
  <p>sit 和 isatap 都是 IPv6 over IPv4 的 tunnel，它们的源代码在 net/ipv6/sit.c 中。它们之间也不同，和IPv6的地址有关，写在这里恐怕放不下了，故省略。</p>
  
  <p>IPSec 还用到一个叫 L2TP 的 tunnel，在内核源代码 net/l2tp 中，PPTP 是另外一个，在 drivers/net/pptp.c 中实现。</p>
  
  <p>gre 和它类似，但它功能还要更强大一些，还支持广播，它可以取代 ipip。</p>
</blockquote>

<p>王聪的另外一个文章详细讲解了GRE隧道的特点：</p>

<p>王聪：<a href="http://wangcong.org/blog/archives/2149">深入理解 GRE tunnel</a></p>

<p>也是好文章，直接引用~~~</p>

<p>首先，多数tunnel都是点到点的，也就是说，<strong>是从机器的一端到另外一个机器的一端</strong>，如下图：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/sit_tunnel1.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/sit_tunnel1.jpg" alt="sit_tunnel1" width="794" height="442" class="aligncenter size-full wp-image-152" /></a></p>

<p>除了端点的 host A 和 host B之外，中间经过的任何设备都是看不到里面的 IPv6 的头，对于它们来说，经过 sit 发出的包和其它的 IPv4 的包没有任何区别。</p>

<p>GRE tunnel 却不一样了，它的原理从根本上和 sit，ipip 这样的 tunnel 就不一样。除了外层的 IP 头和内层的 IP 头之间多了一个 GRE 头之外，它最大的不同是，tunnel 不是建立在最终的 host 上，而是在中间的 router 上！换句话说，对于端点 host A 和 host B 来说，该 tunnel 是透明的（对比上面的 sit tunnel）。这是网上很多教程里没有直接告诉你的。理解这一点非常关键，正是因为它这么设计的，所以它才能解决 ipip tunnel 解决不了的问题。所以，经过 GRE tunnel 发送的包（从 host A 发送到 host B）大体过程是这样子的：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/gre_tunnel.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/gre_tunnel.jpg" alt="gre_tunnel" width="847" height="445" class="aligncenter size-full wp-image-154" /></a></p>

<p>我们可以看出，从 host A 发出的包其实就是一个很普通的 IP 包，除了目的地址不直接可达外。该 GRE tunnel 的一端是建立在 router A上，另一段是建立在 router B上，所以添加外部的 IP 头是在 router A 上完成的，而去掉外面的 IP 头是在 router B上完成的，两个端点的 host 上几乎什么都不用做（除了配置路由，把发送到 10.0.2.0 的包路由到 router A）！</p>

<p>这么设计的好处也就很容易看出来了，ipip tunnel 是端对端的，通信也就只能是点对点的，而 GRE tunnel 却可以进行多播。</p>

<p>最后来一张GRE报文格式图：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/gre_header.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/gre_header.png" alt="gre_header" width="479" height="119" class="aligncenter size-full wp-image-155" /></a></p>

<h2>参考文章：</h2>

<p><a href="http://www.linuxdocs.org/HOWTOs/Adv-Routing-HOWTO-5.html">http://www.linuxdocs.org/HOWTOs/Adv-Routing-HOWTO-5.html</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date>2013-03-13 23:18:51</wp:post_date>
		<wp:post_date_gmt>2013-03-13 15:18:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tunnel-techology-note</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gre"><![CDATA[GRE]]></category>
		<category domain="post_tag" nicename="tunnel"><![CDATA[tunnel]]></category>
		<category domain="category" nicename="%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0"><![CDATA[技术学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[gre,tunnel]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[概括地讲，所谓 tunnel 就是把下一层（比如IPv4层）的包封装到上一层（比如 SSH，HTTP）或者同一层（比如IPv6层）的协议中进行传输，从而实现网络之间的穿透。很明显，这种实现有个前提，那就是，发送端和接收端必须各有一个解析这种包的程序或者内核模块才能实现正常通信。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[隧道技术GRE/PPTP/SSH等学习笔记]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mirantis-Elastic Hadoop on OpenStack</title>
		<link>http://blog.wachang.net/2013/03/mirantis-elastic-hadoop-on-openstack/</link>
		<pubDate>Tue, 19 Mar 2013 14:28:22 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[<p>今天看到mirantis把hadoop和openstack进行了一个集成，提出了一个EHO系统，从架构上看还是很有意思的。对于我做过OpenStack开发的话，还是蛮有收获。重点是EHO现在的文档做的相当好，就很有参考价值了。</p>

<p>主页：<a href="http://eho.mirantis.com/index.html">http://eho.mirantis.com/index.html</a></p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/EHO-ARCH.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/EHO-ARCH.jpg" alt="EHO ARCH" width="787" height="453" class="aligncenter size-full wp-image-176" /></a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date>2013-03-19 22:28:22</wp:post_date>
		<wp:post_date_gmt>2013-03-19 14:28:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mirantis-elastic-hadoop-on-openstack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hadoop"><![CDATA[hadoop]]></category>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="openstack-2"><![CDATA[openstack]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[Mirantis-Elastic Hadoop on OpenStack]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[Mirantis-Elastic Hadoop on OpenStack]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>也谈OpenvSwitch配置GRE隧道（二）</title>
		<link>http://blog.wachang.net/2013/03/openvswitch-configure-gre-note-2/</link>
		<pubDate>Tue, 19 Mar 2013 06:48:10 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[<p>OpenvSwitch配置GRE隧道另外一个比较有用的地方就是在OpenFlow环境中通过GRE隧道连接两个Switch，从而实现多个单独OpenFlow网络的互通。这在做实验的环境下还是非常有用的。</p>

<ul>
<li>OpenvSwitch gre隧道配置</li>
</ul>

<p>文章地址：<a href="https://github.com/PeerXu/blog/blob/master/_posts/2013-1-15-open-vswitch-gre-tunnel-configuration.md">https://github.com/PeerXu/blog/blob/master/_posts/2013-1-15-open-vswitch-gre-tunnel-configuration.md</a></p>

<p>本地下载：[wpdm_file id=1]</p>

<!--more-->

<ul>
<li>Open vSwitch的GRE Tunnel配置</li>
</ul>

<p>这个文章同样也是用GRE来连接两个OpenFlow网络，不过讲的更详细一点，原文文档可以点下面的连接下载，做一点笔记~</p>

<p>感觉这个的配置稍微有点复杂啊</p>

<p>文章地址:<a href="http://kimi4ysr.me/?p=251">http://kimi4ysr.me/?p=251</a></p>

<p>本地下载：[wpdm_file id=2]</p>

<p>一点参考文章：</p>

<p><a href="http://networkstatic.net/open-vswitch-gre-tunnel-configuration/">http://networkstatic.net/open-vswitch-gre-tunnel-configuration/</a></p>

<p><a href="http://networkstatic.net/openvswitch-and-gre-tunnel-notes/">http://networkstatic.net/openvswitch-and-gre-tunnel-notes/</a></p>

<p><a href="http://wangcong.org/blog/archives/2238">http://wangcong.org/blog/archives/2238</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date>2013-03-19 14:48:10</wp:post_date>
		<wp:post_date_gmt>2013-03-19 06:48:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openvswitch-configure-gre-note-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gre"><![CDATA[GRE]]></category>
		<category domain="category" nicename="openflow"><![CDATA[OpenFlow]]></category>
		<category domain="post_tag" nicename="openvswitch"><![CDATA[openvswitch]]></category>
		<category domain="category" nicename="%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0"><![CDATA[技术学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[也谈OpenvSwitch配置GRE隧道（二）]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[也谈OpenvSwitch配置GRE隧道（二）]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NVGRE: Network Virtualization using Generic Routing Encapsulation</title>
		<link>http://blog.wachang.net/2013/03/nvgre-network-virtualization-using-generic-routing-encapsulation/</link>
		<pubDate>Tue, 19 Mar 2013 15:25:28 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=172</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>本文主要是我学习IETF文档NVGRE: Network Virtualization using Generic Routing Encapsulation的一个笔记。版本是02.文档地址：<a href="http://tools.ietf.org/html/draft-sridharan-virtualization-nvgre-02">http://tools.ietf.org/html/draft-sridharan-virtualization-nvgre-02</a>，文末是文档的本地PDF下载。这个文档主要讲的事如何用GRE协议来实现网络虚拟化。相关的定义就是NVGRE协议。</p>
</blockquote>

<h2>1. Introduction</h2>

<p>传统数据中心的规模很大，因为是在二层，所以在资源动态分配和容量上有局限，于是RSTP（Rapid Spanning Tree Protocol）协议能很好的解决冗余阻塞环路的问题，但是优惠造成网络容量的浪费以及网络超额，于是像TRILL协议等又被提出解决这个问题。</p>

<p>因为使用了VLAN技术来做广播隔离，网络的利用率其实很低。VLAN既作为流量控制的手段，也作为租户之间服务安全的保证，于是2层网络就被切割成许多小的子网，通常一个子网有一个VLAN ID，但是VLAN ID又有4K的限制，数量太少。于是下一代数据中心网络就要考虑到以下问题：</p>

<ul>
<li>逻辑L2 L3网络的扩展 </li>
<li>当各种服务在DC中移动的时候要保护地址信息，或者L2段</li>
<li>提供广播隔离</li>
</ul>

<p>于是，提出了一个NVGRE。</p>

<!--more-->

<h2>3. Network Virtualization using GRE</h2>

<p>网络虚拟化Network Virtualization包括：在实际的L2/L3网络中创建虚拟的L2/L3网络拓扑。那么虚拟拓扑之间的通信，就是通过把虚拟拓扑产生的以太帧封装的实际网络的IP中，（隧道技术），那么，有一些定义：</p>

<p>没一个虚拟L2网络有一个24bit的标示符identifier，叫做Virtual Subnet Identifier (VSID，24bit足够1600万个虚拟subnet同时处在一个管理与上。一个VSID可以认为是一个广播域，有点类似VLAN ID。这个VSID在隧道封装中是可以作为头部信息的。</p>

<p>GRE这个协议是IETF RFC 2784提出的，特点就是<code>可以把任意协议封装到IP上</code>。而NVGRE补充了GRE协议，使得在每个包中药携带一个VSID的信息。</p>

<h3>3.1. NVGRE Endpoint</h3>

<p>NVGRE Endpoint就是在虚拟网络和实际网络之间出入的端点，任意屋里服务器或者网络设备都可以作为NVGRE Endpoint。但是在实际中常见的是<code>作为hypervisor</code>的一部分。endpoint主要功能有以下：</p>

<ul>
<li>封装以太帧到GRE设备/从GRE设备解封出以太帧</li>
<li>可以作为一个虚拟拓扑的网关</li>
</ul>

<p>为了封装以太帧，endpoint需要知道帧中目的地址的位置信息，这个地址可以通过管理层分配，本文档假设位置信息，包括VSID，在NVGRE endpoint是存在的。</p>

<h3>3.2. NVGRE frame format</h3>

<p>RFC 2784 RFC 2890中GRE头部的定义被用来在 NVGRE endpoints间通信。 NVGRE 扩展了头部信息，加入了VSID，GRE中二层包封装的格式如下，注意，从上往下看，就是整个数据的从外到内看：</p>

<p>首先，在网络中实际传输的MAC帧的格式 Outer Ethernet Header:</p>

<pre><code>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                (Outer) Destination MAC Address                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|(Outer)Destination MAC Address |  (Outer)Source MAC Address    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  (Outer) Source MAC Address                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|Optional Ethertype=C-Tag 802.1Q| Outer VLAN Tag Information    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</code></pre>

<p>其次，剥掉上面一层，则是网络中传输的IP报文的格式：</p>

<p>Outer IPv4 Header:</p>

<pre><code>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|Version|  IHL  |Type of Service|          Total Length         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Identification        |Flags|      Fragment Offset    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Time to Live | Protocol 0x2F |         Header Checksum       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      (Outer) Source Address                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  (Outer) Destination Address                  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</code></pre>

<p>剥掉上面一层，则是NVGRE Header：</p>

<pre><code>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0| |1|0| Reserved0       | Ver |   Protocol Type 0x6558        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|               Virtual Subnet ID (VSID)        |   Reserved    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</code></pre>

<p>剥掉GRE头信息，则是相应的虚拟拓扑的信息，也就是原始需要通信端点的信息 Inner Ethernet Header：</p>

<pre><code>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                (Inner) Destination MAC Address                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|(Inner)Destination MAC Address |  (Inner)Source MAC Address    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  (Inner) Source MAC Address                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|Optional Ethertype=C-Tag 802.1Q| PCP |0| VID set to 0          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       Ethertype 0x0800        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</code></pre>

<p>最后，才是原始的IP层信息 Inner IPv4 Header:</p>

<pre><code>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|Version|  IHL  |Type of Service|          Total Length         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Identification        |Flags|      Fragment Offset    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Time to Live |    Protocol   |         Header Checksum       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       Source Address                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Destination Address                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Options                    |    Padding    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      Original IP Payload                      |
|                                                               |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</code></pre>

<p>有一个解释，这个我好好翻译下：</p>

<ul>
<li>The outer Ethernet header：源地址是NVGRE endpoint（一个物理设备或者虚拟的设备）的MAC地址，目的地址是吓一跳指定节点，也是一个NVGRE endpoint节点的MAC地址。VLAN可以让这个帧跨越子网的。</li>
<li>The outer IP header:就是上一层的IP层地址信息。</li>
<li>C (Checksum Present)和S (Sequence Number Present)必须为0</li>
<li>The K bit (Key Present) 32bit，NVGRE用这个key来携带VSID.</li>
</ul>

<p>具体来说32bit的key值，钱24bit用来携带VSID，后8bit用来携带一个FlowID，这个可以用来在VS中进一步划分流。</p>

<ul>
<li><p>GRE头信息中，协议类型0x6558，(transparent Ethernet bridging)</p></li>
<li><p>在GRE中不仅仅能封装IP层，其他层都可以，NVGRE也是一样。</p></li>
</ul>

<h2>4 广播和多播</h2>

<p>传统来说，像GRE这种点到点的tunnel是不能支持多播和广播的，NVGRE提出一个思想，就是为每一个subnet，或者说VSID所表示的虚拟网络指定一个广播和多播地址，从而解决这个问题。</p>

<h3>4.2. Unicast Traffic 这段话很重要</h3>

<p>NVGRE endpoint在GRE中封装2层报文，source PA（packet address）是这个endpoint的地址，而destination PA则是相应的对端endpoint地址。一个endpoint可以有多个地址，就有一个策略来选择是使用哪个地址，经过GRE封装以后，<code>The encapsulated GRE packet is bridged and routed normally by the physical network to the destination.</code>以及<code>On the destination the NVGRE endpoint decapsulates the GRE packet to recover the original Layer-2 frame.</code></p>

<h3>4.3. IP Fragmentation</h3>

<p>在IP中，长的IP报文是有一个分段的，那么NVGRE这种是IP报文进行了一次封装，就最好不要分段，再一下草案中可能会提出解决分段的机制。</p>

<h3>4.4. Address/Policy Management &amp; Routing</h3>

<h3>4.5. Cross-subnet, Cross-premise Communication</h3>

<p>主要是一个VPN gateway，建立一个site-to-site的隧道，注意不是端到端的。从而使得交叉的subnets之间可以通信。如下图：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/nvgre-cross-subnets.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/nvgre-cross-subnets.jpg" alt="nvgre-cross-subnets" width="633" height="747" class="aligncenter size-full wp-image-178" /></a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date>2013-03-19 23:25:28</wp:post_date>
		<wp:post_date_gmt>2013-03-19 15:25:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nvgre-network-virtualization-using-generic-routing-encapsulation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gre"><![CDATA[GRE]]></category>
		<category domain="post_tag" nicename="nvgre"><![CDATA[NVGRE]]></category>
		<category domain="category" nicename="%e5%8d%8f%e8%ae%ae%e5%ad%a6%e4%b9%a0"><![CDATA[协议学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[本文主要是我学习IETF文档NVGRE: Network Virtualization using Generic Routing Encapsulation的一个笔记。版本是02.文档地址：，文末是文档的本地PDF下载。这个文档主要讲的事如何用GRE协议来实现网络虚拟化。相关的定义就是NVGRE协议。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[NVGRE: Network Virtualization using Generic Routing Encapsulation]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WSGI应用常见的几种写法-基本形式</title>
		<link>http://blog.wachang.net/2013/03/wsgi-application-style-base/</link>
		<pubDate>Tue, 19 Mar 2013 18:34:00 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=181</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>这是转自我Octopress博客的文章，现在我的主力还是放到Wordpress吧，毕竟在WIN下用太geek的工具还是有一些问题</p>
</blockquote>

<p>Python WSGI标准<a href="http://www.python.org/dev/peps/pep-0333/">PEP-0333</a>中说到一个WSGI是一个可调用callable的对象，这包含了一个函数，一个方法，一个类，或者拥有call方法的实例。下面我就对这句话做一个总结，举几个例子。这里的WSGI应用的功能都是返回请求的环境信息environ。</p>

<!--more-->

<h2>1 服务端</h2>

<p>采用简单的WSGI服务器参考实现，如下：</p>

<pre><code>if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    server = make_server('192.168.1.11', 7070, wsgi_application)
    server.serve_forever()
</code></pre>

<h2>2 函数方法</h2>

<p>这是最简单的方法，先调用<code>start_response()</code>处理返回头信息，函数再返回可迭代对象，比如列表或者字符串。</p>

<pre><code>def app1(environ,start_response):
    start_response("200 OK",[("Content-type","text/plain")])
    content = []
    for k,v in environ.iteritems():
        content.append('%s:%s \n' % (k,v))
    return content#返回的列表或者字符串
</code></pre>

<p>相应的服务端：</p>

<pre><code>server = make_server('192.168.1.11', 7070, app1)
</code></pre>

<h2>3 带有call方法的实例</h2>

<p>类定义中实现call方法，WSGI应用是这个类的一个实例。</p>

<pre><code>class app2(object):
    def __init__(self):
       pass
    def __call__(self,environ,start_response):
       start_response("200 OK",[("Content-type","text/plain")])
       content = []
       for k,v in environ.iteritems():
           content.append('%s:%s \n' % (k,v))
       return content#返回的列表或者字符串

application = app2()
</code></pre>

<p>服务端：</p>

<pre><code>server = make_server('192.168.1.11', 7070, application)
</code></pre>

<h2>4 类class</h2>

<p>用类作为WSGI应用不太一样，调用这个类时会产生一个类的实例，这个实例随后会需要<strong>iter</strong>迭代返回值。</p>

<pre><code>class app3(object):
    def __init__(self, environ, start_response):
        self.environ = environ
        self.start = start_response

    def __iter__(self):
        status = '200 OK'
        response_headers = [('Content-type', 'text/plain')]
        self.start(status, response_headers)
        content = ''
        for k,v in self.environ.iteritems():
            content += '%s:%s \n' % (k,v)
        yield content#返回的是字符串
</code></pre>

<p>服务端：</p>

<pre><code>server = make_server('192.168.1.11', 7070, app3)
</code></pre>

<p>这里注意，和上面的比较可以看出，如果需要把类的实例作为WSGI应用，则类中需要实现call方法，并且作为WSGI应用的应该是这个类的实例。</p>

<h2>5 方法method</h2>

<p>用一个方法来作为WSGI应用，那么这个方法不可能是实例方法（上面已经讲过），一种方式肯定就是类中的静态方法了，类中的静态方法，就当做一个全局函数一样理解吧。</p>

<pre><code>class app4(object):
    def __init__(self):
        pass
    @staticmethod
    def wsgi(environ,start_response):
        start_response("200 OK",[("Content-type","text/plain")])
        content = []
        for k,v in environ.iteritems():
            content.append('%s:%s \n' % (k,v))
        return content#返回的是列表或者字符串
</code></pre>

<p>服务端：</p>

<pre><code>server = make_server('192.168.1.11', 7070, app4.wsgi)
</code></pre>

<p>那么，类方法，可以用么，当然可以，<code>classmethod</code>和<code>staticmethod</code>在使用上可以看做只是参数有个区别而已，如下：</p>

<pre><code>class app5(object):
    def __init__(self):
        print 'This is app5'
        pass
    @classmethod
    def wsgi(cls,environ,start_response):
        start_response("200 OK",[("Content-type","text/plain")])
        content = []
        for k,v in environ.iteritems():
            content.append('%s:%s \n' % (k,v))
        return content #返回列表或者字符串
</code></pre>

<p>服务端：</p>

<pre><code>server = make_server('192.168.1.11', 7070, app5.wsgi)
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2013-03-20 02:34:00</wp:post_date>
		<wp:post_date_gmt>2013-03-19 18:34:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wsgi-application-style-base</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<category domain="category" nicename="web%e5%bc%80%e5%8f%91"><![CDATA[Web开发]]></category>
		<category domain="post_tag" nicename="wsgi"><![CDATA[wsgi]]></category>
		<category domain="category" nicename="%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0"><![CDATA[技术学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[Python WSGI标准[PEP-0333](http://www.python.org/dev/peps/pep-0333/)中说到一个WSGI是一个可调用callable的对象，这包含了一个函数，一个方法，一个类，或者拥有call方法的实例。下面我就对这句话做一个总结，举几个例子。这里的WSGI应用的功能都是返回请求的环境信息environ。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[WSGI应用常见的几种写法-基本形式]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WSGI应用常见的几种写法-高级形式</title>
		<link>http://blog.wachang.net/2013/03/wsgi-application-style-adv/</link>
		<pubDate>Tue, 19 Mar 2013 18:38:13 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=184</guid>
		<description></description>
		<content:encoded><![CDATA[<p>上一节中说到了WSGI应用的几种基本形式，这一节就来说一些高级的用法，所谓高级，我理解的也就是使用装饰器<code>@</code>，WebOb，以及中间件的形式，当然，还有一些更有意思的用法，比如Paste.Deploy这种载入WSGI应用的形式，我以后会做总结。还是和前篇<a href="http://blog.wachang.net/wsgi-application-style-base/">WSGI应用常见的几种写法-基本形式</a>一样，本文实现的WSGI应用都是一个回显请求环境信息的程序。</p>

<!--more-->

<h2>1 WebOb</h2>

<p>WebOb就是将请求和相应封装成Request和Response类，就可以使用一个类方法简化真个操作，如下，直接将一个字符串作为resp_body传给给Response对象，而不用考虑WSGI中的可迭代对象，这里要注意，Response对象<code>是一个WSGI应用</code>，所以在最后的时候我们使用<code>resp(environ,start_response)</code>就返回了，我们不关心返回的细节问题了，而在标准WSGI中，这一步才只是WSGI应用的入口函数。</p>

<pre><code>def app6(environ, start_response):
    req = Request(environ)
    resp_body = ''
    for k,v in req.environ.iteritems():
        resp_body += '%s:%s\n' % (k,v)
    resp = Response(body=resp_body)
    return resp(environ, start_response)
</code></pre>

<p>服务端：</p>

<pre><code>server = make_server('192.168.1.11', 7070, app6)
</code></pre>

<h2>2 用装饰器@，Controller</h2>

<p>用装饰器@以后，重要的思想就是把WSGI应用关于返回流程的处理（包括header，状态等）和返回Body的处理分开，这样的话实际上一个应用只关注于产生返回的Body就可，而其他的处理流程则交给装饰器controller来完成，这个controller，不要理解成控制神马的，只是一个名字，其原意是作为WSGI中<code>一个资源的控制</code>，不用太操心就当做一个名字就好。</p>

<pre><code>def controller1(func):
    def application(environ,start_response):
        #do something else
        resp_body = func(environ)
        start_response("200 OK",[("Content-type","text/plain")])
        return resp_body
    return application

@controller1
def app7(environ):
    content = []
    for k,v in environ.iteritems():
        content.append('%s:%s \n' % (k,v))
    return content
</code></pre>

<p>服务端：</p>

<pre><code>server = make_server('192.168.1.11', 7070, app7)
</code></pre>

<h2>3 结合WebOb和装饰器</h2>

<p>上面两种方式可能看起来没多大用，但是二者结合到一起，那就不一般了，这样子的话我们用装饰器controller来处理environ,并封装Request和Response，最后让应用函数来处理返回信息，只给出一个字符串Body就可以了。这会大大简化WSGI应用的开发流程。</p>

<pre><code>def controller2(func):
    def replacement(environ, start_response):
        req = Request(environ)
        try:
            resp_body = func(req)
        except exc.HTTPException, e:
            resp_body = e
        resp = Response(body=resp_body)#body must be a string
        resp.status = '200 very OK'
        return resp(environ, start_response)
    return replacement

@controller2
def app8(req):
    ret = ''
    for k,v in req.environ.iteritems():
        ret = ret + '%s:%s \n' % (k,v)
    return ret
</code></pre>

<p>服务端：</p>

<pre><code>    server = make_server('192.168.1.11', 7070, app8)
</code></pre>

<p>以上是用装饰器来装饰一个函数，还有一种用法，用装饰器来装饰一个类。</p>

<pre><code>def controller3(cls):
    def replacement(environ, start_response):
        req = Request(environ)
        instance = cls(req, **req.urlvars)
        method = req.method
        if method == 'GET':
            func = getattr(instance, method.lower())
            resp_body = func()
            if isinstance(resp_body, basestring):
                resp = Response(body=resp_body)
        return resp(environ,start_response)
    return replacement

class App9(object):
    def __init__(self,req,**args):
        self.req = req
    def get(self):
        body = ''
        for k,v in self.req.environ.iteritems():
            body += '%s"%s \n' % (k,v)
        return body

app9 = controller3(App9)
</code></pre>

<p>上面关于类的装饰器可以仔细琢磨一下哈，相应的服务端：</p>

<pre><code>server = make_server('192.168.1.11', 7070, app9)
</code></pre>

<h2>4 总结</h2>

<p>两篇文章我一共说明了9种WSGI应用的写法，当然WSGI只是一个协议，相应的实现还是很灵活的，以后再实践中再分享一些新的用法。整个代码我使用Gist存放，连接在此：<a href="https://gist.github.com/4378216">https://gist.github.com/4378216</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date>2013-03-20 02:38:13</wp:post_date>
		<wp:post_date_gmt>2013-03-19 18:38:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wsgi-application-style-adv</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<category domain="category" nicename="web%e5%bc%80%e5%8f%91"><![CDATA[Web开发]]></category>
		<category domain="post_tag" nicename="wsgi"><![CDATA[wsgi]]></category>
		<category domain="category" nicename="%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0"><![CDATA[技术学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[上一节中说到了WSGI应用的几种基本形式，这一节就来说一些高级的用法，所谓高级，我理解的也就是使用装饰器`@`，WebOb，以及中间件的形式，当然，还有一些更有意思的用法，比如Paste.Deploy这种载入WSGI应用的形式，我以后会做总结。还是和前篇[WSGI应用常见的几种写法-基本形式](http://op.wachang.net/blog/2012/12/wsgi-application-style-base/)一样，本文实现的WSGI应用都是一个回显请求环境信息的程序。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[WSGI应用常见的几种写法-高级形式]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>记录一下Wordpress博客的备份和恢复</title>
		<link>http://blog.wachang.net/2013/03/wordpress-backup-restore/</link>
		<pubDate>Wed, 20 Mar 2013 12:57:47 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=187</guid>
		<description></description>
		<content:encoded><![CDATA[<p>wordpress的特点：</p>

<ul>
<li>所有文章，评论，插件配置信息全部存放于数据库中。</li>
<li>备份wordpress的主程序文件其实没啥意思，因为是php就是一些脚本而已，但是主题文件夹和插件文件夹和附件文件夹一定要备份，恢复的时候覆盖就可以了！</li>
<li>重点备份plugins,themes,uploads三个文件夹，恢复的时候直接覆盖就好。</li>
</ul>

<p>所以，备份wordpress的核心就是，<code>数据库+plugins,themes,uploads文件夹。</code></p>

<!--more-->

<h2>1 备份恢复方法总结</h2>

<h3>phpmyadmin导出数据库，FTP备份恢复相关文件</h3>

<p>但是貌似有点受限于主机提供商。</p>

<h3>WordPress自带的xml导出导入功能。</h3>

<p>能很好的备份文章，但是据说不能备份<code>插件和主题设置</code>，这个就很痛苦了。</p>

<h3>帝国备份王</h3>

<p>一个php程序备份数据库，据说，非常完美。但是我看最新的版本也就是2010年的了，不知道效果怎么样。</p>

<h2>2 我的备份方案</h2>

<p>我自己博客的备份方案：</p>

<ul>
<li>因为我文章是markdown格式，很通用，在github上My_Backup/posts/中备份所有的文章。</li>
<li>数据库就用帝国备份来吧，备份文件不大，放在My_Backup/wordpress/db/中</li>
<li>为了保证数据库备份不出错，就再做一个mydql dump命令的备份吧，放在My_Backup/wordpress/db/xxx.sql中</li>
<li>把plugins,themes,uploads做一个备份，放在My_Backup/wordpress/{plugins,themes,uploads}中</li>
<li>使用wordpress自带的导入导出工具，放在My_Backup/wordpress/xml中</li>
</ul>

<p>这样看来，不管怎么样，我都可以很好的恢复了吧。</p>

<h2>3 参考文章</h2>

<p><a href="http://zmingcx.com/wordpress-backup-and-recovery.html">http://zmingcx.com/wordpress-backup-and-recovery.html</a></p>

<p><a href="http://www.kay1987.com/887">http://www.kay1987.com/887</a></p>

<p><a href="http://www.phome.net/">http://www.phome.net/</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date>2013-03-20 20:57:47</wp:post_date>
		<wp:post_date_gmt>2013-03-20 12:57:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wordpress-backup-restore</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86"><![CDATA[运维管理]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[记录一下Wordpress博客的备份和恢复]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[记录一下Wordpress博客的备份和恢复]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux IP Command使用笔记</title>
		<link>http://blog.wachang.net/2013/03/linux-ip-command/</link>
		<pubDate>Sun, 24 Mar 2013 14:22:29 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[<p>IP命令可比ifconfig强大多了，掌握IP就基本掌握了网络方面的运维管理等。关于IP命令的详细学习，可以参考文末的参考文章，我这里只记录一下我觉得对我比较实用的。</p>

<blockquote>
  <p>ip是iproute2软件包里面的一个强大的网络配置工具，它能够替代一些传统的网络管理工具。例如：ifconfig、route 等。</p>
</blockquote>

<h2>1 命令格式</h2>

<pre><code> ip [OPTIONS] OBJECT [COMMAND [ARGUMENTS]]
</code></pre>

<p>OPTIONS：</p>

<ul>
<li>-V 打印ip 的版本并退出</li>
<li>-s,-stats,-statistics 输出更为详尽的信息。</li>
<li>-o 对每行记录都使用单行输出，回行用字符代替。</li>
<li>-r 查询域名解析系统，用获得的主机名代替主机IP 地址。</li>
</ul>

<!--more-->

<p>OBJECT：是你要管理或者获取信息的对象</p>

<ul>
<li>link 网络设备</li>
<li>address 一个设备的协议（IP 或者IPV6）地址</li>
<li>neighbour ARP 或者NDISC 缓冲区条目</li>
<li>route 路由表条目</li>
<li>rule 路由策略数据库中的规则 *　maddress 多播地址</li>
<li>mroute 多播路由缓冲区条目</li>
<li>tunnel IP上的通道</li>
</ul>

<p>ARGUMENTS 是命令的一些参数，它们倚赖于对象和命令。ip支持两种类型的参数：flag 和parameter 。flag由一个关键词组成；parameter 由一个关键词加一个数值组成。为了方便，每个命令都有一个可以忽略的默认参数。例如，参数dev 是ip link 命令的默认参数，因此ip link ls eth0 等于ip link ls dev eth0</p>

<h2>LINK</h2>

<p>查看设备信息：</p>

<pre><code>root@kb310-node10:~#ip link show {dev NAME,up,}

1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 20:cf:30:01:f2:99 brd ff:ff:ff:ff:ff:ff
</code></pre>

<p>qdisc (queuing discipline)显示这个网络接口使用的排队算法。noqueue 表示不对数据包进行排队；noop 表示这个网络接口出于黑洞模式，也就是所有进入本网络设备的数据会直接被丢弃。qlen 是网络接口传输队列的默认长度。</p>

<p>使用-statistics 选项，ip命令会打印出网络接口的统计信息：</p>

<pre><code>root@kb310-node10:~# ip -s link show dev eth0
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 20:cf:30:01:f2:99 brd ff:ff:ff:ff:ff:ff
    RX: bytes  packets  errors  dropped overrun mcast   
    299273196425 420800569 0       51      0       0      
    TX: bytes  packets  errors  dropped carrier collsns 
    285997074106 420422755 0       0       0       0 
</code></pre>

<p>更改设备信息：</p>

<pre><code>ip link set dev eth0 {up/down,arp on/off,multicast on/off,name NAME,txqueuelen NUMBER,mtu NUMBER,address LLADDRESS(MAC地址),}
</code></pre>

<p>注意：ip不能修改PROMISC 或者ALLMULTI选项。这两个选项已经比较陈旧， 而且也不应该随便修改。</p>

<h2>ADDRESS</h2>

<pre><code>ip address add 
</code></pre>

<p>这个得详细看看：</p>

<ul>
<li>dev NAME 被操作的设备名 *local ADDRESS(default) 接口的地址，地址格式和协议有关。IPv4 地址使用. 进行分隔，而IPv6 地址使用冒号分隔。ADDRESS 可以跟着一个斜杠和表示掩码位数的十进制数字。</li>
<li>peer ADDRESS 点对点接口对端的地址。ADDRESS 也可以跟着一个斜杠和表示掩码位数的十进制数字。</li>
<li><p>broadcast ADDRESS 接口的广播地址。为了方便，可以使用+和-(注1) 代替广播地址。例如：</p>

<p>ip addr add local 192.168.1.1/24 brd + dev eth0</p>

<p>ip addr add local 192.168.1.1/28 brd - dev eth0</p></li>
</ul>

<p>使用-，ip addr ls显示的是网络地址；使用+，ip addr ls显示的是广播地址。</p>

<ul>
<li><p>scope SCOPE&#95;VALUE(注2) 设置地址的有效范围，它用于内核为数据包设置源地址。有效的范围在/etc/iproute2/tr&#95;scopes 文件列出，系统预先设定了一些范围值： global 这个地址全局有效。site 这个地址是局部连接，也就是只有目标 地址是这个设备地址时，才有效。site (只适用于IPv6) 地址在站点内部有效。host 地址在主机内部有效。</p>

<p>ip address delete</p></li>
</ul>

<p>用法和添加地址类似。</p>

<pre><code>ip address show
</code></pre>

<h2>NEIGHBOUR ARP管理</h2>

<pre><code>ip neighbour show
</code></pre>

<h2>ROUTE,RO,R路由表管理</h2>

<p>首先，路由类型：</p>

<ul>
<li>unicast 这种类型的路由描述到目的地址的真实路径。 </li>
<li>unreachable 这些目的地址是不可达的。如果发过去的数据包都被丢弃并且收到ICMP 信息host unreachable，目的地址就会被标记为不可达。在这种情况下，本地发送者将返回EHOSTUNREAC H错误。</li>
<li>blackhole 这些目的地址不可达，而且发过去的数据包都被丢弃。在这种情况下，本地发送者将返回EINVAL 错误。 </li>
<li>local 目的地址被分配给本机。数据包通过回环被投递到本地。 </li>
<li>broadcast 目的地址是广播地址，数据包作为链路广播发送。 </li>
<li>throw 和策略规则(policy rule) 一块使用的控制路由。如果选择了这种路由，就会认为没有发现路由，在这个表中的查询就会被终止。没有找到策略路由就相当于在路由表中没有找到路由，数据包会被丢弃，并产生ICMP 信息net<br>*nat 特定的NAT 路由。目标地址属于哑地址（或者称为外部地址），在转发前需要进行地址转换。 </li>
<li>anycast 目标是anycast 地址，被分配给本机。这类地址和本地地址大同小异，不同的是这类地址不能用于任何数据包的源地址。 </li>
<li>multicast 使用多播路由。在普通的路由表中，这种路由并不存在。</li>
</ul>

<p>涉及路由的操作：</p>

<pre><code>ip route add -- 添加新路由
ip route change -- 修改路由
ip route replace -- 替换已有的路由
</code></pre>

<ul>
<li>to PREFIX 或者to TYPE：路由的目标前缀(prefix)。如果TYPE被忽略，ip命令就会使用默认的类型unicast。</li>
<li>dev NAME：输出设备的名字</li>
<li>via ADDRESS：指定下一跳路由器的地址。实际上，这个域的可靠性取决于路由类型。</li>
<li>protocol RTPROTO：本条路由得路由协议识别符。</li>
</ul>

<h2>参考文章：</h2>

<p><a href="http://yemaosheng.com/?p=409">http://yemaosheng.com/?p=409</a></p>

<p><a href="http://wenku.baidu.com/view/48053eeeaeaad1f346933fd3.html">http://wenku.baidu.com/view/48053eeeaeaad1f346933fd3.html</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2013-03-24 22:22:29</wp:post_date>
		<wp:post_date_gmt>2013-03-24 14:22:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux-ip-command</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ip"><![CDATA[ip]]></category>
		<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86"><![CDATA[运维管理]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[ip是iproute2软件包里面的一个强大的网络配置工具，它能够替代一些传统的网络管理工具。例如：ifconfig、route 等。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[Linux IP Command使用笔记]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenvSwitch完全使用手册(一)-总览Overview</title>
		<link>http://blog.wachang.net/2013/03/openvswitch-fullbook-1-overview/</link>
		<pubDate>Sun, 24 Mar 2013 16:32:28 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>OpenvSwitch完全使用手册(一)-总览Overview</p>
  
  <p>本文主要参考<a href="http://openvswitch.org/cgi-bin/gitweb.cgi?p=openvswitch;a=blob_plain;f=README;hb=HEAD">Overview of functionality and components</a>以及<a href="http://openvswitch.org/cgi-bin/gitweb.cgi?p=openvswitch;a=blob_plain;f=FAQ;hb=HEAD">Frequently Asked Questions</a>以及结合自己的理解。</p>
</blockquote>

<h2>1 什么是OpenvSwitch</h2>

<p>OpenvSwitch，简称OVS是一个虚拟交换软件，主要用于虚拟机VM环境，作为一个虚拟交换机，支持Xen/XenServer, KVM, and VirtualBox多种虚拟化技术。</p>

<p>在这种某一台机器的虚拟化的环境中，一个虚拟交换机（vswitch）主要有两个作用：传递虚拟机VM之间的流量，以及实现VM和外界网络的通信。</p>

<p>整个OVS代码用C写的。目前有以下功能：</p>

<ul>
<li>Standard 802.1Q VLAN model with trunk and access ports</li>
<li>NIC bonding with or without LACP on upstream switch</li>
<li>NetFlow, sFlow(R), and mirroring for increased visibility</li>
<li>QoS (Quality of Service) configuration, plus policing</li>
<li>GRE, GRE over IPSEC, VXLAN, and LISP tunneling</li>
<li>802.1ag connectivity fault management</li>
<li>OpenFlow 1.0 plus numerous extensions</li>
<li>Transactional configuration database with C and Python bindings</li>
<li>High-performance forwarding using a Linux kernel module</li>
</ul>

<!--more-->

<h2>2 OpenvSwitch的组成</h2>

<ul>
<li>ovs-vswitchd：守护程序，实现交换功能，和Linux内核兼容模块一起，实现基于流的交换flow-based switching。</li>
<li>ovsdb-server：轻量级的数据库服务，主要保存了整个OVS的配置信息，包括接口啊，交换内容，VLAN啊等等。ovs-vswitchd会根据数据库中的配置信息工作。</li>
<li>ovs-dpctl：一个工具，用来配置交换机内核模块，可以控制转发规则。</li>
<li>ovs-vsctl：主要是获取或者更改ovs-vswitchd的配置信息，此工具操作的时候会更新ovsdb-server中的数据库。</li>
<li>ovs-appctl：主要是向OVS守护进程发送命令的，一般用不上。</li>
<li>ovsdbmonitor：GUI工具来显示ovsdb-server中数据信息。</li>
<li>ovs-controller：一个简单的OpenFlow控制器</li>
<li>ovs-ofctl：用来控制OVS作为OpenFlow交换机工作时候的流表内容。</li>
</ul>

<h2>3 OpenvSwitch和其他vswitch</h2>

<p>这里其他的vswitch,包括VMware vNetwork distributed switch以及思科的Cisco Nexus 1000V。</p>

<p>VMware vNetwork distributed switch以及思科的Cisco Nexus 1000V这种虚拟交换机提供的是一个集中式的控制方式，。而OVS则是一个独立的vswitch，他运行在每个实现虚拟化的物理机器上，并提供远程管理。OVS提供了两种在虚拟化环境中远程管理的协议：一个是OpenFlow,通过流表来管理交换机的行为，一个是OVSDB management protocol，用来暴露sietch的port状态。</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date>2013-03-25 00:32:28</wp:post_date>
		<wp:post_date_gmt>2013-03-24 16:32:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openvswitch-fullbook-1-overview</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openflow"><![CDATA[OpenFlow]]></category>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="openvswitch"><![CDATA[openvswitch]]></category>
		<category domain="category" nicename="%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0"><![CDATA[技术学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[OpenvSwitch，简称OVS是一个虚拟交换软件，主要用于虚拟机VM环境，作为一个虚拟交换机，支持Xen/XenServer, KVM, and VirtualBox多种虚拟化技术。

在这种某一台机器的虚拟化的环境中，一个虚拟交换机（vswitch）主要有两个作用：传递虚拟机VM之间的流量，以及实现VM和外界网络的通信。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[OpenvSwitch完全使用手册(一)-总览Overview]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenvSwitch完全使用手册(二)-概念及工作流程1</title>
		<link>http://blog.wachang.net/2013/03/openvswitch-fullbook-2-workflow-1/</link>
		<pubDate>Mon, 25 Mar 2013 08:41:31 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=201</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>OpenvSwitch完全使用手册(二)-概念及工作流程1</p>
</blockquote>

<h2>1 vswitch、Bridge、Datapath</h2>

<p>在网络中，交换机和桥都是同一个概念，OVS实现了一个虚拟机的以太交换机，换句话说，OVS也就是实现了一个以太桥。那么，在OVS中，给一个交换机，或者说一个桥，用了一个专业的名词，叫做DataPath！</p>

<p>要了解，OVS如何工作，首先需要知道桥的概念。</p>

<p>网桥也叫做桥接器，连接两个局域网的设备，网桥工作在数据链路层，将两个LAN连接，根据MAC地址来转发帧，可以看成一个“低层的路由器”（路由器工作在网络层，根据IP地质进行转发）。</p>

<!--more-->

<h3>1.1 网桥的工作原理</h3>

<p>网桥处理包遵循以下几条规则：</p>

<ul>
<li>在一个接口上接收到的包不会再往那个接口上发送此包。</li>
<li>每个接收到的包都要学习其源MAC地址。</li>
<li>如果数据包是多播或者广播包（通过2层MAC地址确定）则要向接收端口以外的所有端口转发，如果上层协议感兴趣，则还会递交上层处理。</li>
<li>如果数据包的地址不能再CAM表中找到，则向接收端口以外的其他端口转发。</li>
<li>如果CAM表中能找到，则转发给相应端口，如果发送和接收都是统一端口，则不发送。</li>
</ul>

<p>注意，网桥是以<code>混杂模式工作</code>的。关于网桥更多，请查阅相关资料。</p>

<h2>2 OVS中的bridge</h2>

<p>上面，说到，一个桥就是一个交换机。在OVS中，</p>

<pre><code>ovs-vsctl add-br brname(br-int)

root@Compute2:~# ifconfig
      br-int    Link encap:Ethernet  HWaddr 1a:09:56:ea:0b:49  
      inet6 addr: fe80::1809:56ff:feea:b49/64 Scope:Link
      UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
      RX packets:1584 errors:0 dropped:0 overruns:0 frame:0
      TX packets:6 errors:0 dropped:0 overruns:0 carrier:0
      collisions:0 txqueuelen:0 
      RX bytes:316502 (316.5 KB)  TX bytes:468 (468.0 B)
</code></pre>

<p>当我们创建了一个交换机（网桥）以后，此时网络功能不受影响，但是会产生一个虚拟网卡，名字就是brname，之所以会产生一个虚拟网卡，是为了实现接下来的网桥（交换机）功能。有了这个交换机以后，我还需要为这个交换机增加端口(port)，一个端口，就是一个物理网卡，当网卡加入到这个交换机之后，其工作方式就和普通交换机的一个端口的工作方式类似了。</p>

<pre><code>ovs-vsctl add-port brname port
</code></pre>

<p><strong>这里要特别注意，网卡加入网桥以后，要按照网桥的工作标准工作，那么加入的一个端口就必须是以混杂模式工作，工作在链路层，处理2层的帧，所以这个port就不需要配置IP了。（你没见过哪个交换的端口有IP的吧）</strong></p>

<p>那么接下来你可能会问，通常的交换机不都是有一个管理接口，可以telnet到交换机上进行配置吧，那么在OVS中创建的虚拟交换机有木有这种呢，有的！上面既然创建交换机brname的时候产生了一个虚拟网口brname,那么，你给这个虚拟网卡配置了IP以后，就相当于给交换机的管理接口配置了IP，此时一个正常的虚拟交换机就搞定了。</p>

<pre><code>ip address add 192.168.1.1/24 dev brname
</code></pre>

<p>最后，我们来看看一个br的具体信息：</p>

<pre><code>root@Compute2:~# ovs-vsctl show
bc12c8d2-6900-42dd-9c1c-30e8ecb99a1b
Bridge "br0"
    Port "eth0"
        Interface "eth0"
    Port "br0"
        Interface "br0"
            type: internal
ovs_version: "1.4.0+build0"
</code></pre>

<p>首先，这里显示了一个名为br0的桥（交换机），这个交换机有两个接口,一个是eth0，一个是br0，上面说到，创建桥的时候会创建一个和桥名字一样的接口，并自动作为该桥的一个端口，那么这个虚拟接口的作用，一方面是可以作为交换机的管理端口，另一方面也是基于这个虚拟接口，实现了桥的功能。</p>

<h2>3 参考资料：</h2>

<p><a href="http://openvswitch.org/cgi-bin/gitweb.cgi?p=openvswitch;a=blob_plain;f=FAQ;hb=HEAD">http://openvswitch.org/cgi-bin/gitweb.cgi?p=openvswitch;a=blob_plain;f=FAQ;hb=HEAD</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date>2013-03-25 16:41:31</wp:post_date>
		<wp:post_date_gmt>2013-03-25 08:41:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openvswitch-fullbook-2-workflow-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openflow"><![CDATA[OpenFlow]]></category>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="openvswitch"><![CDATA[openvswitch]]></category>
		<category domain="category" nicename="%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0"><![CDATA[技术学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[openvswitch,bridge]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[在网络中，交换机和桥都是同一个概念，OVS实现了一个虚拟机的以太交换机，换句话说，OVS也就是实现了一个以太桥。那么，在OVS中，给一个交换机，或者说一个桥，用了一个专业的名词，叫做DataPath！]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[OpenvSwitch完全使用手册(二)-概念及工作流程1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenvSwitch完全使用手册(二)-概念及工作流程2</title>
		<link>http://blog.wachang.net/2013/03/openvswitch-fullbook-2-workflow-2/</link>
		<pubDate>Mon, 25 Mar 2013 10:59:02 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=205</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>OpenvSwitch完全使用手册(二)-概念及工作流程2</p>
  
  <p>这一部分我以一个简单的例子，说明在虚拟化环境中OpenvSwitch的典型工作流程。</p>
</blockquote>

<p>前面已经说到，OVS主要是用来在虚拟化环境中。虚拟机之间一个虚拟机和外网之间的通信所用，如下是一个典型的结构图：</p>

<p>那么，通常情况下的工作流程如下：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/vm-ovs-workflow.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/vm-ovs-workflow.png" alt="vm-ovs-workflow" width="752" height="416" class="aligncenter size-full wp-image-217" /></a></p>

<ul>
<li>1 VM实例instance产生一个数据包并发送至实例内的虚拟网络接口VNIC，图中就是instance中的eth0.</li>
<li>2 这个数据包会传送到物理节点上的VNIC接口，如图就是vnet接口。</li>
<li>3 数据包从vnet NIC出来，到达桥（虚拟交换机）br100上.</li>
<li>4 数据包经过交换机的处理，从物理节点上的物理接口发出，如图中物理节点上的eth0.</li>
<li>5 数据包从eth0出去的时候，是按照物理节点上的路由以及默认网关操作的，这个时候该数据包其实已经不受你的控制了。</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date>2013-03-25 18:59:02</wp:post_date>
		<wp:post_date_gmt>2013-03-25 10:59:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openvswitch-fullbook-2-workflow-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openflow"><![CDATA[OpenFlow]]></category>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="openvswitch"><![CDATA[openvswitch]]></category>
		<category domain="category" nicename="%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0"><![CDATA[技术学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[openvswitch,bridge]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[OpenvSwitch完全使用手册(二)-概念及工作流程2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[OpenvSwitch完全使用手册(二)-概念及工作流程2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/2013/03/109/</link>
		<pubDate>Wed, 06 Mar 2013 16:17:11 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=109</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Linux/Ubuntu 如何查看和杀死僵尸进程</h2>

<p>http://blog.51osos.com/linux/linux-how-to-kill-zombie-process/</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date>2013-03-07 00:17:11</wp:post_date>
		<wp:post_date_gmt>2013-03-06 16:17:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>109</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>bfa_virtual_template</wp:meta_key>
			<wp:meta_value><![CDATA[hierarchy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1364909472]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/2013/03/129/</link>
		<pubDate>Fri, 08 Mar 2013 10:39:08 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=129</guid>
		<description></description>
		<content:encoded><![CDATA[
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date>2013-03-08 18:39:08</wp:post_date>
		<wp:post_date_gmt>2013-03-08 10:39:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>129</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1364909484]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/2013/04/142/</link>
		<pubDate>Tue, 02 Apr 2013 13:32:34 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=142</guid>
		<description></description>
		<content:encoded><![CDATA[<p>http://docs.gridcentric.com/canary/usage.html https://wiki.openstack.org/wiki/PerformanceMonitoringTools http://blog.csdn.net/21aspnet/article/details/6729724</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date>2013-04-02 21:32:34</wp:post_date>
		<wp:post_date_gmt>2013-04-02 13:32:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>142</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1364909603]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>openstack插件概况</title>
		<link>http://blog.wachang.net/2013/03/openstack%e6%8f%92%e4%bb%b6%e6%a6%82%e5%86%b5/</link>
		<pubDate>Wed, 13 Mar 2013 10:08:45 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[<p>http://www.sebastien-han.fr/blog/2012/09/28/quantum-plugin-comparison/</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date>2013-03-13 18:08:45</wp:post_date>
		<wp:post_date_gmt>2013-03-13 10:08:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openstack%e6%8f%92%e4%bb%b6%e6%a6%82%e5%86%b5</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1364886204]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum OpenvSwitch Plugin和Agent的RPC机制（一）</title>
		<link>http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-rpc-1/</link>
		<pubDate>Tue, 26 Mar 2013 12:58:02 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>浅出OpenStack源码系列</p>
  
  <p>Quantum OpenvSwitch Plugin源码分析</p>
  
  <p>Plugin和Agent的RPC机制（一）</p>
  
  <p>基于2013、03月的Quantum源代码，主要是Folsom版本。</p>
</blockquote>

<p>这一节主要讲讲OVS Plugin和OVS agent之间如何进行交互，也就是RPC机制的过程。</p>

<p>首先，需要了解一点RPC的知识，主要是AMQP协议，这方面可以网上找一点文章看看。</p>

<h2>1.Plugin/Agent的RPC交互背景</h2>

<p>如果我下文中有一些术语如果不明白，那就需要先补充AMQP和RabbitMQ的知识了。</p>

<p>在Quantum Plugin的OpenvSwitch插件中，有一些操作需要Agent端通过执行<code>ovs-vsctl</code>来完成，这些操作包括：</p>

<ul>
<li>port-update：更新一个port的信息</li>
<li>network-delete:删除网络，那么就需要删除网络上所有的port信息</li>
<li>tunnel:在GRE模式中，有时候需要更新GRE port的信息</li>
</ul>

<p>而Plugin的作用就是告诉Agent应该做什么，他们是通过RPC机制来通信，简单来说，就是:`Plugin把一个具体操作发送到RabbitMQ的消息队列中，Agent从里面读取消息，并执行，当结果需要通知Plugin的时候，又向PLugin发送一个RPC消息，Plugin此时就主要是更改数据库相应的信息。</p>

<!--more-->

<p>同时，Agent还有一个作用，就是通过RPC通告plugin自己是否存活。也会把自己的设备信息发送给Plugin，或者告诉Plugin：本Agent已死，请在数据库删除我的信息吧，有事烧纸~</p>

<h2>2.Plugin/Agent的RPC交互结构</h2>

<p>以下会涉及到消息队列的知识，请一定先学习相关知识。</p>

<p>我们暂时不考虑L3-agent这种，就简单的学习OVS PLUGIN和AGENT的交互。</p>

<p>首先Plugin和Agent有两条RPC通道，注意，我说的逻辑上的哈：</p>

<p>通道1：Plugin向Agent发送port-update,network-delete,tunnel-update的消息，在消息队列上使用的Exchange分别名为：q-agent-notifier-network-delete&#95;fanout，q-agent-notifier-port-update&#95;fanout，q-agent-notifier-tunnel-update_fanout，交换类型fanout.</p>

<p>在通道1上，又来继续，因为OpenStack中有多个OVS AGENT，每个Agent会有一个ID，并且，每个AGENT在每个Exchange上都有一条消息队列。队列名字为：q-agent-notifier-tunnel-update&#95;fanout&#95;995ad5d516d1430fa7f8535337ed5b24这种，简单点说，就是一个Agent在通道1的过程中，会有3个相应的名字中包含自己ID号的队列与三个Exchange进行绑定。</p>

<p>通道2：Agent向Plugin发送通道1的结果或者自身的一个心跳信息（主要是设备打开关闭，设备info）等信息，在消息队列上Exchange名为：openstack，交换类型topic交换。</p>

<p>在OpenStack中，Quantum Server节点只有一个，加之这个交换机是topic交换，所以Plugin端与交换机openstack就只有一个队列，名字为：q-plugin</p>

<p>说白了，就是说Plugin-->Agent使用的Exchange是q-agent-notifier-&#42;**||||，Agent-->Plugin使用的Exchange是openstack。</p>

<p>下面是Quantum官方资料的一个图，我只截取相关部分，你应该能看懂了！暂时我们只学习我圈红的部分。</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/PluginAgent的交互1.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/PluginAgent的交互1-1024x707.png" alt="PluginAgent的交互1" width="640" height="441" class="aligncenter size-large wp-image-228" /></a></p>

<p>我对这个图进行了一些补充，如下是两个OVS AGENT的情况！</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/PluginAgent的交互2.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/PluginAgent的交互2.png" alt="PluginAgent的交互2" width="570" height="621" class="aligncenter size-full wp-image-229" /></a></p>

<h2>3.源码概念理解</h2>

<p>首先，再次强调，虽然OpenvSwitch Plugin单Plugin+多agent形式的，但是在实际中，Plugin会主动向Agent发送消息（更改port删除network，tunnel_update等等），Agent也会主动向Plugin发送信息（比如在新计算节点加入的时候需要报告OVS信息，以及OVS有改动后要通知Plugin更改数据库等），所以从消息队列的方向来说，Plugin和Agent既是生产者，也是消费者。在源代码中，会有这么几个概念：</p>

<ul>
<li>manager：其实就是指Plugin或者Agent的实例。</li>
<li>dispatcher:在RPC中，当接收消息以后，需要定义一个函数来处理，这成为回调callback，dispatcher就是做这么一个调度工作,一个到达的消息可以被调度（dispatch）到一个函数或者一个类中。</li>
<li>create_consumer：用于向AMQP服务器指明接收哪个队列的消息，这个函数需要dispatcher作为参数（很明显，接收到消息以后就交给调度器处理嘛）</li>
<li>在Plugin的代码中：<code>Class AgentNotifierApi</code>这个类用于向Agent发送RPC消息</li>
<li>在Plugin的代码中:<code>Class OVSRpcCallbacks</code>作为Plugin接收RPC消息的目标，见上面dispatcher的描述。</li>
<li>在Agent代码中：<code>Class OVSPluginApi</code>这个类用于向Plugin发送RPC消息</li>
</ul>

<p>下面再给出源代码中各个组件的一个流程图,对于Plugin和Agent端都是通用的，下一节中会从源码上分析本节内容！</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/RPC源码流程.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/RPC源码流程.jpg" alt="RPC源码流程" width="855" height="400" class="aligncenter size-full wp-image-235" /></a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2013-03-26 20:58:02</wp:post_date>
		<wp:post_date_gmt>2013-03-26 12:58:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quantum-ovs-plugin-agent-rpc-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="openvswitch"><![CDATA[openvswitch]]></category>
		<category domain="post_tag" nicename="quantum"><![CDATA[quantum]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_disable</wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum OpenvSwitch Plugin代码架构</title>
		<link>http://blog.wachang.net/2013/03/quantum-ovs-plugin-code-structure/</link>
		<pubDate>Tue, 26 Mar 2013 16:43:59 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=238</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>浅出OpenStack源码系列</p>
  
  <p>Quantum OpenvSwitch Plugin代码架构</p>
</blockquote>

<p>此文主要罗列一下OpenvSwitch Plugin的代码架构，做一点解释，为后续文章做准备。</p>

<h2>1.代码目录结构：</h2>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/quantum-ovs-plugin代码目录.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/quantum-ovs-plugin代码目录.jpg" alt="quantum ovs plugin代码目录" width="315" height="405" class="aligncenter size-full wp-image-239" /></a></p>

<p><code>ovs_quantum_plugin.py</code>:是plugin部分的主文件，在配置文件中指定选用此文件中类<code>OVSQuantumPluginV2</code>，quantum在启动的时候就会实例化此类，从而plugin可以正常工作。</p>

<p><code>ovs_models_v2.py</code>:是数据库models文件，主要是sqlachemy使用，用于把数据库的一个Table和一个类进行关联。</p>

<p><code>ovs_db_v2.py</code>:openvswitch plugin的数据库支持，通过使用sqlalchemy实现数据库的查找写入等操作。</p>

<p><code>ovs_quantum_agent.py</code>：agent程序文件，在agent端执行</p>

<p><code>common</code>:则包含了解析OVS配置相关的支持。</p>

<!--more-->

<h2>2.OpenvSwitch Plugin类关系</h2>

<p>插件主要是ovs&#95;quantum&#95;plugin.py文件，首先查看一下该文件中import的内容：</p>

<pre><code>from quantum.db import quota_db
from quantum.db import securitygroups_rpc_base as sg_db_rpc
from quantum.extensions import portbindings
from quantum.extensions import providernet as provider
from quantum.extensions import securitygroup as ext_sg
from quantum.openstack.common import importutils
from quantum.openstack.common import log as logging
from quantum.openstack.common import rpc
from quantum.openstack.common.rpc import proxy
from quantum.plugins.openvswitch.common import config
from quantum.plugins.openvswitch.common import constants
from quantum.plugins.openvswitch import ovs_db_v2
from quantum import policy
</code></pre>

<p>其中plugin部分的类关系如下图所示：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/ovs_plugin_uml.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/ovs_plugin_uml-1024x581.jpg" alt="ovs_plugin_uml" width="640" height="363" class="aligncenter size-large wp-image-240" /></a></p>

<p>其中，<strong>剪头表示类之间的继承关系，而带点的线表示该类的一个实例是作为另外一个类中的一个属性</strong></p>

<h2>3.penvSwitch Agent类关系</h2>

<p>还是先看import的内容：</p>

<pre><code>import sys
import time

import eventlet
from oslo.config import cfg

from quantum.agent.linux import ip_lib
from quantum.agent.linux import ovs_lib
from quantum.agent.linux import utils
from quantum.agent import rpc as agent_rpc
from quantum.agent import securitygroups_rpc as sg_rpc
from quantum.common import config as logging_config
from quantum.common import constants as q_const
from quantum.common import topics
from quantum.common import utils as q_utils
from quantum import context
from quantum.extensions import securitygroup as ext_sg
from quantum.openstack.common import log as logging
from quantum.openstack.common import loopingcall
from quantum.openstack.common.rpc import dispatcher
from quantum.plugins.openvswitch.common import config
from quantum.plugins.openvswitch.common import constants
</code></pre>

<p>相应的UML图：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/ovs_agent_uml.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/ovs_agent_uml.jpg" alt="ovs_agent_uml" width="897" height="917" class="aligncenter size-full wp-image-241" /></a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date>2013-03-27 00:43:59</wp:post_date>
		<wp:post_date_gmt>2013-03-26 16:43:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quantum-ovs-plugin-code-structure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="openvswitch"><![CDATA[openvswitch]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[quantum-openvswitch-plugin%e4%bb%a3%e7%a0%81%e6%9e%b6%e6%9e%84]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_disable</wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WordPress插件推荐</title>
		<link>http://blog.wachang.net/2013/03/wordpress-plugins/</link>
		<pubDate>Thu, 28 Mar 2013 11:11:22 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=252</guid>
		<description></description>
		<content:encoded><![CDATA[<p>用了WordPress一段时间了，还是比较舒爽的，这里推荐一下几个我使用起来很好的插件，顺带也是我自己的一个记录。</p>

<h2>1 WP-Markdown</h2>

<p>经典的Markdown插件，使用以后，文章可以使用MarkDown语法，并且撰写的时候还会有相应的实时预览，插件安装以后到<code>设置</code>&#45;--|》<code>撰写</code>里面可以进行设置。</p>

<h2>2 wp-markdown-syntax-sugar</h2>

<p>WP-Markdown的增强工具，主要提供的是代码方面的简洁，使用的话很类似Github Favoured Markdown。详细的使用可以看插件说明。</p>

<h2>3 StatPressCN</h2>

<p>访问统计，我自己懒得用google分析或者百度统计这种，所以这个插件倒也比较好，插件支持小工具，可以把统计信息显示在Blog的侧栏sidebar上面。</p>

<!--more-->

<h2>4 Add Post URL</h2>

<p>自动在每篇文章中加入文章链接，简单的来讲，就是在文末加上“原创所有，转载请注明出处：xxxxxxxx”这种很多博客都会使用的玩意。安装后在<code>设置</code>--》<code>添加文章内链接</code>出设置。</p>

<h2>5 All in One SEO Pack</h2>

<p>基本都会推荐的SEO插件，有助于更好的被搜索引擎抓取，安装后基本不需要设置，只是说写文章的最后会有一个SEO选项，需要填上相应的信息。最直观的效果就是搜索引擎抓取到你的网页显示的就像是：</p>

<pre><code>Linux IP Command使用笔记| Wang Chang's Blog
blog.wachang.net/2013/03/linux-ip-command/ - 网页快照
4 days ago – ip是iproute2软件包里面的一个强大的网络配置工具，它能够替代一些传统的网络管理工具。例如：ifconfig、route 等。
</code></pre>

<p>再简单的说下，在撰写文章的SEO插件部分，<code>Title</code>就是显示的文章名称，<code>Description</code>就是上面本文的一个简单描述。</p>

<h2>6 Better WordPress Minify</h2>

<p>这个插件我强烈推荐，比如你使用百度的优化建议功能，告诉你需要合并CSS，或者JS的时候，怎么办，用这个插件就OK了。这个插件能自动把多个CSS或者JS文件合并为一个文件，这样在访问网站的时候就不需要多次请求CSS，JS文件了，一次请求就搞定，能帮提高网站的速度。安装完以后会在<code>设置</code>--》<code>BWP Minify</code>中设置。</p>

<h2>7 Content Index</h2>

<p>自动生成文章内容索引，在文章撰写的时候可以选择打开此功能否。</p>

<p>另外，相同功能的可选插件：Table of Contents Plus</p>

<h2>8 Download Manager</h2>

<p>这个也是有用的，因为WP不支持在文章中添加附件，所以要么你上传了文件以后，在文章中给出地址，大家可以下载，如果要炫一点的话，就用这个插件，它的流程大概是：在Download Manager中上传一个文件，然后会生成一个插入代码，直接黏贴在文章中就OK了，在文章中显示的是一个下载图标，相对来说，友好度就比直接整链接上去好多了。</p>

<h2>9 Google XML Sitemaps</h2>

<p>为站点圣城Sitemap的东西，装一个，几乎不用设置</p>

<h2>10 Lightbox Plus ColorBox</h2>

<p>这个也是强烈推荐，在WP的文章中如果有图片，点击的话直接跳转到新图片窗口，十分不方面用户阅读。使用这个以后用户点击图片就会再文章中填出一个窗口显示图片放大的样子，效果很炫，推荐！</p>

<h2>11 WP Super Cache</h2>

<p>如果是买的WP空间或者主机，由于WP是php脚本写的，一般执行php的时候会占用服务器CPU资源，这是主机上不希望看到的，所以用这个插件以后，会先生成缓存，用户访问的话会先访问缓存，一是加快了网站访问速度，而是减小了主机上的负担（有些主机上你CPU高了的话就会给你停掉），因为有中文的界面，设置起来很简单，当然，有时候配合服务器开启GZIP等压缩就更好了，相关的技巧我以后会将。</p>

<h2>12 WP GitHub Tools</h2>

<p>可以再sidebar增加一个GITHUB栏显示你的GITHUB情况，支持GIST，对于程序员还是不错的！</p>

<h2>13 oEmbed Gist</h2>

<p>上面插件的简化版，支持文章中插入GIST代码。</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date>2013-03-28 19:11:22</wp:post_date>
		<wp:post_date_gmt>2013-03-28 11:11:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wordpress-plugins</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86"><![CDATA[运维管理]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[wordpress,plugin]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[用了WordPress一段时间了，还是比较舒爽的，这里推荐一下几个我使用起来很好的插件，顺带也是我自己的一个记录。1 WP-Markdown 经典的Markdown插件，使用以后，文章可以使用MarkDown语法，并且撰写的时候还会有相应的实时预览，插件安装以后到`设置`---》`撰写`里面可以进行设置。
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[WordPress插件推荐]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>优雅的文档生成-Sphinx</title>
		<link>http://blog.wachang.net/2013/03/introduce-to-sphinx/</link>
		<pubDate>Fri, 29 Mar 2013 18:48:35 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=255</guid>
		<description></description>
		<content:encoded><![CDATA[<p>最近看python一些模块文档的时候发现有doc目录，研究了一下发现两个关键字：一是Sphinx,二是pygments，为了能有更好的文档，于是研究下这两个东西,先说第一个sphinx。</p>

<h2>1 什么是Sphinx</h2>

<p>Sphinx是一个工具，她能够轻易地创建智慧和优雅的文档，她是出自Georg Brandl之手，在BSD许可证下授权。</p>

<p>她最初是为了新版的python文档， 因此在python项目的文档具有完美的特性，但是同样支持c/c++，目前正在计划增加对其他的语言的支持。 Sphinx具有如下的特点：</p>

<ul>
<li>输出格式： 超文本标记语言 (包括Windows HTML帮助)，LaTeX (可打印的PDF版本)，手册页，纯文本</li>
<li>丰富的交叉引用： 语义标记以及针对函数，类，引用，词汇表（术语）和相似的信息块的自动链接 *　层次结构： 简单的文本树定义，就能自动地链接到同层（兄弟姐妹）、上一层（父母）以及下一层（子女）的文本位置 *　自动生成目录： 通用索引以及语言模块的目录</li>
<li>代码高亮： 代码自动高亮，通过使用 Pygments</li>
<li>扩展功能： 自动测试的代码片段，包括从Python模块（API文档）的文档字符串</li>
</ul>

<p>Sphinx 使用reStructuredText作为她的标记语言，她的优点大部分是来自于reStructuredText 以及reStructuredText的解析和转换工具（套件）Docutils的强大以及简单明了。</p>

<p>说白了,他就是把reStructuredText文本文档翻译成一些文件格式,类似PDF啊之类的工具,正如我的博客上用的wp-markdown插件能把markdown标记语言写的文章转换成合适的html文档一样。</p>

<p>换一种方式，和编译C程序一样，sphinx可以看成是gcc等编译器，负责把源码（reStructuredText）格式的文档编译成相应的PDF或者html的文件。</p>

<!--more-->

<h2>2 安装</h2>

<p>Sphinx的主页是<a href="http://sphinx-doc.org/index.html">http://sphinx-doc.org/index.html</a></p>

<p>中文站点<a href="http://www.pythondoc.com/sphinx/index.html">http://www.pythondoc.com/sphinx/index.html</a></p>

<p>在Ubuntu下可以直接apt安装：</p>

<pre><code>apt-get install python-sphinx
</code></pre>

<p>也可以使用：</p>

<pre><code>easy_install -U Sphinx
</code></pre>

<p>或者在<a href="https://pypi.python.org/pypi/Sphinx">https://pypi.python.org/pypi/Sphinx</a>下载安装。</p>

<p>每个文档工程的源码里面有一个conf.py文件，主要是关于文档如何生成等参数配置。可以自己学习。下面我们做一个简单的例子。</p>

<h2>3 如何使用</h2>

<p>首先我们下载一个olso的python库，这个主要是配置文件解析的，OpenStack中用，不用懂其详细语法，下载完以后解压，可以看到doc目录：</p>

<pre><code>root@Compute2:~/oslo.config-1.1.0/doc# tree
.
└── source
    ├── conf.py
    ├── index.rst
    ├── static
    │   ├── basic.css
    │   ├── default.css
    │   ├── header_bg.jpg
    │   ├── header-line.gif
    │   ├── jquery.tweet.js
    │   ├── nature.css
    │   ├── openstack_logo.png
    │   └── tweaks.css
    ├── _templates
    └── _theme
        ├── layout.html
        └── theme.conf
4 directories, 12 files
</code></pre>

<p>下面我们开始编译：</p>

<pre><code>root@Compute2:~/oslo.config-1.1.0/doc/source# sphinx-build -b html ./ ./out
Making output directory...
Running Sphinx v1.1.3
fatal: Not a git repository (or any of the parent directories): .git
loading pickled environment... not yet created
loading intersphinx inventory from http://docs.python.org/objects.inv...
building [html]: targets for 1 source files that are out of date
updating environment: 1 added, 0 changed, 0 removed
reading sources... [100%] index                                                                                                                                                                                   
/root/oslo.config-1.1.0/doc/source/index.rst:10: WARNING: toctree contains reference to nonexisting document u'api/autoindex'
looking for now-outdated files... none found
pickling environment... done
checking consistency... done
preparing documents... done
writing output... [100%] index                                                                                                                                                                                    
writing additional files... genindex search
copying static files... done
dumping search index... done
dumping object inventory... done
build succeeded, 1 warning.
</code></pre>

<p>最后我们打开out文件夹中的index.html，就如下所示了：是不是有点炫啊~~</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/03/sphinx-example.jpg"><img src="http://blog.wachang.net/wp-content/uploads/2013/03/sphinx-example.jpg" alt="sphinx-example" width="649" height="416" class="aligncenter size-full wp-image-256" /></a></p>

<p>当然了，因为这个doc中暂时还没内容，所以这个网页目前是空的。</p>

<h2>4 参考资料</h2>

<p><a href="http://pygments.org/">http://pygments.org/</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date>2013-03-30 02:48:35</wp:post_date>
		<wp:post_date_gmt>2013-03-29 18:48:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introduce-to-sphinx</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="sphinx"><![CDATA[sphinx]]></category>
		<category domain="category" nicename="%e6%8a%80%e6%9c%af%e5%ad%a6%e4%b9%a0"><![CDATA[技术学习]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[sphinx,python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[最近看python一些模块文档的时候发现有doc目录，研究了一下发现两个关键字：一是Sphinx,二是pygments，为了能有更好的文档，于是研究下这两个东西,先说第一个sphinx。说白了,他就是把reStructuredText文本文档翻译成一些文件格式,类似PDF啊之类的工具,正如我的博客上用的wp-markdown插件能把markdown标记语言写的文章转换成合适的html文档一样。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[优雅的文档生成-Sphinx]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum OpenvSwitch Plugin&amp;Agent读取配置文件</title>
		<link>http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-config-file/</link>
		<pubDate>Sat, 30 Mar 2013 14:29:25 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=262</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>浅出OpenStack源码</p>
  
  <p>Quantum OpenvSwitch Plugin&amp;Agent读取配置文件</p>
</blockquote>

<p>本节主要说一下Quantum OpenvSwitch Plugin和Agent是如何处理配置文件的。如果以后你需要自己做基于Quantum的Plugin开发，那么本文就告诉你如何在配置文件中加入你自己的一些变量信息，然后可以正确的让OpenStack的相应组件进行解释并放在程序的变量中。</p>

<p>开始之前，需要阅读一个OpenStack的配置文件处理部分的一些知识，请参考本系列OpenStack基础部分。我就直接以Agent为例进行分析了，这样简单一点，在Plugin端的流程也是一样的。</p>

<!--more-->

<h2>1 OpenvSwitch Agent的配置文件：</h2>

<p>Quantum OpenvSwitch Agent一共需要解析quantum.conf文件以及ovs&#95;quantum&#95;plugin.ini文件，下面是配置文件的一个例子：</p>

<pre><code>#Under the database section
[DATABASE]
sql_connection = mysql://quantumUser:quantumPass@100.10.10.51/quantum

#Under the OVS section
[OVS]
tenant_network_type = gre
tunnel_id_ranges = 1:1000
integration_bridge = br-int
tunnel_bridge = br-tun
local_ip = 100.10.10.53
enable_tunneling = True
</code></pre>

<p>下面是quantum.conf的部分（agent其实只读这一段）</p>

<pre><code>rabbit_host = 100.10.10.51
</code></pre>

<h2>2 如何解析配置文件</h2>

<h3>2.1</h3>

<p>首先，给个总览，同时也是一个回顾，要使得OpenStack里面组件，不管是plugin，还是agent或者其他需要解析配置文件参数的程序能获得相应的配置，需要以下几个步骤：</p>

<ul>
<li>1、创建一个一个配置管理器(通过import oslo.config完成)，一般名字都为CONF</li>
<li>2、给这个配置管理器注册选项信息，通过CONF的register_opts方法。</li>
<li>3、读取配置，通过CONF.xxxxx(你注册的配置信息的名字)访问值</li>
</ul>

<p>为什么要向配置管理器注册配置信息？因为配置管理器在读取配置文件的时候只会读注册配置信息的选项，比如我注册了一个选项名为name,加入到CONF中以后，在配置文件中配置管理器才会读取，而没注册的比如company就不会被读取到。当然，你注册的选项的名字和你在配置文件中这个新选项的名字是一样的，比如我注册了一个选项是name，那么配置文件中就应该是name=xxxxx这种。</p>

<h3>2.2</h3>

<p>以下就是Agent中的操作过程，可以结合理解。</p>

<p>Agent源代码首先：</p>

<pre><code>from oslo.config import cfg
</code></pre>

<p>import基本的oslo.config模块后，就会产生生成一个CONF实例，这就是一个配置管理器，因为在oslo.config的最后有一行：</p>

<pre><code>CONF = ConfigOpt()
</code></pre>

<p>这是一个实例化操作，一个配置管理器的作用：</p>

<ul>
<li>注册配置参数（通过自己的API，就是实例的方法啦）</li>
<li>读取配置文件</li>
</ul>

<p>接下来</p>

<pre><code>from quantum.plugins.openvswitch.common import config
</code></pre>

<p>在这个文件中，你可以看到：</p>

<pre><code>ovs_opts = [
cfg.StrOpt('integration_bridge', default='br-int',
           help=_("Integration bridge to use")),
cfg.BoolOpt('enable_tunneling', default=False,
            help=_("Enable tunneling support")),]
</code></pre>

<p>这是定义配置文件中有哪些选项，之后还有：</p>

<pre><code>cfg.CONF.register_opts(ovs_opts, "OVS")
</code></pre>

<p>这就是对ovs&#95;quantum&#95;plugin.ini文件中的选项进行注册，其中，后面这个OVS表示选项所在的组是OVS，那么在配置文件中的表现就是，ovs_opts中所定义的选项都是位于OVS这个Section下的。参考上面的配置文件。</p>

<p>当然，在这个config文件中，还import了几个模块，如下解释：</p>

<pre><code>from quantum.plugins.openvswitch.common import config 作用如上解释
     |（在上面的config文件中存在的import）
     |from quantum.agent.common import config 主要定义了root_help以及agent有关的状态state
         |（在上面的config文件中存在的import）
         |form oslo.config import cfg
         |from quantum.common import config 注册quantum核心选项，也就是quantum.conf中使用的选项
</code></pre>

<h2>3 解析</h2>

<p>在2中可以看到，实际上整个配置管理器注册了大大类的选项，一个quantum.conf中用的叫做core&#95;opts，一种是ovs&#95;quantum&#95;plugin.ini中使用的ovs&#95;opts和agent_opts。接下来就是如何触发读取操作了，在Agent的main()函数中，有一个：</p>

<pre><code>cfg.CONF(project='quantum')
</code></pre>

<p>这个不是实例化类哈，这是一个类的call方法的使用，这样以后cfg.CONF这个配置管理器就读取完配置文件了，之后你就可以获得配置文件中的值了，如下：</p>

<pre><code>integ_br=config.OVS.integration_bridge
tun_br=config.OVS.tunnel_bridge
local_ip=config.OVS.local_ip
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date>2013-03-30 22:29:25</wp:post_date>
		<wp:post_date_gmt>2013-03-30 14:29:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quantum-ovs-plugin-agent-config-file</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="openvswitch"><![CDATA[openvswitch]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[quantum-ovs-agent-config-file]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[openstack,openvswitch,quantum-openvswitch-agent]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[本节主要说一下Quantum OpenvSwitch Plugin和Agent是如何处理配置文件的。如果以后你需要自己做基于Quantum的Plugin开发，那么本文就告诉你如何在配置文件中加入你自己的一些变量信息，然后可以正确的让OpenStack的相应组件进行解释并放在程序的变量中。
开始之前，需要阅读一个Ope]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[Quantum OpenvSwitch Plugin&Agent读取配置文件]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[Quantum 基础知识及服务启动 | Wang Chang&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.wachang.net/2013/04/quantum-code-base/</wp:comment_author_url>
			<wp:comment_author_IP>222.197.180.135</wp:comment_author_IP>
			<wp:comment_date>2013-04-01 16:42:51</wp:comment_date>
			<wp:comment_date_gmt>2013-04-01 08:42:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 关于这一部分，如果不是很懂的话，请先阅读本系列文章基础部分，关于配置文件cfg的部分，请阅读Quantum OpenvSwitch Plugin&amp;Agent读取配置文件,原理都是一样的。 [...]
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Python.Paste指南之Deploy(1)-概念</title>
		<link>http://blog.wachang.net/2013/04/python-paste-deploy-1/</link>
		<pubDate>Mon, 01 Apr 2013 05:38:51 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=270</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>浅出OpenStack源码系列</p>
  
  <p>Python模块基础篇：Python.Paste指南之Deploy(1)-概念</p>
</blockquote>

<p>Paste.Deploy主要是用来载入WSGI中的Web App使用，所谓WSGI的app，就是用来处理客户端发送过来的请求的，Python.Paste的核心函数是loadapp(),下文中PD就指代Paste.Deploy。</p>

<h2>1 简介及安装</h2>

<p>Paste Deployment是一种机制，通过loadapp函数和一个配置文件或者egg包来载入WSGI应用。安装很简单，如下两种方式：</p>

<pre><code>$ sudo pip install PasteDeploy
</code></pre>

<p>或者可以从github上进行源码安装</p>

<pre><code>$ hg clone http://bitbucket.org/ianb/pastedeploy
$ cd pastedeploy
$ sudo python setup.py develop
</code></pre>

<!--more-->

<h2>2 配置文件Config Flie</h2>

<p>一个配置文件后缀为ini，内容被分为很多段（section），PD只关心带有前缀的段，比如<code>[app:main]</code>或者<code>[filter:errors]</code>，总的来说，一个section的标识就是<code>[type:name]</code>,不是这种类型的section将会被忽略。</p>

<p>一个section的内容是以<code>键=值</code>来标示的。#是一个注释。在段的定义中，有以下几类：</p>

<ul>
<li><p>[app:main]:定义WSGI应用，main表示只有一个应用，有多个应用的话main改为应用名字</p></li>
<li><p>[server:main]:定义WSGI的一个server。</p></li>
<li><p>[composite:xxx]：表示需要将一个请求调度定向（dispatched）到多个,或者多种应用上。以下是一个简单的例子，例子中，使用了composite，通过urlmap来实现载入多应用。</p></li>
<li><p>[fliter:]：定义“过滤器”，将应用进行进一步的封装。</p></li>
<li><p>[DEFAULT]：定义一些默认变量的值。</p></li>
</ul>

<p>以下是一个例子：</p>

<pre><code>[composite:main]
use = egg:Paste#urlmap
/ = home
/blog = blog
/wiki = wiki
/cms = config:cms.ini

[app:home]
use = egg:Paste#static
document_root = %(here)s/htdocs

[filter-app:blog]
use = egg:Authentication#auth
next = blogapp
roles = admin
htpasswd = /home/me/users.htpasswd

[app:blogapp]
use = egg:BlogApp
database = sqlite:/home/me/blog.db

[app:wiki]
use = call:mywiki.main:application
database = sqlite:/home/me/wiki.db
</code></pre>

<p>下面会进行分段的讲解</p>

<h3>2.1 composite</h3>

<pre><code>[composite:main]
use = egg:Paste#urlmap
/ = home
/blog = blog
/wiki = wiki
/cms = config:cms.ini
</code></pre>

<p>这是一个composite段，表示这将会根据一些条件将web请求调度到不同的应用。<code>use = egg:Paste#urlmap</code>表示我们奖使用<code>Paste</code>egg包中<code>urlmap</code>来实现composite，这一个段(urlmap)可以算是一个通用的composite程序了。根据web请求的path的前缀进行一个到应用的映射(map)。这些被映射的程序就包括blog,home,wiki,config:cms.ini（映射到了另外一个配置文件，PD再根据这个文件进行载入）</p>

<h3>2.2 App type1</h3>

<pre><code>[app:home]
use = egg:Paste#static
document_root = %(here)s/htdocs
</code></pre>

<p>app是一个callable object，接受的参数(environ,start&#95;response)，这是paste系统交给application的，符合WSGI规范的参数. app需要完成的任务是响应envrion中的请求，准备好响应头和消息体，然后交给start&#95;response处理，并返回响应消息体。<code>egg:Paste#static</code>也是Paste包中的一个简单程序，它只处理静态文件。它需要一个配置文件document_root,后面的值可以是一个变量,形式为%（var）s相应的值应该在[DEFAULT]字段指明以便Paste读取。比如：</p>

<pre><code>[app:test]
use = egg:Paste#static
document_root = %(path)s/htdocs
[DEFAULT]
path = /etc/test
</code></pre>

<h3>2.3 fliter</h3>

<p>filter是一个callable object，其唯一参数是(app)，这是WSGI的application对象，filter需要完成的工作是将application包装成另一个application（“过滤”），并返回这个包装后的application。</p>

<pre><code>[filter-app:blog]
use = egg:Authentication#auth
next = blogapp
roles = admin
htpasswd = /home/me/users.htpasswd

[app:blogapp]
use = egg:BlogApp
database = sqlite:/home/me/blog.db
</code></pre>

<p><code>[filter-app:blog]</code>fliter-app字段表明你希望对某个应用进行包装，需要包装的应用通过next指明（表明在下一个段中），这个字段的意思就是，在正式调用blogapp之前，我会调用egg:Authentication#auth进行一个用户的验证，随后才会调用blogapp进行处理。后面的[app:blogapp]则是定义了blogapp，并指明了需要的database参数。</p>

<h3>2.4 App type2</h3>

<pre><code>[app:wiki]
use = call:mywiki.main:application
database = sqlite:/home/me/wiki.db
</code></pre>

<p>这个段和之前的app段定义类似，不同的是对于wiki这个应用，我们没有使用egg包，而是直接对mywiki.main这个模块中的application对象使用了call方法。python，中一切皆对象，作为WSGI app的可以是一个函数，一个类，或者一个实例，使用call的话，相应的函数，类，实例中必须实现<strong>call</strong>()方法。此类app的格式用冒号分割: <code>call(表示使用call方法):模块的完成路径名字:应用变量的完整名字</code></p>

<h2>3 基本使用</h2>

<p>PD的主要使用就是通过读取配置文件载入WSGI应用。如下：</p>

<pre><code>from paste.deploy import loadapp
wsgi_app = loadapp('config:/path/to/config.ini')
</code></pre>

<p>注意，这里需要指明绝对路径。</p>

<h2>4 更多关于配置文件</h2>

<h3>4.1 App</h3>

<p>单个配置文件中可以定义多个应用个，每个应用有自己独立的段。应用的定义以[app:name]的格式，[app:main]表示只有一个应用。应用的定义支持以下五种格式：</p>

<pre><code>[app:myapp]
use = config:another_config_file.ini#app_name
#使用另外一个配置文件

[app:myotherapp]
use = egg:MyApp
#使用egg包中的内容

[app:mythirdapp]
use = call:my.project:myapplication
#使用模块中的callable对象

[app:mylastapp]
use = myotherapp
#使用另外一个section

[app:myfacapp]
paste.app_factory = myapp.modulename:app_factory
#使用工厂函数
</code></pre>

<p>其中，最后一种方式，将一个app指向了某些python代码。此模式下，必须执行app协议，以app&#95;factory表示，后面的值需要import的东西，在这个例子中myapp.modulename被载入，并从其中取得了app&#95;factory的实例。</p>

<p>app_factory是一个callable object，其接受的参数是一些关于application的配置信息：<code>(global_conf,**kwargs)</code>，<code>global_conf</code>是在ini文件中default section中定义的一系列key-value对，而<code>**kwargs</code>，即一些本地配置，是在ini文件中，app:xxx section中定义的一系列key-value对。app_factory返回值是一个application对象</p>

<p>在app的配置中，use参数以后配置就算结束了。其余的键值参数将会作为参数，传递到factory中，如下：</p>

<pre><code>[app:blog]
use = egg:MyBlog
database = mysql://localhost/blogdb #这是参数
blogname = This Is My Blog! #这是参数
</code></pre>

<h3>4.2 全局配置</h3>

<p>全局配置主要是用于多个应用共用一些变量，这些变量我们规定放在段[DEFAULT]中，如果需要覆盖，可以在自己的app中重新定义，如下：</p>

<pre><code>[DEFAULT]
admin_email = webmaster@example.com
[app:main]
use = ...
set admin_email = bob@example.com
</code></pre>

<h3>4.3 composite app</h3>

<p>composite是一个运行着像是app，但是实际上是由多个应用组成的。urlmap就是composite app的一个例子，url不同的path对应了不同的应用。如下：</p>

<pre><code>[composite:main]
use = egg:Paste#urlmap
/ = mainapp
/files = staticapp

[app:mainapp]
use = egg:MyApp

[app:staticapp]
use = egg:Paste#static
document_root = /path/to/docroot
</code></pre>

<p>在loadapp函数的执行中，composite app被实例化，它同时还会访问配置文件中定义的其他应用。</p>

<h3>4.4 app定义高级用法</h3>

<p>在app段中，你可以定义fliters和servers，通过<code>fliter:</code>和<code>server:</code> PD通过loadserver和loadfilter函数进行调用，工作机制都一样，返回不同的对象。</p>

<h4>4.4.1 filter composition</h4>

<p>应用filter的方式很多，重要的是看你filter的数量和组织形式。下面会一一介绍应用fliter的几种方式：</p>

<p>1.使用<code>filter-with</code></p>

<pre><code>[app:main]
use = egg:MyEgg
filter-with = printdebug

[filter:printdebug]
use = egg:Paste#printdebug
# and you could have another filter-with here, and so on...
</code></pre>

<p>2.使用<code>fliter-app</code></p>

<pre><code>[fliter-app:printdebug]
use = egg:Paste
next = main

[app:main]
use = egg:MyEgg
</code></pre>

<p>3.使用pipeline</p>

<p>当使用多个filter的时候需要使用pipeline的方式，它需要提供一个key参数pipeline,后面的值是一个列表，最后以应用结尾。如下：</p>

<pre><code>[pipeline:main]
pipeline = filter1 egg:FilterEgg#filter2 filter3 app

[filter:filter1]
...
</code></pre>

<p>假设在ini文件中, 某条pipeline的顺序是filter1, filter2, filter3，app, 那么，最终运行的app&#95;real是这样组织的： app&#95;real = filter1(filter2(filter3(app)))</p>

<p>在app真正被调用的过程中，filter1.&#95;&#95;call&#95;&#95;(environ,start&#95;response)被首先调用，若某种检查未通过，filter1做出反应；否则交给filter2.&#92;_&#95;call&#92;_&#95;(environ,start&#95;response)进一步处理，若某种检查未通过，filter2做出反应，中断链条，否则交给filter3.&#95;&#95;call&#92;_&#95;(environ,start&#95;response)处理，若filter3的某种检查都通过了，最后交给app.&#92;&#95;&#95;call_&#95;(environ,start&#95;response)进行处理。</p>

<h3>4.5 读取配置文件</h3>

<p>如果希望在不创建应用的情况下得到配置文件，可以使用appconfig(uri)函数，将会以字典形式返回使用的配置。这个字典包括了全局很本地的配置信息，所以可以通过属性方法获得相应的attributes （.local&#95;conf and .global&#95;conf）</p>

<h2>5 其他</h2>

<h3>5.1 如何引用Egg包</h3>

<p>egg是python的一个包，pip easy_install等都是安装egg包的方式。关注egg包要注意：</p>

<ul>
<li><p>某一egg包是有标准说明的</p>

<p>python setup.py name</p></li>
<li><p>有entry point，不用太在意，这个只是说明调用程序的参数。</p></li>
</ul>

<h3>5.2 定义factory函数</h3>

<p>工厂函数的定义还是遵循之前提到的应用的协议。目前，用于工厂函数的协议有以下：</p>

<p>*paste.app_factory</p>

<p>*paste.composite_factory</p>

<p>*paste.filter_factory</p>

<p>*paste.server_factory</p>

<p>所有的这些都希望有一个含有&#95;&#95;call&#95;&#95;方法的（函数，方法，类）。</p>

<p>1.<code>paste.app_factory</code></p>

<pre><code>def app_factory(global_config, **local_conf):
    return wsgi_app
</code></pre>

<p>global&#95;config是一个字典，而local&#95;conf则是关键字参数。返回一个wsgi_app（含有<strong>call</strong>方法。）</p>

<p>2.paste.composite_factory`</p>

<pre><code>def composite_factory(loader, global_config, **local_conf):
   return wsgi_app
</code></pre>

<p>loader是一个对象，有几个有趣的方法,get&#95;app(name&#95;or&#95;uri, global&#95;conf=None)根据name返回一个wsgi应用，get&#95;filter（）和get&#95;server（）也是一样。看一个更加复杂的例子，举例一个pipeline应用：</p>

<pre><code>def pipeline_factory(loader, global_config, pipeline):
    # space-separated list of filter and app names:
    pipeline = pipeline.split()
    filters = [loader.get_filter(n) for n in pipeline[:-1]]
    app = loader.get_app(pipeline[-1])
    filters.reverse() # apply in reverse order!
    for filter in filters:
      app = filter(app)
    return app
</code></pre>

<p>相应的配置文件如下：</p>

<pre><code>[composite:main]
use = 
pipeline = egg:Paste#printdebug session myapp

[filter:session]
use = egg:Paste#session
store = memory

[app:myapp]
use = egg:MyApp
</code></pre>

<p>3.<code>paste.filter_factory</code></p>

<p>fliter的工厂函数和app的共产函数类似，除了它返回的是一个filter,fliter是一个仅仅把一个wsgi应用作为唯一参数的callable对象，返回一个被filter了的应用。 以下是一个例子，这个filter会检查CGI中REMOTE_USER变量是否存在，并创建一个简单的认证过滤器。</p>

<pre><code>def auth_filter_factory(global_conf, req_usernames):
    # space-separated list of usernames:
    req_usernames = req_usernames.split()
    def filter(app):
        return AuthFilter(app, req_usernames)
    return filter

class AuthFilter(object):
    def __init__(self, app, req_usernames):
        self.app = app
        self.req_usernames = req_usernames

    def __call__(self, environ, start_response):
        if environ.get('REMOTE_USER') in self.req_usernames:
                return self.app(environ, start_response)
        start_response(
                '403 Forbidden', [('Content-type', 'text/html')])
        return ['You are forbidden to view this resource']
</code></pre>

<p>4.<code>paste.filter_app_factory</code></p>

<p>和paste.filter_factory类似，接受一个wsgi应用参数，返回一个WSGI应用，所以如果改变以上代码的：</p>

<pre><code>class AuthFilter(object):
    def __init__(self, app, global_conf, req_usernames):
        ....
</code></pre>

<p>那么，类 AuthFilter就会作为一个filter&#95;app&#95;factory函数使用。</p>

<p>5.<code>paste.server_factory</code></p>

<p>与以上不同的是，函数返回的是一个server,一个server也是一个callable对象，以一个WSGI应用作为参数，而后为这个应用服务。</p>

<pre><code>def server_factory(global_conf, host, port):
    port = int(port)
    def serve(app):
        s = Server(app, host=host, port=port)
        s.serve_forever()
    return serve
</code></pre>

<p>Server的实现用户可以自定义，可以参考python包wsgiref</p>

<p>6.<code>paste.server_runner</code></p>

<p>与 paste.server_factory类似，不同的是参数格式。</p>

<h2>6 其他一些值得讨论的问题</h2>

<p>ConfigParser（PD底层用到这个来解析ini文件）解析ini文件不是很有效率，是否需要更改？</p>

<p>在配置文件中的对象是否需要是python风格的，而不是字符串的形式？</p>

<p>备注：Paste Deployment currently does not require other parts of Paste, and is distributed as a separate package.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date>2013-04-01 13:38:51</wp:post_date>
		<wp:post_date_gmt>2013-04-01 05:38:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-paste-deploy-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="paste-deploy"><![CDATA[paste.deploy]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[python,paste,deploy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[Paste.Deploy主要是用来载入WSGI中的Web App使用，所谓WSGI的app，就是用来处理客户端发送过来的请求的，Python.Paste的核心函数是loadapp(),下文中PD就指代Paste.Deploy。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[Python.Paste指南之Deploy(1)-概念]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python.Paste指南之Deploy(2)-实践</title>
		<link>http://blog.wachang.net/2013/04/python-paste-deploy-2/</link>
		<pubDate>Mon, 01 Apr 2013 05:53:23 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[<p>上一节中梳理了Python Paste中Deploy机制的概念，这一节就做一点小小的实践。首先，我们举一个使用了Deploy的例子，这个就是OpenStack的Quantum组件的WSGI部分。我们先来看关于WSGI部分的配置文件，以ini后缀，那么就是api-paste.ini文件，决定了API的处理流程。我加入了适当的注释。</p>

<!--more-->

<h2>1 OpenStack Quantum配置文件api-paste.ini</h2>

<pre><code>[composite:quantum]
use = egg:Paste#urlmap
/: quantumversions
/v2.0: quantumapi_v2_0
#使用composite分解机制，composite使用了usrlmap，xxxxx/xxx的API交给quantumversions处理。xxxx/v2.0/xxxx的API交给quantumapi_v2_0处理。

[composite:quantumapi_v2_0]
use = call:quantum.auth:pipeline_factory
noauth = extensions quantumapiapp_v2_0
keystone = authtoken keystonecontext extensions quantumapiapp_v2_0
#quantumapi_v2_0依然是一个分解组件，使用了quantum.auth模块下的pipeline_factory，对于这个factory，传递了两个参数，一个是noauth,一个是keystone。

[filter:keystonecontext]
paste.filter_factory = quantum.auth:QuantumKeystoneContext.factory
#对于keystonecontext，实际上是一个过滤器，使用了quantum.auth模块下的类的QuantumKeystoneContext的factory函数

[filter:authtoken]
paste.filter_factory = keystone.middleware.auth_token:filter_factory
auth_host = 127.0.0.1
auth_port = 35357
auth_protocol = http
admin_tenant_name = %SERVICE_TENANT_NAME%
admin_user = %SERVICE_USER%
admin_password = %SERVICE_PASSWORD%
#定义了另外一个filter

[filter:extensions]
paste.filter_factory = quantum.extensions.extensions:plugin_aware_extension_middleware_factory
#定义了另外一个filter,这个filter是为了支持扩展quantum api的

[app:quantumversions]
paste.app_factory = quantum.api.versions:Versions.factory
#核心的app部分，使用工厂函数，将app指向python代码。app_factory表明这个函数接收一系列参数，[DEFAULET]以及[app:]下面的，本部分本section没有参数，并返回一个函数对象。

[app:quantumapiapp_v2_0]
paste.app_factory = quantum.api.v2.router:APIRouter.factory
#同上
</code></pre>

<p>我们来总结一下，整个Quantum处理api的流程如下,其中，强调的部分为函数代码，其他为配置文件中的section部分。</p>

<p>对于路径为<code>/</code>类的API-->quantumversions处理-->调用<code>quantum.api.versions:Version</code>类的<code>factory函数</code>处理。</p>

<p>对于路径为<code>/2.0</code>类的API-->quantumapi&#95;v2&#95;0处理-->调用<code>quantum.auth</code>中的<code>pipeline_factory</code>处理,同时传递了两个参数noauth和keystone,类型为字典。</p>

<p>这个pipeline_factory中会读取另外一个变量CONF.auth（来自另外一个配置文件，不考虑），选择采用的认证方式，然后选择noauth或者keystone，并读取参数的值.</p>

<p>那么，就有两种情况：</p>

<p>noauth: 应用将会先经过extensions这个filter处理&#45;--|||-调用了<code>quantum.extensions.extensions:plugin_aware_extension_middleware_factory</code>，用来处理扩展api请求，这是第一次包装&#45;--|||-quantumapiapp&#95;v2&#95;0，这才是实际的WSGI应用，调用了<code>quantum.api.v2.router:APIRouter.factory</code>，并处理返回结果。</p>

<p>keystone：和上面类似，不同的是多了几个filter,authtoken keystonecontext extensions quantumapiapp&#95;v2&#95;0,并且在每个filter中可能还会有参数传递给这个fliter。</p>

<p>总的来说，通过pipeline装载多个filter,将最基本的app--APIRouter，层层包装，使其变为一个具有处理认证，扩展API等的应用（逻辑上看），filter的好处就是可以自定义，比如可以不要认证功能，这比写一个囊括全部功能的应用明显要好的多。</p>

<h2>2 代码实践</h2>

<h3>2.1 配置文件</h3>

<pre><code>[DEFAULT]
company = UESTC
school = Commuication and Information

[composite:common]
use = egg:Paste#urlmap
/:showversion
/detail:showdetail

[pipeline:showdetail]
pipeline = filter1 filter2 showstudetail

[filter:filter1]
#filter1 deal with auth,read args below
paste.filter_factory = python_paste:AuthFilter.factory
user = admin
passwd = admin

[filter:filter2]
#filter2 deal with time,read args below
paste.filter_factory = python_paste:LogFilter.factory
#all value is string
date = 20121120

[app:showstudetail]
name = wangchang
age = 23
paste.app_factory = python_paste:ShowStuDetail.factory

[app:showversion]
version = 1.0.0
</code></pre>

<p>从配置文件可以看出，这个程序会有如下操作：</p>

<ul>
<li>对于http://localhost/的访问，会调用showversion这个应用，应用读取ini文件中的version值并返回。__注意，在ini中的所有值都是字符串。</li>
<li>对于http://localhost/detail的访问，会先经过filter1以及filter2，这两个filter分别处理认证和LOG信息，他们会读取ini配置中的用户信息以及时间。最后才是交给showstudetail处理，showstudetail会读取ini中的用户信息并返回。__注意，使用多个filter的时候需要使用pipeline方式。</li>
</ul>

<h3>2.2 代码</h3>

<pre><code>import sys
import os
import webob
from webob import Request
from webob import Response
#from webob import environ
from paste.deploy import loadapp
from wsgiref.simple_server import make_server
from pprint import pprint

class AuthFilter(object):
      '''filter1,auth
         1.factory read args and print,return self instance
         2.call method return app
         3.AuthFilter(app)
      '''
      def __init__(self,app):
          self.app = app

      def __call__(self,environ,start_response):
          print 'this is Auth call filter1'
          #pass environ and start_response to app
          return self.app(environ,start_response)
      @classmethod
      def factory(cls,global_conf,**kwargs):
          '''global_conf and kwargs are dict'''
          print '######filter1##########'
          print 'global_conf type:',type(global_conf)
          print '[DEFAULT]',global_conf
          print 'kwargs type:',type(kwargs)
          print 'Auth Info',kwargs
          return AuthFilter

class LogFilter(object):
      '''
      filter2,Log
      '''
      def __init__(self,app):
          self.app = app
      def __call__(self,environ,start_response):
          print 'This is call LogFilter filter2'
          return self.app(environ,start_response)
      @classmethod
      def factory(cls,global_conf,**kwargs):
          #print type(global_conf)
          #print type(kwargs)
          print '######filter2###########'
          print '[DEFAULT]',global_conf
          print 'Log Info',kwargs
          return LogFilter

class ShowStuDetail(object):
      '''
      app
      '''
      def __init__(self,name,age):
          self.name = name
          self.age = age
      def __call__(self,environ,start_response):
          print 'this is call ShowStuDetail'
          #pprint(environ)
          #pprint environ
          start_response("200 OK",[("Content-type","text/plain")])
          content = []
          content.append("name: %s age:%s\n" % (self.name,self.age))
          content.append("**********WSGI INFO***********\n")
          for k,v in environ.iteritems():
              content.append('%s:%s \n' % (k,v))
          return ['\n'.join(content)] #return a list

      @classmethod
      def factory(cls,global_conf,**kwargs):
          #self.name = kwargs['name']
          #self.age = kwargs['age']
          return ShowStuDetail(kwargs['name'],kwargs['age'])

class ShowVersion(object):
      '''
      app
      '''
      def __init__(self,version):
          self.version = version
      def __call__(self,environ,start_response):
          print 'this is call ShowVersion'
          req = Request(environ)
          res = Response()
          res.status = '200 OK'
          res.content_type = "text/plain"
          content = []
          #pprint(req.environ)
          content.append("%s\n" % self.version)
          content.append("*********WSGI INFO*********")
          for k,v in environ.iteritems():
              content.append('%s:%s\n' % (k,v))
          res.body = '\n'.join(content)
          return res(environ,start_response)
      @classmethod
      def factory(cls,global_conf,**kwargs):
          #self.version = kwargs['version']
          return ShowVersion(kwargs['version'])

if __name__ == '__main__':
     config = "python_paste.ini"
     appname = "common"
     wsgi_app = loadapp("config:%s" % os.path.abspath(config), appname)
     server = make_server('localhost',7070,wsgi_app)
     server.serve_forever()
     pass
</code></pre>

<p>在程序中，对于web请求的处理，我分别采用了webob和普通WSGI定义的方式，后续我会补上webob的使用。</p>

<h3>2.3 结果</h3>

<p>先从服务端结果分析一下调用流程：</p>

<pre><code>Ubuntu:~/python$ python python_paste.py
######filter1##########
global_conf type: 
[DEFAULT] {'school': 'Commuication and Information', 'company': 'UESTC', 'here':         '/home/wachang/python', '__file__': '/home/wachang/python/python_paste.ini'}
kwargs type: 
Auth Info {'passwd': 'admin', 'user': 'admin'}
######filter2###########
[DEFAULT] {'school': 'Commuication and Information', 'company': 'UESTC', 'here':     '/home/wachang/python', '__file__': '/home/wachang/python/python_paste.ini'}
Log Info {'date': '20121120'}
以上是PD载入应用时，调用filter的factory方法输出的结果，可以看到，此读出了相关的变量信息。


this is call ShowVersion
localhost - - [21/Nov/2012 13:23:40] "GET / HTTP/1.1" 200 2938
this is call ShowVersion
localhost - - [21/Nov/2012 13:23:40] "GET /favicon.ico HTTP/1.1" 200 2889
以上是接收/请求，因为没有使用filter，直接交予showversion应用处理，并返回。

this is Auth call filter1
This is call LogFilter filter2
this is call ShowStuDetail
localhost - - [21/Nov/2012 13:24:23] "GET /detail HTTP/1.1" 200 3016
this is call ShowVersion
localhost - - [21/Nov/2012 13:24:24] "GET /favicon.ico HTTP/1.1" 200 2889
filter的调用时重点啊，可以看到，调用的顺序和pipeline中一样。最后才调用应用。
</code></pre>

<p>需要继续折腾的话，就看看<a href="http://docs.webob.org/en/latest/do-it-yourself.html">webob:do-it-yourselfrself</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2013-04-01 13:53:23</wp:post_date>
		<wp:post_date_gmt>2013-04-01 05:53:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-paste-deploy-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="paste-deploy"><![CDATA[paste.deploy]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[python,paste,deploy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[上一节中梳理了Python Paste中Deploy机制的概念，这一节就做一点小小的实践。首先，我们举一个使用了Deploy的例子，这个就是OpenStack的Quantum组件的WSGI部分。我们先来看关于WSGI部分的配置文件，以ini后缀，那么就是api-paste.ini文件，决定了API的处理流程。我加入了适当的注释。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[Python.Paste指南之Deploy(2)-实践]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum 基础知识及服务启动</title>
		<link>http://blog.wachang.net/2013/04/quantum-code-base/</link>
		<pubDate>Mon, 01 Apr 2013 08:42:48 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=281</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>浅出OpenStack源码系列</p>
  
  <p>Quantum 基础知识及服务启动</p>
</blockquote>

<p>我认为Quantum在代码上可以分为三个部分：</p>

<ul>
<li>Quantum Server：启动进程，处理REST API</li>
<li>Quantum Plugin：对于一个API请求，如何将此API内容递交给Plugin处理。</li>
<li>Plugin与Agent：两者之间是如何交互的，RPC相关的实现。</li>
</ul>

<!--more-->

<h2>1 关于配置文件</h2>

<p>Quantum有四类配置文件：</p>

<ul>
<li>api-paste.ini:这是用来配置Quantum WSGI服务的，主要就是如何处理一个REST API请求。此文件的解析是通过Paste.Deploy库来完成的。</li>
<li>quantum.conf:主要是配置Quantum选用的plugin,以及和数据库交互，以及与其他组件的交互，此文件解析是通过OpenStack自己基于库ConfigParser开发的oslo库完成的。</li>
<li>插件配置文件，比如：ovs&#95;quantum&#95;plugin.ini，这个配置文件，Plugin和Agent都会用到，此文件解析是通过OpenStack自己基于库ConfigParser开发的oslo库完成的。</li>
<li>rootwrap.conf：貌似是具体执行一些linux命令时候的包装。</li>
</ul>

<p>关于配置文件如何解析，很重要，我在基础篇中已经有详细的介绍，可以先看看～</p>

<h2>2 服务启动目录</h2>

<p>在quantum/bin下有下图的一些文件：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/quantum-bin.png" alt="quantum-bin" width="289" height="458" class="aligncenter size-full wp-image-282" /></a></p>

<p>这里面的每一个文件在安装quantum之后都是放在/usr/bin下面的，也就是作为服务启动的脚本，那么我们打开quantum-server这个，作为quantum启动的脚本，里面内容很简单：</p>

<pre><code>mport eventlet
eventlet.monkey_patch()

import os
import sys
sys.path.insert(0, os.getcwd())
from quantum.server import main as server

server()
</code></pre>

<p>说白了，其实这个目录的东西可以看成是一个"引入"，关键还是得看import的部分，才是真正的执行代码。</p>

<h2>3 Quantum服务启动</h2>

<p>quantum服务的启动主要是quantum/server/<strong>init</strong>.py文件：</p>

<pre><code>import sys
from oslo.config import cfg #创建一个配置管理器cfg.CONF
from quantum.common import config #向cfg.CONF注册核心选项core_opts,指明需要读取哪些选项或者哪些CLI参数
from quantum import service

def main():
    # the configuration will be read into the cfg.CONF global data structure
    config.parse(sys.argv[1:]) #解析配置文件，即是quantum.conf,把相应的配置信息写入到cfg.CONF中。

    try:
        quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务
        quantum_service.wait()#启动WSGI服务

if __name__ == "__main__":
    main()
</code></pre>

<p>主要讲两个部分，第一是配置读取，<code>from oslo.config import cfg</code>创建了一个cfg.CONF配置管理器，<code>from quantum.common import config</code>而quantum common则会想配置管理器注册核心选项core&#95;opts信息，主要是读取quantum.conf文件使用，以及cli&#95;opts，提供CLI操作支持，同时会定义两个比较重要的函数：</p>

<pre><code>def parse(args):#解析配置文件的，实际上是调用cdg.CONF()的call方法
def setup_logging(conf):#设置LOG信息用
def load_paste_app(app_name):#载入WSGI应用的，涉及API处理部分
</code></pre>

<p>关于这一部分，如果不是很懂的话，请先阅读本系列文章基础部分，关于配置文件cfg的部分，请阅读<a href="http://blog.wachang.net/2013/03/quantum-ovs-plugin-agent-config-file/">Quantum OpenvSwitch Plugin&amp;Agent读取配置文件</a>,原理都是一样的。</p>

<p>第二部分，就是启动相应的WSGI服务器，我们主要看</p>

<pre><code>quantum_service = service.serve_wsgi(service.QuantumApiService)
quantum_service.wait()
</code></pre>

<p>主要就是这两句，这一部分的细节会在随后中讲，这里的核心就是使用paste.deploy加载一个app，并作为处理API请求的应用，然后启动相应的服务器。</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date>2013-04-01 16:42:48</wp:post_date>
		<wp:post_date_gmt>2013-04-01 08:42:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quantum-code-base</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="quantum"><![CDATA[quantum]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于DNS中A,AAAA,MX,CNAME记录</title>
		<link>http://blog.wachang.net/2013/04/about-dns-record/</link>
		<pubDate>Tue, 02 Apr 2013 07:07:09 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=295</guid>
		<description></description>
		<content:encoded><![CDATA[<p>记录一下DNS中的一些概念，因为今天试了下cloudflare，感觉很棒，这是基础知识。关于DNS可以使用nsllookup命令查询，直接执行nslookup进入相应界面或者加参数得到结果。</p>

<h3>A记录</h3>

<p>A记录是用来创建到IP地址的记录。也就是一个域名和相应IP地址的记录。</p>

<pre><code>root@Node1:~# nslookup -type=a www.baidu.com
Server:     61.139.2.69
Address:    61.139.2.69#53

Non-authoritative answer:
www.baidu.com   canonical name = www.a.shifen.com.
Name:   www.a.shifen.com
Address: 115.239.210.27
Name:   www.a.shifen.com
Address: 115.239.210.26
</code></pre>

<p>最上面表示DNS服务器地址，下面的<code>非权威应答</code>表示查询得到的域名的IP地址，这里还显示了一个别名，baidu的这个形式估计是做负载用的。关于A记录的技巧：</p>

<!--more-->

<ul>
<li><p>如果想创建不带www的记录，即ezloo.com，在主机记录中填写@或者留空，不同的注册商可能不一样。</p></li>
<li><p>创建多个域名到同一个IP，比如给博客建了二级域名，可以使用*.blog.ezloo.com来指向一个IP，这样的话，不管是访问a.blog.ezloo.com还是b.blog.ezloo.com都能到同一个IP。</p></li>
<li><p>如果你给同一个二级域名设置了多个A记录，比如你建了两个blog的A记录，其中一个指向了111.111.111.111，另一个指向了111.111.111.112，那幺在查询的时候，每次返回的数据包含了两个IP地址，但是在返回的过程中数据排列的顺序每次都不相同。由于大 部分的客户端只选择第一条记录所以通过这种方式可以实现一定程度的负载均衡。</p></li>
</ul>

<h3>NS记录</h3>

<p>NS记录是域名服务器记录，用来指定域名由哪台服务器来进行解析。</p>

<pre><code>root@Node1:~# nslookup -type=ns baidu.com
Server:     61.139.2.69
Address:    61.139.2.69#53

Non-authoritative answer:
baidu.com   nameserver = ns3.baidu.com.
baidu.com   nameserver = ns4.baidu.com.
baidu.com   nameserver = dns.baidu.com.
baidu.com   nameserver = ns2.baidu.com.

Authoritative answers can be found from:
ns4.baidu.com   internet address = 220.181.38.10
dns.baidu.com   internet address = 202.108.22.220
ns2.baidu.com   internet address = 61.135.165.235
ns3.baidu.com   internet address = 220.181.37.10
</code></pre>

<h3>AAAA记录</h3>

<p>查询域名的IPv6地址。当然，这里的域名是指向的ipv6的地址。</p>

<pre><code>root@Node1:~# nslookup -type=aaaa ipv6.baidu.com    
Server:     61.139.2.69
Address:    61.139.2.69#53

Non-authoritative answer:
ipv6.baidu.com  has AAAA address 2400:da00::dbf:0:100
</code></pre>

<h3>CNAME</h3>

<p>CNAME是指A记录的另外一个名称，允许你将多个记录映射到同一台计算机上。比如我的tumblr博客的地址是wachang.tumblr.com,别名blog.wachang.net指向了domains.tumblr.com，那么访问blog.wachang.net其实就是访问的domains.tumblr.com。domains.tumblr.com在根据内容跳转到wachang.tumblr.com上。</p>

<pre><code>root@Node1:~# nslookup -type=cname blog.wachang.net
Server:     61.139.2.69
Address:    61.139.2.69#53

Non-authoritative answer:
blog.wachang.net    canonical name = domains.tumblr.com.
</code></pre>

<p>在比如百度的，我们看看：</p>

<pre><code>root@Node1:~# nslookup -type=cname www.baidu.com   
Server:     61.139.2.69
Address:    61.139.2.69#53

Non-authoritative answer:
www.baidu.com   canonical name = www.a.shifen.com.
</code></pre>

<h3>MX记录</h3>

<p>邮件交换记录提供到SMTP服务器的记录类型，可以有多条，同样样映射到A记录，提供冗余和数据备份，不同的服务器具备不同的优先级，数字越小代表优先级越高，会被优先选择。mx 记录的权重对 Mail 服务是很重要的，当发送邮件时，Mail 服务器先对域名进行解析，查找 mx 记录。先找权重数最小的服务器（比如说是 10），如果能连通，那幺就将服务器发送过去；如果无法连通 mx 记录为 10 的服务器，那幺才将邮件发送到权重为 20 的 mail 服务器上。</p>

<p>这里有一个重要的概念，权重 20 的服务器在配置上只是暂时缓存 mail ，当权重 20 的服务器能连通权重为 10 的服务器时，仍会将邮件发送的权重为 10 的 Mail 服务器上。当然，这个机制需要在 Mail 服务器上配置。</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date>2013-04-02 15:07:09</wp:post_date>
		<wp:post_date_gmt>2013-04-02 07:07:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about-dns-record</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dns"><![CDATA[dns]]></category>
		<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86"><![CDATA[运维管理]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_disable</wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quantum WSGI服务基础</title>
		<link>http://blog.wachang.net/2013/04/quantum-wsgi-base/</link>
		<pubDate>Sun, 07 Apr 2013 06:01:19 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=297</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>浅出OpenStack源码系列</p>
  
  <p>Quantum WSGI服务基础(1)</p>
  
  <p>本文涉及代码文件:quantum\quantum\wsgi.py</p>
</blockquote>

<h2>1 背景</h2>

<p>在上一篇文章<strong>Quantum 基础知识及服务启动</strong>中简单的阐述了一下quantum server是如何启动，其中重要的两段代码：</p>

<pre><code>quantum_service = service.serve_wsgi(service.QuantumApiService)#准备WSGI服务
quantum_service.wait()#启动WSGI服务
</code></pre>

<p>这两句构造了一个WSGI服务器实例并调用了相应的方法。在WSGI部分有两个文件:</p>

<ul>
<li><code>quantum\quantum\wsgi.py</code>：实现了WSGI中的基本概念，可以当成一个Lib库。</li>
<li><code>quantum\quantum\service.py</code>:基于上面wsgi提供的基本操作构建一个wsgi服务，比如quantum-api-server。</li>
</ul>

<p>在OpenStack的其他组件中，wsgi.py内容都是差不多的，而service.py则是不同的。</p>

<!--more-->

<h2>2 wsgi.py</h2>

<p>首先我们来分析这个文件，如上所说，该文件包含了wsgi中的一些概念的实现。首先看import部分，里面import了几个主要的东西：</p>

<pre><code>import webob.dec#webob库
import webob.exc
from xml.etree import ElementTree as etree#XML处理库
import eventlet.wsgi
from quantum.openstack.common import jsonutils#JSON相关库
</code></pre>

<p>以上主要模块我在基础部分都有讲到。请先回顾。</p>

<p>然后我们看看这个类的UML图：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/wsgi.py_.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/wsgi.py_-1024x461.png" alt="wsgi.py" width="640" height="288" class="aligncenter size-large wp-image-305" /></a></p>

<p>这里再提示wsgi.py中定义的类等就是WSGI的一些基本实现，在quantum架构中，大多会从wsgi.py中定义的类进行继承。</p>

<p>首先，我将<a href="http://blog.wachang.net/2013/04/quantum-wsgi-define-and-how-to-handle-api/">Quantum WSGI中代码概念及如何处理API</a>中涉及的概念在代码上做一个总结。</p>

<h3>2.1 class Application(object)</h3>

<p>这里的Application主要是一个WSGI应用的装饰器，实际的WSGI应用需要继承他。这个类主要是完成配置文件中:<strong>[app:name]内的初始化！！！！</strong></p>

<pre><code>class Application(object):
    """Base WSGI application wrapper. Subclasses need to implement __call__."""

    @classmethod
    def factory(cls, global_config, **local_config): #主要用来实例化类
        """Used for paste app factories in paste.deploy config files.

        Any local configuration (that is, values under the [app:APPNAME]
        section of the paste config) will be passed into the `__init__` method
        as kwargs.#这里说明了api-paste.ini文中中的配置如何使用！

        A hypothetical configuration would look like:

            [app:wadl]
            latest_version = 1.3
            paste.app_factory = nova.api.fancy_api:Wadl.factory

        which would result in a call to the `Wadl` class as
        #Class Wadl需要有一个call方法

            import quantum.api.fancy_api
            fancy_api.Wadl(latest_version='1.3')

        You could of course re-implement the `factory` method in subclasses,
        but using the kwarg passing it shouldn't be necessary.

        """
        return cls(**local_config)

    def __call__(self, environ, start_response):
        """Subclasses will probably want to implement __call__ like this:
        #call方法用来实现一个WSGI应用的功能，处理请求，返回结果。子类需要重写这个方法。

        @webob.dec.wsgify(RequestClass=Request)
        #此装饰器将一个函数封装为一个WSGI应用。
        def __call__(self, req):
          # Any of the following objects work as responses:

          # Option 1: simple string
          res = 'message\n'

          # Option 2: a nicely formatted HTTP exception page
          res = exc.HTTPForbidden(detail='Nice try')

          # Option 3: a webob Response object (in case you need to play with
          # headers, or you want to be treated like an iterable, or or or)
          res = Response();
          res.app_iter = open('somefile')

          # Option 4: any wsgi app to be run next
          res = self.application #quantum中使用的是这种方法。子类需要有一个application参数

          # Option 5: you can get a Response object for a wsgi app, too, to
          # play with headers etc
          res = req.get_response(self.application) #quantum中使用的是这种方法。子类需要有一个application参数

          # You can then just return your response...
          return res
          # ... or set req.response and return None.
          req.response = res

        See the end of http://pythonpaste.org/webob/modules/dec.html
        for more info.

        """
        raise NotImplementedError(_('You must implement __call__'))    
</code></pre>

<h3>2.2 class Controller(object)</h3>

<pre><code>class Controller(object):
    """WSGI app that dispatched to methods.与Method对应的controller，上面说到，一个路由表会指定一个controller，这个controller的基本。

    WSGI app that reads routing information supplied by RoutesMiddleware
    and calls the requested action method upon itself.  All action methods
    must, in addition to their normal parameters, accept a 'req' argument
    which is the incoming wsgi.Request.  They raise a webob.exc exception,
    or return a dict which will be serialized by requested content type.

    """

    @webob.dec.wsgify(RequestClass=Request)#装饰为一个WSGI应用
    def __call__(self, req):
        """
        Call the method specified in req.environ by RoutesMiddleware.
        """
        arg_dict = req.environ['wsgiorg.routing_args'][1]
        action = arg_dict['action']
        method = getattr(self, action)
        del arg_dict['controller']
        del arg_dict['action']
        if 'format' in arg_dict:
            del arg_dict['format']
        arg_dict['request'] = req
        result = method(**arg_dict)#执行方法，这里是一个抽象，子类继承后决定具体怎么执行    
</code></pre>

<h3>2.3 class Middleware(object)</h3>

<p>可以认为是一个filter，把一个WSGI包装一点新的功能，<strong>主要用来初始化api-paste.ini配置中[filter:]段中的实例初始化。</strong>，作为一个filter，app必然要作为一个参数。</p>

<pre><code>class Middleware(object):#所谓中间件，也就是一个WSGI APP
    """
    Base WSGI middleware wrapper. These classes require an application to be
    initialized that will be called next.  By default the middleware will
    simply call its wrapped app, or you can override __call__ to customize its
    behavior.
    """

    @classmethod
    def factory(cls, global_config, **local_config):
        """Used for paste app factories in paste.deploy config files.

        Any local configuration (that is, values under the [filter:APPNAME]
        section of the paste config) will be passed into the `__init__` method
        as kwargs.

        A hypothetical configuration would look like:

            [filter:analytics]
            redis_host = 127.0.0.1
            paste.filter_factory = nova.api.analytics:Analytics.factory

        which would result in a call to the `Analytics` class as

            import nova.api.analytics
            analytics.Analytics(app_from_paste, redis_host='127.0.0.1')

        You could of course re-implement the `factory` method in subclasses,
        but using the kwarg passing it shouldn't be necessary.

        """
        def _factory(app):
            return cls(app, **local_config)
        return _factory

    def __init__(self, application):
        self.application = application

    def process_request(self, req):
        """
        Called on each request.

        If this returns None, the next application down the stack will be
        executed. If it returns a response then that response will be returned
        and execution will stop here.

        """
        return None

    def process_response(self, response):
        """Do whatever you'd like to the response."""
        return response

    @webob.dec.wsgify#封装为WSGI应用
    def __call__(self, req):
        response = self.process_request(req)
        if response:
            return response
        response = req.get_response(self.application)
        return self.process_response(response)     
</code></pre>

<h3>2.4 class Resource(Application)</h3>

<p>继承了Application，这就是一个WSGI应用了。这个类用来干嘛？类Controller作为Resource类的一个成员，所以这个类就是用来处理调度controller以及内容格式化的。</p>

<pre><code>class Resource(Application):
    """WSGI app that handles (de)serialization and controller dispatch.

    WSGI app that reads routing information supplied by RoutesMiddleware
    and calls the requested action method upon its controller.  All
    controller action methods must accept a 'req' argument, which is the
    incoming wsgi.Request. If the operation is a PUT or POST, the controller
    method must also accept a 'body' argument (the deserialized request body).
    They may raise a webob.exc exception or return a dict, which will be
    serialized by requested content type.

    """

    def __init__(self, controller, fault_body_function,
                 deserializer=None, serializer=None):
        """
        :param controller: object that implement methods created by routes lib
        :param deserializer: object that can serialize the output of a
                             controller into a webob response
        :param serializer: object that can deserialize a webob request
                           into necessary pieces
        :param fault_body_function: a function that will build the response
                                    body for HTTP errors raised by operations
                                    on this resource object

        """
        self.controller = controller
        self.deserializer = deserializer or RequestDeserializer()
        self.serializer = serializer or ResponseSerializer()
        self._fault_body_function = fault_body_function
        # use serializer's xmlns for populating Fault generator xmlns
        xml_serializer = self.serializer.body_serializers['application/xml']
        if hasattr(xml_serializer, 'xmlns'):
            self._xmlns = xml_serializer.xmlns
    def dispatch(self, request, action, action_args):
        """Find action-spefic method on controller and call it."""

        controller_method = getattr(self.controller, action)
        try:
            #NOTE(salvatore-orlando): the controller method must have
            # an argument whose name is 'request'
            return controller_method(request=request, **action_args)#执行controller的方法了！！
        except TypeError as exc:
            LOG.exception(exc)
            return Fault(webob.exc.HTTPBadRequest(),
                         self._xmlns) 
</code></pre>

<h3>2.5 class Server(object)</h3>

<p>主要是一个WSGI服务器，也就是Quantum API Server的基本，跟一般的socket服务器差不多，区别就是用了eventlet来做线程处理。</p>

<pre><code>class Server(object):
    """Server class to manage multiple WSGI sockets and applications."""

    def _run(self, application, socket):
        """Start a WSGI server in a new green thread."""
        logger = logging.getLogger('eventlet.wsgi.server')
        eventlet.wsgi.server(socket, application, custom_pool=self.pool,
                         log=logging.WritableLogger(logger))   
</code></pre>

<h3>2.6 class Router(object)</h3>

<p>把API的路径转换到相应的app，这个类很重要。</p>

<pre><code>class Router(object):
    """
    WSGI middleware that maps incoming requests to WSGI apps.
    """

    @classmethod
    def factory(cls, global_config, **local_config):
        """
        Returns an instance of the WSGI Router class
        """
        return cls()

    def __init__(self, mapper):
        """
        Create a router for the given routes.Mapper.#根据routes.Mapper中的路由规则产生一个路由器，
        相关的路由规则，在解析api-paste.ini中的extensions部分已经完成。

        Each route in `mapper` must specify a 'controller', which is a
        WSGI app to call.  You'll probably want to specify an 'action' as
        well and have your controller be a wsgi.Controller, who will route
        the request to the action method.

        Examples:
          mapper = routes.Mapper()
          sc = ServerController()

          # Explicit mapping of one route to a controller+action
          mapper.connect(None, "/svrlist", controller=sc, action="list")

          # Actions are all implicitly defined
          mapper.resource("network", "networks", controller=nc)

          # Pointing to an arbitrary WSGI app.  You can specify the
          # {path_info:.*} parameter so the target app can be handed just that
          # section of the URL.
          mapper.connect(None, "/v1.0/{path_info:.*}", controller=BlogApp())
        """
        self.map = mapper
        self._router = routes.middleware.RoutesMiddleware(self._dispatch,
                                                          self.map)

    @webob.dec.wsgify
    def __call__(self, req):
        """
        Route the incoming request to a controller based on self.map.
        If no match, return a 404.
        """
        return self._router

    @staticmethod
    @webob.dec.wsgify
    def _dispatch(req):
        """
        Called by self._router after matching the incoming request to a route
        and putting the information into req.environ.  Either returns 404
        or the routed WSGI app's response.
        """
        match = req.environ['wsgiorg.routing_args'][1]
        if not match:
            return webob.exc.HTTPNotFound()
        app = match['controller']#返回是controller的名字
        return app     
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date>2013-04-07 14:01:19</wp:post_date>
		<wp:post_date_gmt>2013-04-07 06:01:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quantum-wsgi-base</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="openstack-2"><![CDATA[openstack]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="quantum"><![CDATA[quantum]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[Quantum WSGI服务基础]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>66</wp:comment_id>
			<wp:comment_author><![CDATA[fire safes]]></wp:comment_author>
			<wp:comment_author_email>S3HhwgKcNla@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.e-cannonsafes.com/about.html</wp:comment_author_url>
			<wp:comment_author_IP>54.224.4.47</wp:comment_author_IP>
			<wp:comment_date>2013-04-25 00:05:42</wp:comment_date>
			<wp:comment_date_gmt>2013-04-24 16:05:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[you could have a terrific blog right here! would you wish to make some invite posts on my weblog?
]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1366944069]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Quantum WSGI中代码概念及如何处理API</title>
		<link>http://blog.wachang.net/2013/04/quantum-wsgi-define-and-how-to-handle-api/</link>
		<pubDate>Wed, 03 Apr 2013 02:40:03 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=303</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <p>浅出OpenStack源码系列</p>
  
  <p>Quantum WSGI中代码概念及如何处理API</p>
</blockquote>

<p>在写WSGI的代码分析的过程中，发现要理解WSGI部分的代码，得先理解WSGI如何处理API的过程，这样理解代码会相当快，于是补上此篇文档。</p>

<p>在我前面的基础篇中，我已经讲述了quantum中的api-paste.ini文件如何定义了quantum api的处理流程。这里做一个回顾：</p>

<p>对于v2.0之类的API，使用keystone验证的话，会有以下几个过程：</p>

<pre><code>`/v2.0`（urlmap进行区分）---》读取authtoken段的参数---》与keystone进行交互---》增加extension---》APIRouter
</code></pre>

<p>上面这个流程是什么意思呢？我跳过认证部分讲：</p>

<p>quantum使用的是REST API，这个API的一个特点就是API的路径，有着重要作用，是作为一个参数传递的，比如一个api:</p>

<pre><code>/v2.0/networks/(the uuid of network).json
</code></pre>

<p>那么，这个networks加上这个HTTP请求的方法（GET/PUT等）就能决定最终是调用quantum plugin中的哪个函数（函数 get_network），而uuid则会作为一个参数传递，.json则会告诉quantum这个API请求的结果需要以什么形式返回。</p>

<!--more-->

<p>上面这个过程我们换算到程序中就有以下这么些东西：</p>

<h2>WSGI&amp;API</h2>

<p><strong>Application</strong></p>

<p>首先，quantum-server这个WSGI服务器需要一个“东西”，用来处理接收到的API，这个应用在代码中的概念就是一个application，那么这个application要处理些啥呢，如何处理？OK，这就是配置文件api-paste.ini所定义的了，你看，其实api-paste.ini中对一个API的处理分为了很多步骤，是由很多的类或者实例或者管道来联合处理的，那么，这些类的实例，就是一个application，所以中，api-paste.ini文件中定义了多个application，在Python.Paste中的loadapp()函数读取api-paste.ini这个配置文件，就生成了这么一个抽象的application，可以看到这个app准确的来说不是实例化类这种传统方式得到的，这个app主要就是通过调用不同函数不同实例的方法完成一个动作，所以说，他是一个概念，你可以认为这个application只定义了流程，而没有相应的代码。在api-paste.ini文件中的第一段:</p>

<pre><code>[composite:quantum]
use = egg:Paste#urlmap
/: quantumversions
/v2.0: quantumapi_v2_0
</code></pre>

<p>如上，这个application（的名字）就叫做quantum。这个其实是个抽象的application,而后面的一些配置：</p>

<pre><code>[app:quantumversions]
paste.app_factory = quantum.api.versions:Versions.factory
</code></pre>

<p>这里也定义了一个app，这个当然就有具体的代码和实例了。当然，你可以认为在api-paste.ini文件中每个段都定义了一个app，loadapp()会把这个app按照一定的规则组合成一个大的application.</p>

<p><strong>Routes</strong></p>

<p>在例子API中，我们说到REST API中这个后缀，专业点的说法就是路径path，很是重要。他能决定quantum最终调用的处理方式，那么如何决定这么个事呢，这个时候就需要引入路由这个概念了，与网络中的路由类似，OpenStack中引入Routes这个库就是可以根据REST API中的path信息进行一个调度。</p>

<p><strong>Router</strong></p>

<p>为了完成调度，肯定就需要一个调度器，这个就是Router，正如api-paste.ini中描述的一个API经过application处理以后最后到达APIRouter，这个API Router根据自己生成的路由规则把相应的API内容调度到一个处理它的东西上（controller,如下）。</p>

<p>由于quantum api有核心api和扩展api，所以api-paste.ini中定义的extension其实再载入了相应扩展API定义以后也会生成一个Router，处理扩展API相关，这个下面会讲。</p>

<p><strong>Routes Table：</strong></p>

<p>既然是路由，那么就需要一个路由表了，这个路由表的作用就是让程序能够根据REST API的path信息将相应的操作传递到一个处理它的“东西上”，这个“东西”是什么呢？名字就叫controller：</p>

<p><strong>controller</strong></p>

<p>controller是什么意思？controller就是一个调度器，我们知道，quantum api的操作其实都是plugin来完成的，那么最基本的，肯定是使用plugin中的函数来完成。前面的路由routes，只能根据一定的规则把path路径或者HTTP的body参数路由到一个controller，那么这个controller，要做的就是根据传递过来的信息，plugin中需要执行操作的函数，并调用这个函数，当然，controller也会把body信息(如果有)传递给plugin相关函数。OK，到这里，我必须引入quantum api中的一些基本概念了。</p>

<p><strong>resource</strong></p>

<p>从quantum api中就可以看出来，resource就是一个需要操作的资源，多个resource的集合就是resources,举个例子，quantum中三大概念，network,subnet,port，我们假设API形式为/v2.0/port/XXX /v2.0/network/XXX 这些中的port,network就是resource，那么多个resouce和在一起，就是resources了撒，不过quantum给他换了个名字，叫collection，所以quantum中的REST API都是/v2.0/ports/XXX /v2.0/networks/XXX这种了，因为resource，collection这个词会在代码中出现，所以你明白他是什么意思就OK了！简单一个以quantum中network的总结：</p>

<pre><code>networks = collection
network = resource
</code></pre>

<p>我举一个简单的route中添加路由表的例子，仅作举例，不懂的话没关系，以后会深入讲：</p>

<pre><code>from routes import Mapper  
map = Mapper()  
map.connect(None, "/error/{action}/{id}, controller="error")  
map.connect("home", "/", controller="main", action="index")  

# Match a URL, returns a dict or None if no match  
result = map.match('/error/myapp/4')  
# result == {'controller': 'main', 'action': 'myapp', 'id': '4'}  
</code></pre>

<p><strong>action</strong></p>

<p>在routes表中，我们注意有一个action,这个在代码中也会涉及，action是啥意思，我们知道HTTP请求中GET PUT POST等方法，对应需要的操作，那么在quantum代码中，我们不这样叫，我们把HTTP的方法映射到对资源的action（操作上），这个映射关系如下所示，这个图中，collection就是上面的概念resources，而这其实也是一个简单的routes表了，不过目前我们只需要看看action和method的对应。</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/routepath.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/routepath.png" alt="routepath" width="888" height="170" class="aligncenter size-full wp-image-308" /></a></p>

<p>整个上面所说的其实都是一个<strong>MVC（模型-视图-控制）</strong>框架，这是一个软件开发方式，可以自己学习一下,可以更好的理解OpenStack各个组件的REST API思想（用了python各种库来实现了一个MVC）。</p>

<h2>API&amp;扩展API</h2>

<p>Quantum是有两类API的，一类是核心API，包括networks,ports,subnets的API，这个API的Router是通过api-paste.ini中的APIRouter来进行的，同时你可以扩展API，相应的扩展都在quantum/extensions目录下，你可以把自己定义的resoucre加入到扩展中，形成扩展API，这一部分后续文章讲，现在只是基础概念。而扩展API的Router其实是在api-paste.ini中调用extension_middleware完成的，所以，整个流程可以如下两个图，这两个图体现了本文全部内容：</p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/loadapp.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/loadapp.png" alt="loadapp" width="794" height="547" class="aligncenter size-full wp-image-309" /></a></p>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/http.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/http.png" alt="http" width="687" height="634" class="aligncenter size-full wp-image-310" /></a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date>2013-04-03 10:40:03</wp:post_date>
		<wp:post_date_gmt>2013-04-03 02:40:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quantum-wsgi-define-and-how-to-handle-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openstack"><![CDATA[OpenStack]]></category>
		<category domain="post_tag" nicename="openstack-2"><![CDATA[openstack]]></category>
		<category domain="post_tag" nicename="paste-deploy"><![CDATA[paste.deploy]]></category>
		<category domain="post_tag" nicename="quantum"><![CDATA[quantum]]></category>
		<category domain="post_tag" nicename="wsgi"><![CDATA[wsgi]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[wagi,quantum,openstack,rest api]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[首先，quantum-server这个WSGI服务器需要一个“东西”，用来处理接收到的API，这个应用在代码中的概念就是一个application，那么这个application要处理些啥呢，如何处理？OK，这就是配置文件api-paste.ini所定义的了，你看，其实api-paste.ini中对一个API的处理分为]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[Quantum WSGI中代码概念及如何处理API]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_content_index_enable</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[Quantum WSGI服务基础 | Wang Chang&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.wachang.net/2013/04/quantum-wsgi-base/</wp:comment_author_url>
			<wp:comment_author_IP>222.197.180.135</wp:comment_author_IP>
			<wp:comment_date>2013-04-07 14:01:23</wp:comment_date>
			<wp:comment_date_gmt>2013-04-07 06:01:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 首先，我将Quantum WSGI中代码概念及如何处理API中涉及的概念在代码上做一个总结。 [...]
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>[转]十大编程字体</title>
		<link>http://blog.wachang.net/2013/04/coding-fonts/</link>
		<pubDate>Wed, 03 Apr 2013 07:26:41 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=315</guid>
		<description></description>
		<content:encoded><![CDATA[<p>原文链接：</p>

<p><a href="http://www.iplaysoft.com/top10-programming-fonts.html">10大最适合编程的字体推荐下载，让代码看起来更美更舒服！</a></p>

<p><a href="http://hivelogic.com/articles/top-10-programming-fonts/">英文原版</a></p>

<!--more-->

<h2>10. Courier</h2>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/courier.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/courier.png" alt="courier" width="518" height="221" class="aligncenter size-full wp-image-316" /></a></p>

<h2>9. Andale Mono</h2>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/andale.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/andale.png" alt="andale" width="458" height="206" class="aligncenter size-full wp-image-317" /></a></p>

<h2>8. Monaco</h2>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/monaco.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/monaco.png" alt="monaco" width="436" height="238" class="aligncenter size-full wp-image-318" /></a></p>

<h2>7. Profont</h2>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/profont.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/profont.png" alt="profont" width="336" height="153" class="aligncenter size-full wp-image-319" /></a></p>

<h2>6. Monofur</h2>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/monofur.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/monofur.png" alt="monofur" width="393" height="184" class="aligncenter size-full wp-image-320" /></a></p>

<h2>5. Proggy</h2>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/proggy.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/proggy.png" alt="proggy" width="361" height="157" class="aligncenter size-full wp-image-321" /></a></p>

<h2>4. Droid Sans Mono</h2>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/droid-sans.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/droid-sans.png" alt="droid sans" width="440" height="213" class="aligncenter size-full wp-image-322" /></a></p>

<h2>3. Deja Vu Sans Mono</h2>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/deja-vu-sans.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/deja-vu-sans.png" alt="deja vu sans" width="461" height="214" class="aligncenter size-full wp-image-323" /></a></p>

<h2>2. Consolas + 中文雅黑混合版</h2>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/consolas.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/consolas.png" alt="consolas" width="478" height="201" class="aligncenter size-full wp-image-324" /></a></p>

<h2>1. Inconsolata</h2>

<p><a href="http://blog.wachang.net/wp-content/uploads/2013/04/inconsolata.png"><img src="http://blog.wachang.net/wp-content/uploads/2013/04/inconsolata.png" alt="inconsolata" width="462" height="195" class="aligncenter size-full wp-image-325" /></a></p>

<p><code>所有字体打包下载：</code></p>

<p>[wpdm_file id=3]</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date>2013-04-03 15:26:41</wp:post_date>
		<wp:post_date_gmt>2013-04-03 07:26:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>coding-fonts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_disable</wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.wachang.net/2013/04/347/</link>
		<pubDate>Wed, 24 Apr 2013 02:56:33 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=347</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code>from routes import Mapper  
map = Mapper()  
map.connect(None, "/error/{action}/{id}, controller="error")  
map.connect("home", "/", controller="main", action="index")  

# Match a URL, returns a dict or None if no match  
result = map.match('/error/myapp/4')  
# result == {'controller': 'main', 'action': 'myapp', 'id': '4'}  
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2013-04-24 10:56:33</wp:post_date>
		<wp:post_date_gmt>2013-04-24 02:56:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>347</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1367134678]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>葡萄酒知识入门</title>
		<link>http://blog.wachang.net/2013/04/wine/</link>
		<pubDate>Sun, 28 Apr 2013 06:00:10 +0000</pubDate>
		<dc:creator>ati9550128m</dc:creator>
		<guid isPermaLink="false">http://blog.wachang.net/?p=348</guid>
		<description></description>
		<content:encoded><![CDATA[<p>葡萄酒是以鲜葡萄或者葡萄汁为原料，经全部或者部分发酵而成的，有一定酒精度的发酵酒。葡萄酒中花青素预防心脏疾病，白藜芦醇抗癌。PH城碱性，是一位属于弱碱性的酒。葡萄酒在起源于埃及，随罗马帝国扩张传遍欧洲。</p>

<ul>
<li><p>葡萄酒的生命期？浅龄期--》发展期--》成熟期--》高峰期--》退化期--》垂老期</p></li>
<li><p>葡萄酒的分类？ 按色泽：白葡萄酒，桃红葡萄酒，红葡萄酒 按糖分：半型葡萄酒，半干型葡萄酒，半甜型葡萄酒，甜型葡萄酒 按二氧化碳：无气葡萄酒，也叫静酒；起泡型葡萄酒，葡萄汽酒。</p></li>
<li><p>一般葡萄酒怎么酿造？ 采摘--》破碎--》浸渍发酵--》提渣分离--》陈酿--》澄清</p></li>
<li><p>葡萄酒如何品？（12秒法则） 入口：持续2-3秒，甜味为主；--》发展，5秒及更长，酸甜，特别是苦为主，咸味，酸味，苦味依次上升--》后味：5-12秒甜味逐渐下降</p></li>
<li><p>葡萄酒的品酒温度？（摄氏度） 甜型：4-8 香槟/起泡：6-8 干白：8-12 桃红：12-14 干红：14-18</p></li>
</ul>

<!--more-->

<ul>
<li><p>葡萄酒怎么看？ 先看颜色，杯子倾斜45度，观察酒的颜色饱和度等；然后闻香。第一次，酒杯慢慢举起，不摇动，闻闻；第二次，轻摇酒杯，使空气与酒充分融合。最后，品酒，轻喝一小口，如喉前仔细品味。</p></li>
<li><p>葡萄酒杯种类：白葡萄酒杯，起泡葡萄酒杯（杯身细长），波尔多红葡萄酒杯（杯体宽于杯口）</p></li>
<li><p>葡萄酒的瓶形：波尔多瓶形（赤霞珠等品种多使用这种），起泡型（为了抵抗压力，一般底部比较厚达），冰酒型（又细又长，增加档次感）</p></li>
<li><p>高酒杯如何拿？ 不要拿杯身，手会使得葡萄酒加温，留下手印，要拿杯腿或者杯座。</p></li>
<li><p>为啥子要用木桶？ 橡木桶中，通过微气孔和氧气和酒有限接触，增添项目单宁和香气。使酒体更协调，口感更好。</p></li>
<li><p>红葡萄的品种？ 赤霞珠：酒体醇厚，协调，果香浓，酒体宝石红色，口感好 西拉：澄清透明，酒体深宝石红色，复合型果香。 梅鹿辄：酒体丰满，柔和，口感清爽。</p></li>
<li><p>白葡萄的品种？ 霞多丽：酒色金黄，香气怡人； 雷司令：浅黄色带绿色，柔和爽口； 长相思：天然清新，酒可以长时间存放。</p></li>
<li><p>葡萄酒上酒顺序？ 先白后红；先淡后浓；先干后甜；先普通再贵；先年份轻再年份久；</p></li>
<li><p>葡萄酒配什么吃？ 一般是红配红，白配白；干红就配家禽肉类味重的。干白就配海鲜白肉等。</p></li>
<li><p>有名的酒庄： 智利比斯克酒庄 君顶酒庄 法国雷沃堡酒庄</p></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date>2013-04-28 14:00:10</wp:post_date>
		<wp:post_date_gmt>2013-04-28 06:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wine</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="life"><![CDATA[Life]]></category>
		<category domain="post_tag" nicename="wine"><![CDATA[wine]]></category>
		<wp:postmeta>
			<wp:meta_key>posturl_add_url</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_keywords</wp:meta_key>
			<wp:meta_value><![CDATA[winr]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_description</wp:meta_key>
			<wp:meta_value><![CDATA[葡萄酒是以鲜葡萄或者葡萄汁为原料，经全部或者部分发酵而成的，有一定酒精度的发酵酒。葡萄酒中花青素预防心脏疾病，白藜芦醇抗癌。PH城碱性，是一位属于弱碱性的酒。葡萄酒在起源于埃及，随罗马帝国扩张传遍欧洲。]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aioseop_title</wp:meta_key>
			<wp:meta_value><![CDATA[葡萄酒知识入门]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
